// AUTOGENERATED CODE FROM PARSELR STATE MACHINE GENERATOR. DO NOT EDIT.
//
// Date generated: Sun, 30 Aug 2020 15:26:44 GMT
// This code represents the hidden derived class from the
// application-specific state machine class, iteself derived from
// Parsing.FSM. There should be no need to edit this file.

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.IO;
using Parsing;

namespace PedXController.AutoGenerated
{
    /// <summary>
    /// Implements the auto-generated part of the user-specific
    /// state machine class. This gives the action functions and guards
    /// in-class access to the contents of the user-specific FSM.
    /// </summary>

    public class CrossingController_AutoGenerated : CrossingController
    {
        /// <summary>
        /// Initialiser for source-code FSM
        /// generator that is subsequently compiled to
        /// obtain the new run-time code.
        /// </summary>

        public static FSMTable InitFSMTable()
        {
            // Event, guard and action names/values for debugging

            TwoWayMap<string, int> tokens = new TwoWayMap<string, int>();
            tokens.Add("TIMERTICK", 16388);
            tokens.Add("BUTTONPRESS", 16389);

            // State names and values

            tokens.Add("RedAndYellow", 32769);
            tokens.Add("AllRed", 32770);
            tokens.Add("TimedGreen", 32771);
            tokens.Add("Yellow", 32772);
            tokens.Add("Green", 32773);
            tokens.Add("RedWalk", 32774);

            // Create the state table

            FSMState[] states = new FSMState[6];
            FSMTransition[] transitions;

            // State AllRed

            states[1] = new FSMState
            {
                Name = "AllRed",
                EntryActions = null,
                ExitActions = null
            };

            // State RedAndYellow

            states[2] = new FSMState
            {
                Name = "RedAndYellow",
                EntryActions = null,
                ExitActions = null
            };

            // State TimedGreen

            states[3] = new FSMState
            {
                Name = "TimedGreen",
                EntryActions = null,
                ExitActions = null
            };

            // State Green

            states[0] = new FSMState
            {
                Name = "Green",
                EntryActions = null,
                ExitActions = null
            };

            // State Yellow

            states[4] = new FSMState
            {
                Name = "Yellow",
                EntryActions = null,
                ExitActions = null
            };

            // State RedWalk

            states[5] = new FSMState
            {
                Name = "RedWalk",
                EntryActions = null,
                ExitActions = null
            };

            // Transitions for state AllRed

            transitions = new FSMTransition[2];
            states[1].Transitions = transitions;

            // AllRed: TIMERTICK RedAndYellow

            transitions[0] = new FSMTransition
            {
                InputToken = 16388,  // TIMERTICK
                Condition = null,
                InlineActions = new FSMInlineAction("OnAllRedTransition0"),
                NextState = states[2]  // RedAndYellow
            };

            // AllRed: BUTTONPRESS AllRed

            transitions[1] = new FSMTransition
            {
                InputToken = 16389,  // BUTTONPRESS
                Condition = null,
                InlineActions = new FSMInlineAction("OnAllRedTransition1"),
                NextState = states[1]  // AllRed
            };

            // Transitions for state RedAndYellow

            transitions = new FSMTransition[2];
            states[2].Transitions = transitions;

            // RedAndYellow: TIMERTICK TimedGreen

            transitions[0] = new FSMTransition
            {
                InputToken = 16388,  // TIMERTICK
                Condition = null,
                InlineActions = new FSMInlineAction("OnRedAndYellowTransition0"),
                NextState = states[3]  // TimedGreen
            };

            // RedAndYellow: BUTTONPRESS RedAndYellow

            transitions[1] = new FSMTransition
            {
                InputToken = 16389,  // BUTTONPRESS
                Condition = null,
                InlineActions = new FSMInlineAction("OnRedAndYellowTransition1"),
                NextState = states[2]  // RedAndYellow
            };

            // Transitions for state TimedGreen

            transitions = new FSMTransition[3];
            states[3].Transitions = transitions;

            // TimedGreen: TIMERTICK[ButtonWasPressed] Yellow

            transitions[0] = new FSMTransition
            {
                InputToken = 16388,  // TIMERTICK
                Condition = new LeafEvaluator("ButtonWasPressed"),
                InlineActions = new FSMInlineAction("OnTimedGreenTransition0"),
                NextState = states[4]  // Yellow
            };

            // TimedGreen: BUTTONPRESS TimedGreen

            transitions[1] = new FSMTransition
            {
                InputToken = 16389,  // BUTTONPRESS
                Condition = null,
                InlineActions = new FSMInlineAction("OnTimedGreenTransition1"),
                NextState = states[3]  // TimedGreen
            };

            // TimedGreen: TIMERTICK[NOT {Argument}] Green

            transitions[2] = new FSMTransition
            {
                InputToken = 16388,  // TIMERTICK
                Condition = new NotEvaluator
                {
                    Arg = new LeafEvaluator("ButtonWasPressed")
                },
                InlineActions = null,
                NextState = states[0]  // Green
            };

            // Transitions for state Green

            transitions = new FSMTransition[1];
            states[0].Transitions = transitions;

            // Green: BUTTONPRESS Yellow

            transitions[0] = new FSMTransition
            {
                InputToken = 16389,  // BUTTONPRESS
                Condition = null,
                InlineActions = new FSMInlineAction("OnGreenTransition0"),
                NextState = states[4]  // Yellow
            };

            // Transitions for state Yellow

            transitions = new FSMTransition[2];
            states[4].Transitions = transitions;

            // Yellow: BUTTONPRESS Yellow

            transitions[0] = new FSMTransition
            {
                InputToken = 16389,  // BUTTONPRESS
                Condition = null,
                InlineActions = new FSMInlineAction("OnYellowTransition0"),
                NextState = states[4]  // Yellow
            };

            // Yellow: TIMERTICK RedWalk

            transitions[1] = new FSMTransition
            {
                InputToken = 16388,  // TIMERTICK
                Condition = null,
                InlineActions = new FSMInlineAction("OnYellowTransition1"),
                NextState = states[5]  // RedWalk
            };

            // Transitions for state RedWalk

            transitions = new FSMTransition[2];
            states[5].Transitions = transitions;

            // RedWalk: BUTTONPRESS RedWalk

            transitions[0] = new FSMTransition
            {
                InputToken = 16389,  // BUTTONPRESS
                Condition = null,
                InlineActions = null,
                NextState = states[5]  // RedWalk
            };

            // RedWalk: TIMERTICK AllRed

            transitions[1] = new FSMTransition
            {
                InputToken = 16388,  // TIMERTICK
                Condition = null,
                InlineActions = new FSMInlineAction("OnRedWalkTransition1"),
                NextState = states[1]  // AllRed
            };

            // Return a new FSM Table to the caller

            FSMTable newTable = new FSMTable(states, tokens, false);
            newTable.InitializeFSMConstructor(typeof(CrossingController_AutoGenerated));
            return newTable;
        }

        // Inline action functions from FSM grammar

        public void OnAllRedTransition0()
        {
            SetLightRedAndYellow();
            SetRedAndYellowTimer();
        }

        public void OnAllRedTransition1()
        {
            RecordButtonPressed();
        }

        public void OnRedAndYellowTransition0()
        {
            SetLightGreen();
            SetGreenTimer();
        }

        public void OnRedAndYellowTransition1()
        {
            RecordButtonPressed();
        }

        public void OnTimedGreenTransition0()
        {
            SetLightYellow();
            SetYellowTimer();
        }

        public void OnTimedGreenTransition1()
        {
            RecordButtonPressed();
        }

        public void OnGreenTransition0()
        {
            SetLightYellow();
            RecordButtonPressed();
            SetYellowTimer();
        }

        public void OnYellowTransition0()
        {
            RecordButtonPressed();
        }

        public void OnYellowTransition1()
        {
            SetLightRed();
            SetLightWalk();
            ClearButtonPress();
            SetWalkTimer();
        }

        public void OnRedWalkTransition1()
        {
            SetLightDontWalk();
            SetAllRedTimer();
        }

        // Inline guard functions from FSM grammar

        public bool ButtonWasPressed()
        {
            return WalkIndicator.ButtonPressed;
        }
    }
}
