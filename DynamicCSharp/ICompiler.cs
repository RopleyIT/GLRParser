using Microsoft.CodeAnalysis;
using System;
using System.Collections.Generic;
using System.IO;
using System.Reflection;

namespace DynamicCSharp
{
    /// <summary>
    /// Interface onto a class that manages the conversion
    /// of source code into a dynamically loaded assembly
    /// </summary>

    public interface ICompiler
    {
        /// <summary>
        /// The assembly generated and loaded from this compilation
        /// </summary>

        Assembly Assembly { get; }

        /// <summary>
        /// The name chosen for the output assembly
        /// </summary>

        string AssemblyName { get; set; }

        /// <summary>
        /// The compilation output
        /// </summary>

        Compilation Compilation { get; }

        /// <summary>
        /// The list of warnings and errors generated by this compilation
        /// </summary>

        IEnumerable<Diagnostic> Diagnostics { get; }

        /// <summary>
        /// True if the compilation raised any errors
        /// </summary>

        bool HasErrors { get; }

        /// <summary>
        /// The semantic analysis of this compilation
        /// </summary>

        SemanticModel SemanticModel { get; }

        /// <summary>
        /// The input source code to be compiled. Used
        /// when the SourceStream is null.
        /// </summary>

        string Source { get; set; }

        /// <summary>
        /// The input stream for source code. Takes
        /// precedence over the Source string property
        /// if this is non-null.
        /// </summary>

        Stream SourceStream { get; set; }

        /// <summary>
        /// The generated C# syntax tree for this compilation
        /// </summary>

        SyntaxTree SyntaxTree { get; set; }

        /// <summary>
        /// Add a reference to the assembly containing
        /// the definition of the type with name typeName
        /// </summary>
        /// <param name="typeName">The name of the type
        /// we need to reference</param>

        void AddReference(string typeName);

        /// <summary>
        /// Add a reference to the assembly containing
        /// the definition of the type t
        /// </summary>
        /// <param name="t">The type we need to reference</param>

        void AddReference(Type t);

        /// <summary>
        /// Add references to each of a list of types by name
        /// </summary>
        /// <param name="typeNames">The names of each of the types
        /// we wish to reference</param>

        void AddReferences(IEnumerable<string> typeNames);

        /// <summary>
        /// Add a reference to the assembly with
        /// the specified file name or path
        /// </summary>
        /// <param name="assemblyName">The name of the DLL
        /// we need to reference</param>

        void AddAssemblyReference(string assemblyName);

        /// <summary>
        /// Add references to each of a list of assembly file names
        /// </summary>
        /// <param name="assemblyNames">The names of each of the assmebly DLLs
        /// we wish to reference</param>

        void AddAssemblyReferences(IEnumerable<string> assemblyNames);

        /// <summary>
        /// Compile the source code in the Source
        /// property into a loaded dynamic assembly
        /// </summary>
        /// <param name="dbgMode">Whether to compile as a
        /// debug assembly or a release assembly</param>

        void Compile(bool dbgMode = false);
    }
}