// AUTOGENERATED CODE FROM PARSELR PARSER-GENERATOR. DO NOT EDIT.
//
// Date generated: Wed, 05 Aug 2015 15:29:38 GMT
// This code represents the hidden derived class from the
// application-specific parser class, itself derived from
// Parsing.Parser. There should be no need to edit this file.

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.IO;
using Parsing;
using ParserGenerator;
using BooleanLib;

namespace Parsing.AutoGenerated
{
    /// <summary>
    /// Implements the auto-generated part of the user-specific
    /// parser class. This gives the action functions and guards
    /// in-class access to the contents of the user-specific parser.
    /// </summary>

    public class LRParser_AutoGenerated : LRParser
    {
        /// <summary>
        /// Initialiser for source-code parser
        /// generator that is subsequently compiled to
        /// obtain the new run-time code.
        /// </summary>

        public static ParserTable InitParserTable()
        {
            ParserTable table = new ParserTable();

            // Initialize the parser factory delegate

            table.InitializeParserConstructor(typeof(LRParser_AutoGenerated));

            table.Tokens = new TwoWayMap<string, int>();
            table.ErrorRecoveryEnabled = true;

            // Terminal token names and values

            table.Tokens.Add("EOF", 16385);
            table.Tokens.Add("SOF", 16386);
            table.Tokens.Add("ERR", 16387);
            table.Tokens.Add("UNKNOWN", 16388);
            table.Tokens.Add("LBRACE", 16389);
            table.Tokens.Add("RBRACE", 16390);
            table.Tokens.Add("LPAREN", 16391);
            table.Tokens.Add("RPAREN", 16392);
            table.Tokens.Add("COMMA", 16393);
            table.Tokens.Add("COLON", 16394);
            table.Tokens.Add("OR", 16395);
            table.Tokens.Add("SEMI", 16396);
            table.Tokens.Add("LBRACK", 16397);
            table.Tokens.Add("RBRACK", 16398);
            table.Tokens.Add("AND", 16399);
            table.Tokens.Add("NOT", 16400);
            table.Tokens.Add("TOKENS", 16401);
            table.Tokens.Add("CONDITIONS", 16402);
            table.Tokens.Add("GRAMMAR", 16403);
            table.Tokens.Add("IDENTIFIER", 16404);
            table.Tokens.Add("CODE", 16405);
            table.Tokens.Add("OPTIONS", 16406);
            table.Tokens.Add("USING", 16407);
            table.Tokens.Add("NAMESPACE", 16408);
            table.Tokens.Add("PARSERCLASS", 16409);
            table.Tokens.Add("EQUALS", 16410);
            table.Tokens.Add("INTEGER", 16411);
            table.Tokens.Add("FSM", 16412);
            table.Tokens.Add("ONENTRY", 16413);
            table.Tokens.Add("ONEXIT", 16414);
            table.Tokens.Add("FSMCLASS", 16415);
            table.Tokens.Add("MERGE", 16416);
            table.Tokens.Add("MULTIPLICITY", 16417);
            table.Tokens.Add("ASSEMBLYREF", 16418);
            table.Tokens.Add("TOKENTYPE", 16419);
            table.Tokens.Add("LT", 16420);

            // Non-terminal token names and values

            table.Tokens.Add("_Start", 32768);
            table.Tokens.Add("CompleteGrammar", 32769);
            table.Tokens.Add("ParserOptions", 32770);
            table.Tokens.Add("zeroOrOne_ParserOptions", 32771);
            table.Tokens.Add("Events", 32772);
            table.Tokens.Add("Guards", 32773);
            table.Tokens.Add("Rules", 32774);
            table.Tokens.Add("OptionList", 32775);
            table.Tokens.Add("ParserOption", 32776);
            table.Tokens.Add("IdentWithOptAssignList", 32777);
            table.Tokens.Add("IdentWithOptAssign", 32778);
            table.Tokens.Add("zeroOrOne_TOKENTYPE", 32779);
            table.Tokens.Add("AssignedValue", 32780);
            table.Tokens.Add("zeroOrOne_AssignedValue", 32781);
            table.Tokens.Add("GuardList", 32782);
            table.Tokens.Add("IdentifierList", 32783);
            table.Tokens.Add("GuardInstance", 32784);
            table.Tokens.Add("zeroOrOne_CODE", 32785);
            table.Tokens.Add("Rule", 32786);
            table.Tokens.Add("oneToMany_Rule", 32787);
            table.Tokens.Add("State", 32788);
            table.Tokens.Add("oneToMany_State", 32789);
            table.Tokens.Add("RuleNameAndType", 32790);
            table.Tokens.Add("ProductionList", 32791);
            table.Tokens.Add("Merge", 32792);
            table.Tokens.Add("zeroOrOne_Merge", 32793);
            table.Tokens.Add("Production", 32794);
            table.Tokens.Add("Element", 32795);
            table.Tokens.Add("zeroToMany_Element", 32796);
            table.Tokens.Add("Guard", 32797);
            table.Tokens.Add("zeroOrOne_Guard", 32798);
            table.Tokens.Add("Multiplier", 32799);
            table.Tokens.Add("zeroOrOne_Multiplier", 32800);
            table.Tokens.Add("CondExpr", 32801);
            table.Tokens.Add("OrableExpr", 32802);
            table.Tokens.Add("AndableExpr", 32803);
            table.Tokens.Add("RootExpr", 32804);
            table.Tokens.Add("OnEntry", 32805);
            table.Tokens.Add("zeroOrOne_OnEntry", 32806);
            table.Tokens.Add("OnExit", 32807);
            table.Tokens.Add("zeroOrOne_OnExit", 32808);
            table.Tokens.Add("TransitionList", 32809);
            table.Tokens.Add("TransitionAction", 32810);
            table.Tokens.Add("Transition", 32811);
            table.Tokens.Add("zeroOrOne_TransitionAction", 32812);

            table.Guards = InitGuards();

            table.Productions = new ParserProduction[]
            {
                new ParserProduction
                (
                    0, 0, "_Start: SOF CompleteGrammar",
                    2, 32768 	// _Start
                ),

                new ParserProduction
                (
                    1, 0, "zeroOrOne_ParserOptions: ParserOptions",
                    1, 32771,	// zeroOrOne_ParserOptions
                    new ParserInlineAction("EarliestNonterminalInList")
                ),

                new ParserProduction
                (
                    2, 1, "zeroOrOne_ParserOptions:",
                    0, 32771,	// zeroOrOne_ParserOptions
                    new ParserInlineAction("EmptyList")
                ),

                new ParserProduction
                (
                    3, 0, "CompleteGrammar: zeroOrOne_ParserOptions Events Guards Rules",
                    4, 32769 	// CompleteGrammar
                ),

                new ParserProduction
                (
                    4, 0, "ParserOptions: OPTIONS LBRACE OptionList RBRACE",
                    4, 32770 	// ParserOptions
                ),

                new ParserProduction
                (
                    5, 0, "OptionList: OptionList COMMA ParserOption",
                    3, 32775 	// OptionList
                ),

                new ParserProduction
                (
                    6, 1, "OptionList: ParserOption",
                    1, 32775 	// OptionList
                ),

                new ParserProduction
                (
                    7, 2, "OptionList: ERR",
                    1, 32775,	// OptionList
                    new ParserInlineAction("Action_OptionList_2")
                ),

                new ParserProduction
                (
                    8, 0, "ParserOption: USING IDENTIFIER",
                    2, 32776,	// ParserOption
                    new ParserInlineAction("Action_ParserOption_0")
                ),

                new ParserProduction
                (
                    9, 1, "ParserOption: NAMESPACE IDENTIFIER",
                    2, 32776,	// ParserOption
                    new ParserInlineAction("Action_ParserOption_1")
                ),

                new ParserProduction
                (
                    10, 2, "ParserOption: PARSERCLASS IDENTIFIER",
                    2, 32776,	// ParserOption
                    new ParserInlineAction("Action_ParserOption_2")
                ),

                new ParserProduction
                (
                    11, 3, "ParserOption: FSMCLASS IDENTIFIER",
                    2, 32776,	// ParserOption
                    new ParserInlineAction("Action_ParserOption_3")
                ),

                new ParserProduction
                (
                    12, 4, "ParserOption: ASSEMBLYREF IDENTIFIER",
                    2, 32776,	// ParserOption
                    new ParserInlineAction("Action_ParserOption_4")
                ),

                new ParserProduction
                (
                    13, 0, "Events: TOKENS LBRACE IdentWithOptAssignList RBRACE",
                    4, 32772,	// Events
                    new ParserInlineAction("Action_Events_0")
                ),

                new ParserProduction
                (
                    14, 1, "Events: TOKENS ERR RBRACE",
                    3, 32772,	// Events
                    new ParserInlineAction("Action_Events_1")
                ),

                new ParserProduction
                (
                    15, 0, "IdentWithOptAssignList: IdentWithOptAssignList COMMA IdentWithOptAssign",
                    3, 32777,	// IdentWithOptAssignList
                    new ParserInlineAction("Action_IdentWithOptAssignList_0")
                ),

                new ParserProduction
                (
                    16, 1, "IdentWithOptAssignList: IdentWithOptAssign",
                    1, 32777,	// IdentWithOptAssignList
                    new ParserInlineAction("Action_IdentWithOptAssignList_1")
                ),

                new ParserProduction
                (
                    17, 0, "zeroOrOne_TOKENTYPE: TOKENTYPE",
                    1, 32779,	// zeroOrOne_TOKENTYPE
                    new ParserInlineAction("EarliestNonterminalInList")
                ),

                new ParserProduction
                (
                    18, 1, "zeroOrOne_TOKENTYPE:",
                    0, 32779,	// zeroOrOne_TOKENTYPE
                    new ParserInlineAction("EmptyList")
                ),

                new ParserProduction
                (
                    19, 0, "zeroOrOne_AssignedValue: AssignedValue",
                    1, 32781,	// zeroOrOne_AssignedValue
                    new ParserInlineAction("EarliestNonterminalInList")
                ),

                new ParserProduction
                (
                    20, 1, "zeroOrOne_AssignedValue:",
                    0, 32781,	// zeroOrOne_AssignedValue
                    new ParserInlineAction("EmptyList")
                ),

                new ParserProduction
                (
                    21, 0, "IdentWithOptAssign: IDENTIFIER zeroOrOne_TOKENTYPE zeroOrOne_AssignedValue",
                    3, 32778,	// IdentWithOptAssign
                    new ParserInlineAction("Action_IdentWithOptAssign_0")
                ),

                new ParserProduction
                (
                    22, 0, "AssignedValue: EQUALS INTEGER",
                    2, 32780,	// AssignedValue
                    new ParserInlineAction("Action_AssignedValue_0")
                ),

                new ParserProduction
                (
                    23, 0, "Guards: CONDITIONS LBRACE GuardList RBRACE",
                    4, 32773,	// Guards
                    new ParserInlineAction("Action_Guards_0")
                ),

                new ParserProduction
                (
                    24, 1, "Guards: CONDITIONS ERR RBRACE",
                    3, 32773,	// Guards
                    new ParserInlineAction("Action_Guards_1")
                ),

                new ParserProduction
                (
                    25, 2, "Guards:",
                    0, 32773 	// Guards
                ),

                new ParserProduction
                (
                    26, 0, "IdentifierList: IdentifierList COMMA IDENTIFIER",
                    3, 32783,	// IdentifierList
                    new ParserInlineAction("Action_IdentifierList_0")
                ),

                new ParserProduction
                (
                    27, 1, "IdentifierList: IDENTIFIER",
                    1, 32783,	// IdentifierList
                    new ParserInlineAction("Action_IdentifierList_1")
                ),

                new ParserProduction
                (
                    28, 0, "GuardList: GuardList COMMA GuardInstance",
                    3, 32782,	// GuardList
                    new ParserInlineAction("Action_GuardList_0")
                ),

                new ParserProduction
                (
                    29, 1, "GuardList: GuardInstance",
                    1, 32782,	// GuardList
                    new ParserInlineAction("Action_GuardList_1")
                ),

                new ParserProduction
                (
                    30, 0, "zeroOrOne_CODE: CODE",
                    1, 32785,	// zeroOrOne_CODE
                    new ParserInlineAction("EarliestNonterminalInList")
                ),

                new ParserProduction
                (
                    31, 1, "zeroOrOne_CODE:",
                    0, 32785,	// zeroOrOne_CODE
                    new ParserInlineAction("EmptyList")
                ),

                new ParserProduction
                (
                    32, 0, "GuardInstance: IDENTIFIER zeroOrOne_TOKENTYPE zeroOrOne_CODE",
                    3, 32784,	// GuardInstance
                    new ParserInlineAction("Action_GuardInstance_0")
                ),

                new ParserProduction
                (
                    33, 0, "oneToMany_Rule: oneToMany_Rule Rule",
                    2, 32787,	// oneToMany_Rule
                    new ParserInlineAction("LatestNonterminalInList")
                ),

                new ParserProduction
                (
                    34, 1, "oneToMany_Rule: Rule",
                    1, 32787,	// oneToMany_Rule
                    new ParserInlineAction("EarliestNonterminalInList")
                ),

                new ParserProduction
                (
                    35, 0, "Rules: GRAMMAR LPAREN IDENTIFIER RPAREN LBRACE oneToMany_Rule RBRACE",
                    7, 32774,	// Rules
                    new ParserInlineAction("Action_Rules_0")
                ),

                new ParserProduction
                (
                    36, 0, "oneToMany_State: oneToMany_State State",
                    2, 32789,	// oneToMany_State
                    new ParserInlineAction("LatestNonterminalInList")
                ),

                new ParserProduction
                (
                    37, 1, "oneToMany_State: State",
                    1, 32789,	// oneToMany_State
                    new ParserInlineAction("EarliestNonterminalInList")
                ),

                new ParserProduction
                (
                    38, 1, "Rules: FSM LPAREN IDENTIFIER RPAREN LBRACE oneToMany_State RBRACE",
                    7, 32774,	// Rules
                    new ParserInlineAction("Action_Rules_1")
                ),

                new ParserProduction
                (
                    39, 0, "RuleNameAndType: IDENTIFIER zeroOrOne_TOKENTYPE COLON",
                    3, 32790,	// RuleNameAndType
                    new ParserInlineAction("Action_RuleNameAndType_0")
                ),

                new ParserProduction
                (
                    40, 0, "zeroOrOne_Merge: Merge",
                    1, 32793,	// zeroOrOne_Merge
                    new ParserInlineAction("EarliestNonterminalInList")
                ),

                new ParserProduction
                (
                    41, 1, "zeroOrOne_Merge:",
                    0, 32793,	// zeroOrOne_Merge
                    new ParserInlineAction("EmptyList")
                ),

                new ParserProduction
                (
                    42, 0, "Rule: RuleNameAndType ProductionList zeroOrOne_Merge SEMI",
                    4, 32786,	// Rule
                    new ParserInlineAction("Action_Rule_0")
                ),

                new ParserProduction
                (
                    43, 1, "Rule: ERR SEMI",
                    2, 32786 	// Rule
                ),

                new ParserProduction
                (
                    44, 0, "ProductionList: ProductionList OR Production",
                    3, 32791 	// ProductionList
                ),

                new ParserProduction
                (
                    45, 1, "ProductionList: Production",
                    1, 32791 	// ProductionList
                ),

                new ParserProduction
                (
                    46, 0, "zeroToMany_Element: zeroToMany_Element Element",
                    2, 32796,	// zeroToMany_Element
                    new ParserInlineAction("LatestNonterminalInList")
                ),

                new ParserProduction
                (
                    47, 1, "zeroToMany_Element:",
                    0, 32796,	// zeroToMany_Element
                    new ParserInlineAction("EmptyList")
                ),

                new ParserProduction
                (
                    48, 0, "Production: zeroToMany_Element zeroOrOne_CODE",
                    2, 32794,	// Production
                    new ParserInlineAction("Action_Production_0")
                ),

                new ParserProduction
                (
                    49, 0, "zeroOrOne_Guard: Guard",
                    1, 32798,	// zeroOrOne_Guard
                    new ParserInlineAction("EarliestNonterminalInList")
                ),

                new ParserProduction
                (
                    50, 1, "zeroOrOne_Guard:",
                    0, 32798,	// zeroOrOne_Guard
                    new ParserInlineAction("EmptyList")
                ),

                new ParserProduction
                (
                    51, 0, "zeroOrOne_Multiplier: Multiplier",
                    1, 32800,	// zeroOrOne_Multiplier
                    new ParserInlineAction("EarliestNonterminalInList")
                ),

                new ParserProduction
                (
                    52, 1, "zeroOrOne_Multiplier:",
                    0, 32800,	// zeroOrOne_Multiplier
                    new ParserInlineAction("EmptyList")
                ),

                new ParserProduction
                (
                    53, 0, "Element: IDENTIFIER zeroOrOne_Guard zeroOrOne_Multiplier",
                    3, 32795,	// Element
                    new ParserInlineAction("Action_Element_0")
                ),

                new ParserProduction
                (
                    54, 0, "Guard: LBRACK CondExpr RBRACK",
                    3, 32797,	// Guard
                    new ParserInlineAction("Action_Guard_0")
                ),

                new ParserProduction
                (
                    55, 0, "Multiplier: MULTIPLICITY zeroOrOne_Guard",
                    2, 32799,	// Multiplier
                    new ParserInlineAction("Action_Multiplier_0")
                ),

                new ParserProduction
                (
                    56, 0, "CondExpr: CondExpr OR OrableExpr",
                    3, 32801,	// CondExpr
                    new ParserInlineAction("Action_CondExpr_0")
                ),

                new ParserProduction
                (
                    57, 1, "CondExpr: OrableExpr",
                    1, 32801,	// CondExpr
                    new ParserInlineAction("Action_CondExpr_1")
                ),

                new ParserProduction
                (
                    58, 0, "OrableExpr: OrableExpr AND AndableExpr",
                    3, 32802,	// OrableExpr
                    new ParserInlineAction("Action_OrableExpr_0")
                ),

                new ParserProduction
                (
                    59, 1, "OrableExpr: AndableExpr",
                    1, 32802,	// OrableExpr
                    new ParserInlineAction("Action_OrableExpr_1")
                ),

                new ParserProduction
                (
                    60, 0, "AndableExpr: RootExpr",
                    1, 32803,	// AndableExpr
                    new ParserInlineAction("Action_AndableExpr_0")
                ),

                new ParserProduction
                (
                    61, 1, "AndableExpr: NOT RootExpr",
                    2, 32803,	// AndableExpr
                    new ParserInlineAction("Action_AndableExpr_1")
                ),

                new ParserProduction
                (
                    62, 0, "RootExpr: IDENTIFIER",
                    1, 32804,	// RootExpr
                    new ParserInlineAction("Action_RootExpr_0")
                ),

                new ParserProduction
                (
                    63, 1, "RootExpr: LPAREN CondExpr RPAREN",
                    3, 32804,	// RootExpr
                    new ParserInlineAction("Action_RootExpr_1")
                ),

                new ParserProduction
                (
                    64, 0, "zeroOrOne_OnEntry: OnEntry",
                    1, 32806,	// zeroOrOne_OnEntry
                    new ParserInlineAction("EarliestNonterminalInList")
                ),

                new ParserProduction
                (
                    65, 1, "zeroOrOne_OnEntry:",
                    0, 32806,	// zeroOrOne_OnEntry
                    new ParserInlineAction("EmptyList")
                ),

                new ParserProduction
                (
                    66, 0, "zeroOrOne_OnExit: OnExit",
                    1, 32808,	// zeroOrOne_OnExit
                    new ParserInlineAction("EarliestNonterminalInList")
                ),

                new ParserProduction
                (
                    67, 1, "zeroOrOne_OnExit:",
                    0, 32808,	// zeroOrOne_OnExit
                    new ParserInlineAction("EmptyList")
                ),

                new ParserProduction
                (
                    68, 0, "State: IDENTIFIER COLON zeroOrOne_OnEntry zeroOrOne_OnExit TransitionList SEMI",
                    6, 32788,	// State
                    new ParserInlineAction("Action_State_0")
                ),

                new ParserProduction
                (
                    69, 1, "State: ERR SEMI",
                    2, 32788 	// State
                ),

                new ParserProduction
                (
                    70, 0, "OnEntry: ONENTRY TransitionAction",
                    2, 32805,	// OnEntry
                    new ParserInlineAction("Action_OnEntry_0")
                ),

                new ParserProduction
                (
                    71, 0, "OnExit: ONEXIT TransitionAction",
                    2, 32807,	// OnExit
                    new ParserInlineAction("Action_OnExit_0")
                ),

                new ParserProduction
                (
                    72, 0, "TransitionList: TransitionList OR Transition",
                    3, 32809,	// TransitionList
                    new ParserInlineAction("Action_TransitionList_0")
                ),

                new ParserProduction
                (
                    73, 1, "TransitionList: Transition",
                    1, 32809,	// TransitionList
                    new ParserInlineAction("Action_TransitionList_1")
                ),

                new ParserProduction
                (
                    74, 0, "zeroOrOne_TransitionAction: TransitionAction",
                    1, 32812,	// zeroOrOne_TransitionAction
                    new ParserInlineAction("EarliestNonterminalInList")
                ),

                new ParserProduction
                (
                    75, 1, "zeroOrOne_TransitionAction:",
                    0, 32812,	// zeroOrOne_TransitionAction
                    new ParserInlineAction("EmptyList")
                ),

                new ParserProduction
                (
                    76, 0, "Transition: Element IDENTIFIER zeroOrOne_TransitionAction",
                    3, 32811,	// Transition
                    new ParserInlineAction("Action_Transition_0")
                ),

                new ParserProduction
                (
                    77, 1, "Transition: Element zeroOrOne_TransitionAction",
                    2, 32811,	// Transition
                    new ParserInlineAction("Action_Transition_1")
                ),

                new ParserProduction
                (
                    78, 0, "TransitionAction: CODE",
                    1, 32810,	// TransitionAction
                    new ParserInlineAction("Action_TransitionAction_0")
                ),

                new ParserProduction
                (
                    79, 0, "Merge: MERGE CODE",
                    2, 32792,	// Merge
                    new ParserInlineAction("Action_Merge_0")
                ),

            };

            table.States = new ParserState[]
            {
                new ParserState
                {
                    StateString =
                        "State S0 CORE ITEMS:\r\n" +
                        "R0: _Start: ^ SOF CompleteGrammar\r\n" +
                        "SHIFTS, REDUCTIONS AND GOTOS\r\n" +
                        "  SOF: SHIFT to state S1\r\n",

                    TerminalColumns = new ParserStateColumn[]
                    {
                        new ParserStateColumn
                        (
                            16386,	// On SOF
                            null,
                            false,	// shift to
                            1		// state 1
                        ),
                    },

                    NonterminalColumns = new ParserStateColumn[0],
                },

                new ParserState
                {
                    StateString =
                        "State S1 CORE ITEMS:\r\n" +
                        "R0: _Start: SOF ^ CompleteGrammar\r\n" +
                        "CLOSURE ITEMS:\r\n" +
                        "R3: CompleteGrammar: ^ zeroOrOne_ParserOptions Events Guards Rules\r\n" +
                        "R1: zeroOrOne_ParserOptions: ^ ParserOptions\r\n" +
                        "R2: zeroOrOne_ParserOptions: ^\r\n" +
                        "{\r\n" +
                        "    TOKENS\r\n" +
                        "}\r\n" +
                        "R4: ParserOptions: ^ OPTIONS LBRACE OptionList RBRACE\r\n" +
                        "SHIFTS, REDUCTIONS AND GOTOS\r\n" +
                        "  OPTIONS: SHIFT to state S5\r\n" +
                        "  TOKENS: REDUCE by rule R2: zeroOrOne_ParserOptions:;\r\n" +
                        "  CompleteGrammar: GOTO state S2\r\n" +
                        "  zeroOrOne_ParserOptions: GOTO state S3\r\n" +
                        "  ParserOptions: GOTO state S4\r\n",

                    TerminalColumns = new ParserStateColumn[]
                    {
                        new ParserStateColumn
                        (
                            16406,	// On OPTIONS
                            null,
                            false,	// shift to
                            5		// state 5
                        ),
                        new ParserStateColumn
                        (
                            16401,	// On TOKENS
                            null,
                            true,	// reduce by
                            2		// production 2
                        ),
                    },

                    // GOTO non-terminals used to select next state
                    // after a REDUCE operation has taken place

                    NonterminalColumns = new ParserStateColumn[]
                    {
                        new ParserStateColumn
                        (
                            32769,	// On CompleteGrammar
                            null,
                            false,	// goto
                            2		// state 2
                        ),
                        new ParserStateColumn
                        (
                            32771,	// On zeroOrOne_ParserOptions
                            null,
                            false,	// goto
                            3		// state 3
                        ),
                        new ParserStateColumn
                        (
                            32770,	// On ParserOptions
                            null,
                            false,	// goto
                            4		// state 4
                        ),
                    },
                },

                new ParserState
                {
                    StateString =
                        "State S2 CORE ITEMS:\r\n" +
                        "R0: _Start: SOF CompleteGrammar ^\r\n" +
                        "{\r\n" +
                        "    EOF\r\n" +
                        "}\r\n" +
                        "SHIFTS, REDUCTIONS AND GOTOS\r\n" +
                        "  EOF: REDUCE by rule R0: _Start: SOF CompleteGrammar;\r\n",

                    TerminalColumns = new ParserStateColumn[]
                    {
                        new ParserStateColumn
                        (
                            16385,	// On EOF
                            null,
                            true,	// reduce by
                            0		// production 0
                        ),
                    },

                    NonterminalColumns = new ParserStateColumn[0],
                },

                new ParserState
                {
                    StateString =
                        "State S3 CORE ITEMS:\r\n" +
                        "R3: CompleteGrammar: zeroOrOne_ParserOptions ^ Events Guards Rules\r\n" +
                        "CLOSURE ITEMS:\r\n" +
                        "R13: Events: ^ TOKENS LBRACE IdentWithOptAssignList RBRACE\r\n" +
                        "R14: Events: ^ TOKENS ERR RBRACE\r\n" +
                        "SHIFTS, REDUCTIONS AND GOTOS\r\n" +
                        "  TOKENS: SHIFT to state S7\r\n" +
                        "  Events: GOTO state S6\r\n",

                    TerminalColumns = new ParserStateColumn[]
                    {
                        new ParserStateColumn
                        (
                            16401,	// On TOKENS
                            null,
                            false,	// shift to
                            7		// state 7
                        ),
                    },

                    // GOTO non-terminals used to select next state
                    // after a REDUCE operation has taken place

                    NonterminalColumns = new ParserStateColumn[]
                    {
                        new ParserStateColumn
                        (
                            32772,	// On Events
                            null,
                            false,	// goto
                            6		// state 6
                        ),
                    },
                },

                new ParserState
                {
                    StateString =
                        "State S4 CORE ITEMS:\r\n" +
                        "R1: zeroOrOne_ParserOptions: ParserOptions ^\r\n" +
                        "{\r\n" +
                        "    TOKENS\r\n" +
                        "}\r\n" +
                        "SHIFTS, REDUCTIONS AND GOTOS\r\n" +
                        "  TOKENS: REDUCE by rule R1: zeroOrOne_ParserOptions: ParserOptions;\r\n",

                    TerminalColumns = new ParserStateColumn[]
                    {
                        new ParserStateColumn
                        (
                            16401,	// On TOKENS
                            null,
                            true,	// reduce by
                            1		// production 1
                        ),
                    },

                    NonterminalColumns = new ParserStateColumn[0],
                },

                new ParserState
                {
                    StateString =
                        "State S5 CORE ITEMS:\r\n" +
                        "R4: ParserOptions: OPTIONS ^ LBRACE OptionList RBRACE\r\n" +
                        "SHIFTS, REDUCTIONS AND GOTOS\r\n" +
                        "  LBRACE: SHIFT to state S8\r\n",

                    TerminalColumns = new ParserStateColumn[]
                    {
                        new ParserStateColumn
                        (
                            16389,	// On LBRACE
                            null,
                            false,	// shift to
                            8		// state 8
                        ),
                    },

                    NonterminalColumns = new ParserStateColumn[0],
                },

                new ParserState
                {
                    StateString =
                        "State S6 CORE ITEMS:\r\n" +
                        "R3: CompleteGrammar: zeroOrOne_ParserOptions Events ^ Guards Rules\r\n" +
                        "CLOSURE ITEMS:\r\n" +
                        "R23: Guards: ^ CONDITIONS LBRACE GuardList RBRACE\r\n" +
                        "R24: Guards: ^ CONDITIONS ERR RBRACE\r\n" +
                        "R25: Guards: ^\r\n" +
                        "{\r\n" +
                        "    GRAMMAR,\r\n" +
                        "    FSM\r\n" +
                        "}\r\n" +
                        "SHIFTS, REDUCTIONS AND GOTOS\r\n" +
                        "  CONDITIONS: SHIFT to state S10\r\n" +
                        "  GRAMMAR: REDUCE by rule R25: Guards:;\r\n" +
                        "  FSM: REDUCE by rule R25: Guards:;\r\n" +
                        "  Guards: GOTO state S9\r\n",

                    TerminalColumns = new ParserStateColumn[]
                    {
                        new ParserStateColumn
                        (
                            16402,	// On CONDITIONS
                            null,
                            false,	// shift to
                            10		// state 10
                        ),
                        new ParserStateColumn
                        (
                            16403,	// On GRAMMAR
                            null,
                            true,	// reduce by
                            25		// production 25
                        ),
                        new ParserStateColumn
                        (
                            16412,	// On FSM
                            null,
                            true,	// reduce by
                            25		// production 25
                        ),
                    },

                    // GOTO non-terminals used to select next state
                    // after a REDUCE operation has taken place

                    NonterminalColumns = new ParserStateColumn[]
                    {
                        new ParserStateColumn
                        (
                            32773,	// On Guards
                            null,
                            false,	// goto
                            9		// state 9
                        ),
                    },
                },

                new ParserState
                {
                    StateString =
                        "State S7 CORE ITEMS:\r\n" +
                        "R13: Events: TOKENS ^ LBRACE IdentWithOptAssignList RBRACE\r\n" +
                        "R14: Events: TOKENS ^ ERR RBRACE\r\n" +
                        "SHIFTS, REDUCTIONS AND GOTOS\r\n" +
                        "  LBRACE: SHIFT to state S11\r\n" +
                        "  ERR: SHIFT to state S12\r\n",

                    TerminalColumns = new ParserStateColumn[]
                    {
                        new ParserStateColumn
                        (
                            16389,	// On LBRACE
                            null,
                            false,	// shift to
                            11		// state 11
                        ),
                        new ParserStateColumn
                        (
                            16387,	// On ERR
                            null,
                            false,	// shift to
                            12		// state 12
                        ),
                    },

                    NonterminalColumns = new ParserStateColumn[0],
                },

                new ParserState
                {
                    StateString =
                        "State S8 CORE ITEMS:\r\n" +
                        "R4: ParserOptions: OPTIONS LBRACE ^ OptionList RBRACE\r\n" +
                        "CLOSURE ITEMS:\r\n" +
                        "R5: OptionList: ^ OptionList COMMA ParserOption\r\n" +
                        "R6: OptionList: ^ ParserOption\r\n" +
                        "R7: OptionList: ^ ERR\r\n" +
                        "R8: ParserOption: ^ USING IDENTIFIER\r\n" +
                        "R9: ParserOption: ^ NAMESPACE IDENTIFIER\r\n" +
                        "R10: ParserOption: ^ PARSERCLASS IDENTIFIER\r\n" +
                        "R11: ParserOption: ^ FSMCLASS IDENTIFIER\r\n" +
                        "R12: ParserOption: ^ ASSEMBLYREF IDENTIFIER\r\n" +
                        "SHIFTS, REDUCTIONS AND GOTOS\r\n" +
                        "  ERR: SHIFT to state S15\r\n" +
                        "  USING: SHIFT to state S16\r\n" +
                        "  NAMESPACE: SHIFT to state S17\r\n" +
                        "  PARSERCLASS: SHIFT to state S18\r\n" +
                        "  FSMCLASS: SHIFT to state S19\r\n" +
                        "  ASSEMBLYREF: SHIFT to state S20\r\n" +
                        "  OptionList: GOTO state S13\r\n" +
                        "  ParserOption: GOTO state S14\r\n",

                    TerminalColumns = new ParserStateColumn[]
                    {
                        new ParserStateColumn
                        (
                            16387,	// On ERR
                            null,
                            false,	// shift to
                            15		// state 15
                        ),
                        new ParserStateColumn
                        (
                            16407,	// On USING
                            null,
                            false,	// shift to
                            16		// state 16
                        ),
                        new ParserStateColumn
                        (
                            16408,	// On NAMESPACE
                            null,
                            false,	// shift to
                            17		// state 17
                        ),
                        new ParserStateColumn
                        (
                            16409,	// On PARSERCLASS
                            null,
                            false,	// shift to
                            18		// state 18
                        ),
                        new ParserStateColumn
                        (
                            16415,	// On FSMCLASS
                            null,
                            false,	// shift to
                            19		// state 19
                        ),
                        new ParserStateColumn
                        (
                            16418,	// On ASSEMBLYREF
                            null,
                            false,	// shift to
                            20		// state 20
                        ),
                    },

                    // GOTO non-terminals used to select next state
                    // after a REDUCE operation has taken place

                    NonterminalColumns = new ParserStateColumn[]
                    {
                        new ParserStateColumn
                        (
                            32775,	// On OptionList
                            null,
                            false,	// goto
                            13		// state 13
                        ),
                        new ParserStateColumn
                        (
                            32776,	// On ParserOption
                            null,
                            false,	// goto
                            14		// state 14
                        ),
                    },
                },

                new ParserState
                {
                    StateString =
                        "State S9 CORE ITEMS:\r\n" +
                        "R3: CompleteGrammar: zeroOrOne_ParserOptions Events Guards ^ Rules\r\n" +
                        "CLOSURE ITEMS:\r\n" +
                        "R35: Rules: ^ GRAMMAR LPAREN IDENTIFIER RPAREN LBRACE oneToMany_Rule RBRACE\r\n" +
                        "R38: Rules: ^ FSM LPAREN IDENTIFIER RPAREN LBRACE oneToMany_State RBRACE\r\n" +
                        "SHIFTS, REDUCTIONS AND GOTOS\r\n" +
                        "  GRAMMAR: SHIFT to state S22\r\n" +
                        "  FSM: SHIFT to state S23\r\n" +
                        "  Rules: GOTO state S21\r\n",

                    TerminalColumns = new ParserStateColumn[]
                    {
                        new ParserStateColumn
                        (
                            16403,	// On GRAMMAR
                            null,
                            false,	// shift to
                            22		// state 22
                        ),
                        new ParserStateColumn
                        (
                            16412,	// On FSM
                            null,
                            false,	// shift to
                            23		// state 23
                        ),
                    },

                    // GOTO non-terminals used to select next state
                    // after a REDUCE operation has taken place

                    NonterminalColumns = new ParserStateColumn[]
                    {
                        new ParserStateColumn
                        (
                            32774,	// On Rules
                            null,
                            false,	// goto
                            21		// state 21
                        ),
                    },
                },

                new ParserState
                {
                    StateString =
                        "State S10 CORE ITEMS:\r\n" +
                        "R23: Guards: CONDITIONS ^ LBRACE GuardList RBRACE\r\n" +
                        "R24: Guards: CONDITIONS ^ ERR RBRACE\r\n" +
                        "SHIFTS, REDUCTIONS AND GOTOS\r\n" +
                        "  LBRACE: SHIFT to state S24\r\n" +
                        "  ERR: SHIFT to state S25\r\n",

                    TerminalColumns = new ParserStateColumn[]
                    {
                        new ParserStateColumn
                        (
                            16389,	// On LBRACE
                            null,
                            false,	// shift to
                            24		// state 24
                        ),
                        new ParserStateColumn
                        (
                            16387,	// On ERR
                            null,
                            false,	// shift to
                            25		// state 25
                        ),
                    },

                    NonterminalColumns = new ParserStateColumn[0],
                },

                new ParserState
                {
                    StateString =
                        "State S11 CORE ITEMS:\r\n" +
                        "R13: Events: TOKENS LBRACE ^ IdentWithOptAssignList RBRACE\r\n" +
                        "CLOSURE ITEMS:\r\n" +
                        "R15: IdentWithOptAssignList: ^ IdentWithOptAssignList COMMA IdentWithOptAssign\r\n" +
                        "R16: IdentWithOptAssignList: ^ IdentWithOptAssign\r\n" +
                        "R21: IdentWithOptAssign: ^ IDENTIFIER zeroOrOne_TOKENTYPE zeroOrOne_AssignedValue\r\n" +
                        "SHIFTS, REDUCTIONS AND GOTOS\r\n" +
                        "  IDENTIFIER: SHIFT to state S28\r\n" +
                        "  IdentWithOptAssignList: GOTO state S26\r\n" +
                        "  IdentWithOptAssign: GOTO state S27\r\n",

                    TerminalColumns = new ParserStateColumn[]
                    {
                        new ParserStateColumn
                        (
                            16404,	// On IDENTIFIER
                            null,
                            false,	// shift to
                            28		// state 28
                        ),
                    },

                    // GOTO non-terminals used to select next state
                    // after a REDUCE operation has taken place

                    NonterminalColumns = new ParserStateColumn[]
                    {
                        new ParserStateColumn
                        (
                            32777,	// On IdentWithOptAssignList
                            null,
                            false,	// goto
                            26		// state 26
                        ),
                        new ParserStateColumn
                        (
                            32778,	// On IdentWithOptAssign
                            null,
                            false,	// goto
                            27		// state 27
                        ),
                    },
                },

                new ParserState
                {
                    StateString =
                        "State S12 CORE ITEMS:\r\n" +
                        "R14: Events: TOKENS ERR ^ RBRACE\r\n" +
                        "SHIFTS, REDUCTIONS AND GOTOS\r\n" +
                        "  RBRACE: SHIFT to state S29\r\n",

                    TerminalColumns = new ParserStateColumn[]
                    {
                        new ParserStateColumn
                        (
                            16390,	// On RBRACE
                            null,
                            false,	// shift to
                            29		// state 29
                        ),
                    },

                    NonterminalColumns = new ParserStateColumn[0],
                },

                new ParserState
                {
                    StateString =
                        "State S13 CORE ITEMS:\r\n" +
                        "R4: ParserOptions: OPTIONS LBRACE OptionList ^ RBRACE\r\n" +
                        "R5: OptionList: OptionList ^ COMMA ParserOption\r\n" +
                        "SHIFTS, REDUCTIONS AND GOTOS\r\n" +
                        "  RBRACE: SHIFT to state S30\r\n" +
                        "  COMMA: SHIFT to state S31\r\n",

                    TerminalColumns = new ParserStateColumn[]
                    {
                        new ParserStateColumn
                        (
                            16390,	// On RBRACE
                            null,
                            false,	// shift to
                            30		// state 30
                        ),
                        new ParserStateColumn
                        (
                            16393,	// On COMMA
                            null,
                            false,	// shift to
                            31		// state 31
                        ),
                    },

                    NonterminalColumns = new ParserStateColumn[0],
                },

                new ParserState
                {
                    StateString =
                        "State S14 CORE ITEMS:\r\n" +
                        "R6: OptionList: ParserOption ^\r\n" +
                        "{\r\n" +
                        "    RBRACE,\r\n" +
                        "    COMMA\r\n" +
                        "}\r\n" +
                        "SHIFTS, REDUCTIONS AND GOTOS\r\n" +
                        "  RBRACE: REDUCE by rule R6: OptionList: ParserOption;\r\n" +
                        "  COMMA: REDUCE by rule R6: OptionList: ParserOption;\r\n",

                    TerminalColumns = new ParserStateColumn[]
                    {
                        new ParserStateColumn
                        (
                            16390,	// On RBRACE
                            null,
                            true,	// reduce by
                            6		// production 6
                        ),
                        new ParserStateColumn
                        (
                            16393,	// On COMMA
                            null,
                            true,	// reduce by
                            6		// production 6
                        ),
                    },

                    NonterminalColumns = new ParserStateColumn[0],
                },

                new ParserState
                {
                    StateString =
                        "State S15 CORE ITEMS:\r\n" +
                        "R7: OptionList: ERR ^\r\n" +
                        "{\r\n" +
                        "    RBRACE,\r\n" +
                        "    COMMA\r\n" +
                        "}\r\n" +
                        "SHIFTS, REDUCTIONS AND GOTOS\r\n" +
                        "  RBRACE: REDUCE by rule R7: OptionList: ERR;\r\n" +
                        "  COMMA: REDUCE by rule R7: OptionList: ERR;\r\n",

                    TerminalColumns = new ParserStateColumn[]
                    {
                        new ParserStateColumn
                        (
                            16390,	// On RBRACE
                            null,
                            true,	// reduce by
                            7		// production 7
                        ),
                        new ParserStateColumn
                        (
                            16393,	// On COMMA
                            null,
                            true,	// reduce by
                            7		// production 7
                        ),
                    },

                    NonterminalColumns = new ParserStateColumn[0],
                },

                new ParserState
                {
                    StateString =
                        "State S16 CORE ITEMS:\r\n" +
                        "R8: ParserOption: USING ^ IDENTIFIER\r\n" +
                        "SHIFTS, REDUCTIONS AND GOTOS\r\n" +
                        "  IDENTIFIER: SHIFT to state S32\r\n",

                    TerminalColumns = new ParserStateColumn[]
                    {
                        new ParserStateColumn
                        (
                            16404,	// On IDENTIFIER
                            null,
                            false,	// shift to
                            32		// state 32
                        ),
                    },

                    NonterminalColumns = new ParserStateColumn[0],
                },

                new ParserState
                {
                    StateString =
                        "State S17 CORE ITEMS:\r\n" +
                        "R9: ParserOption: NAMESPACE ^ IDENTIFIER\r\n" +
                        "SHIFTS, REDUCTIONS AND GOTOS\r\n" +
                        "  IDENTIFIER: SHIFT to state S33\r\n",

                    TerminalColumns = new ParserStateColumn[]
                    {
                        new ParserStateColumn
                        (
                            16404,	// On IDENTIFIER
                            null,
                            false,	// shift to
                            33		// state 33
                        ),
                    },

                    NonterminalColumns = new ParserStateColumn[0],
                },

                new ParserState
                {
                    StateString =
                        "State S18 CORE ITEMS:\r\n" +
                        "R10: ParserOption: PARSERCLASS ^ IDENTIFIER\r\n" +
                        "SHIFTS, REDUCTIONS AND GOTOS\r\n" +
                        "  IDENTIFIER: SHIFT to state S34\r\n",

                    TerminalColumns = new ParserStateColumn[]
                    {
                        new ParserStateColumn
                        (
                            16404,	// On IDENTIFIER
                            null,
                            false,	// shift to
                            34		// state 34
                        ),
                    },

                    NonterminalColumns = new ParserStateColumn[0],
                },

                new ParserState
                {
                    StateString =
                        "State S19 CORE ITEMS:\r\n" +
                        "R11: ParserOption: FSMCLASS ^ IDENTIFIER\r\n" +
                        "SHIFTS, REDUCTIONS AND GOTOS\r\n" +
                        "  IDENTIFIER: SHIFT to state S35\r\n",

                    TerminalColumns = new ParserStateColumn[]
                    {
                        new ParserStateColumn
                        (
                            16404,	// On IDENTIFIER
                            null,
                            false,	// shift to
                            35		// state 35
                        ),
                    },

                    NonterminalColumns = new ParserStateColumn[0],
                },

                new ParserState
                {
                    StateString =
                        "State S20 CORE ITEMS:\r\n" +
                        "R12: ParserOption: ASSEMBLYREF ^ IDENTIFIER\r\n" +
                        "SHIFTS, REDUCTIONS AND GOTOS\r\n" +
                        "  IDENTIFIER: SHIFT to state S36\r\n",

                    TerminalColumns = new ParserStateColumn[]
                    {
                        new ParserStateColumn
                        (
                            16404,	// On IDENTIFIER
                            null,
                            false,	// shift to
                            36		// state 36
                        ),
                    },

                    NonterminalColumns = new ParserStateColumn[0],
                },

                new ParserState
                {
                    StateString =
                        "State S21 CORE ITEMS:\r\n" +
                        "R3: CompleteGrammar: zeroOrOne_ParserOptions Events Guards Rules ^\r\n" +
                        "{\r\n" +
                        "    EOF\r\n" +
                        "}\r\n" +
                        "SHIFTS, REDUCTIONS AND GOTOS\r\n" +
                        "  EOF: REDUCE by rule R3: CompleteGrammar: zeroOrOne_ParserOptions Events Guards Rules;\r\n",

                    TerminalColumns = new ParserStateColumn[]
                    {
                        new ParserStateColumn
                        (
                            16385,	// On EOF
                            null,
                            true,	// reduce by
                            3		// production 3
                        ),
                    },

                    NonterminalColumns = new ParserStateColumn[0],
                },

                new ParserState
                {
                    StateString =
                        "State S22 CORE ITEMS:\r\n" +
                        "R35: Rules: GRAMMAR ^ LPAREN IDENTIFIER RPAREN LBRACE oneToMany_Rule RBRACE\r\n" +
                        "SHIFTS, REDUCTIONS AND GOTOS\r\n" +
                        "  LPAREN: SHIFT to state S37\r\n",

                    TerminalColumns = new ParserStateColumn[]
                    {
                        new ParserStateColumn
                        (
                            16391,	// On LPAREN
                            null,
                            false,	// shift to
                            37		// state 37
                        ),
                    },

                    NonterminalColumns = new ParserStateColumn[0],
                },

                new ParserState
                {
                    StateString =
                        "State S23 CORE ITEMS:\r\n" +
                        "R38: Rules: FSM ^ LPAREN IDENTIFIER RPAREN LBRACE oneToMany_State RBRACE\r\n" +
                        "SHIFTS, REDUCTIONS AND GOTOS\r\n" +
                        "  LPAREN: SHIFT to state S38\r\n",

                    TerminalColumns = new ParserStateColumn[]
                    {
                        new ParserStateColumn
                        (
                            16391,	// On LPAREN
                            null,
                            false,	// shift to
                            38		// state 38
                        ),
                    },

                    NonterminalColumns = new ParserStateColumn[0],
                },

                new ParserState
                {
                    StateString =
                        "State S24 CORE ITEMS:\r\n" +
                        "R23: Guards: CONDITIONS LBRACE ^ GuardList RBRACE\r\n" +
                        "CLOSURE ITEMS:\r\n" +
                        "R28: GuardList: ^ GuardList COMMA GuardInstance\r\n" +
                        "R29: GuardList: ^ GuardInstance\r\n" +
                        "R32: GuardInstance: ^ IDENTIFIER zeroOrOne_TOKENTYPE zeroOrOne_CODE\r\n" +
                        "SHIFTS, REDUCTIONS AND GOTOS\r\n" +
                        "  IDENTIFIER: SHIFT to state S41\r\n" +
                        "  GuardList: GOTO state S39\r\n" +
                        "  GuardInstance: GOTO state S40\r\n",

                    TerminalColumns = new ParserStateColumn[]
                    {
                        new ParserStateColumn
                        (
                            16404,	// On IDENTIFIER
                            null,
                            false,	// shift to
                            41		// state 41
                        ),
                    },

                    // GOTO non-terminals used to select next state
                    // after a REDUCE operation has taken place

                    NonterminalColumns = new ParserStateColumn[]
                    {
                        new ParserStateColumn
                        (
                            32782,	// On GuardList
                            null,
                            false,	// goto
                            39		// state 39
                        ),
                        new ParserStateColumn
                        (
                            32784,	// On GuardInstance
                            null,
                            false,	// goto
                            40		// state 40
                        ),
                    },
                },

                new ParserState
                {
                    StateString =
                        "State S25 CORE ITEMS:\r\n" +
                        "R24: Guards: CONDITIONS ERR ^ RBRACE\r\n" +
                        "SHIFTS, REDUCTIONS AND GOTOS\r\n" +
                        "  RBRACE: SHIFT to state S42\r\n",

                    TerminalColumns = new ParserStateColumn[]
                    {
                        new ParserStateColumn
                        (
                            16390,	// On RBRACE
                            null,
                            false,	// shift to
                            42		// state 42
                        ),
                    },

                    NonterminalColumns = new ParserStateColumn[0],
                },

                new ParserState
                {
                    StateString =
                        "State S26 CORE ITEMS:\r\n" +
                        "R13: Events: TOKENS LBRACE IdentWithOptAssignList ^ RBRACE\r\n" +
                        "R15: IdentWithOptAssignList: IdentWithOptAssignList ^ COMMA IdentWithOptAssign\r\n" +
                        "SHIFTS, REDUCTIONS AND GOTOS\r\n" +
                        "  RBRACE: SHIFT to state S43\r\n" +
                        "  COMMA: SHIFT to state S44\r\n",

                    TerminalColumns = new ParserStateColumn[]
                    {
                        new ParserStateColumn
                        (
                            16390,	// On RBRACE
                            null,
                            false,	// shift to
                            43		// state 43
                        ),
                        new ParserStateColumn
                        (
                            16393,	// On COMMA
                            null,
                            false,	// shift to
                            44		// state 44
                        ),
                    },

                    NonterminalColumns = new ParserStateColumn[0],
                },

                new ParserState
                {
                    StateString =
                        "State S27 CORE ITEMS:\r\n" +
                        "R16: IdentWithOptAssignList: IdentWithOptAssign ^\r\n" +
                        "{\r\n" +
                        "    RBRACE,\r\n" +
                        "    COMMA\r\n" +
                        "}\r\n" +
                        "SHIFTS, REDUCTIONS AND GOTOS\r\n" +
                        "  RBRACE: REDUCE by rule R16: IdentWithOptAssignList: IdentWithOptAssign;\r\n" +
                        "  COMMA: REDUCE by rule R16: IdentWithOptAssignList: IdentWithOptAssign;\r\n",

                    TerminalColumns = new ParserStateColumn[]
                    {
                        new ParserStateColumn
                        (
                            16390,	// On RBRACE
                            null,
                            true,	// reduce by
                            16		// production 16
                        ),
                        new ParserStateColumn
                        (
                            16393,	// On COMMA
                            null,
                            true,	// reduce by
                            16		// production 16
                        ),
                    },

                    NonterminalColumns = new ParserStateColumn[0],
                },

                new ParserState
                {
                    StateString =
                        "State S28 CORE ITEMS:\r\n" +
                        "R21: IdentWithOptAssign: IDENTIFIER ^ zeroOrOne_TOKENTYPE zeroOrOne_AssignedValue\r\n" +
                        "CLOSURE ITEMS:\r\n" +
                        "R17: zeroOrOne_TOKENTYPE: ^ TOKENTYPE\r\n" +
                        "R18: zeroOrOne_TOKENTYPE: ^\r\n" +
                        "{\r\n" +
                        "    EQUALS,\r\n" +
                        "    RBRACE,\r\n" +
                        "    COMMA\r\n" +
                        "}\r\n" +
                        "SHIFTS, REDUCTIONS AND GOTOS\r\n" +
                        "  TOKENTYPE: SHIFT to state S46\r\n" +
                        "  EQUALS: REDUCE by rule R18: zeroOrOne_TOKENTYPE:;\r\n" +
                        "  RBRACE: REDUCE by rule R18: zeroOrOne_TOKENTYPE:;\r\n" +
                        "  COMMA: REDUCE by rule R18: zeroOrOne_TOKENTYPE:;\r\n" +
                        "  zeroOrOne_TOKENTYPE: GOTO state S45\r\n",

                    TerminalColumns = new ParserStateColumn[]
                    {
                        new ParserStateColumn
                        (
                            16419,	// On TOKENTYPE
                            null,
                            false,	// shift to
                            46		// state 46
                        ),
                        new ParserStateColumn
                        (
                            16410,	// On EQUALS
                            null,
                            true,	// reduce by
                            18		// production 18
                        ),
                        new ParserStateColumn
                        (
                            16390,	// On RBRACE
                            null,
                            true,	// reduce by
                            18		// production 18
                        ),
                        new ParserStateColumn
                        (
                            16393,	// On COMMA
                            null,
                            true,	// reduce by
                            18		// production 18
                        ),
                    },

                    // GOTO non-terminals used to select next state
                    // after a REDUCE operation has taken place

                    NonterminalColumns = new ParserStateColumn[]
                    {
                        new ParserStateColumn
                        (
                            32779,	// On zeroOrOne_TOKENTYPE
                            null,
                            false,	// goto
                            45		// state 45
                        ),
                    },
                },

                new ParserState
                {
                    StateString =
                        "State S29 CORE ITEMS:\r\n" +
                        "R14: Events: TOKENS ERR RBRACE ^\r\n" +
                        "{\r\n" +
                        "    CONDITIONS,\r\n" +
                        "    GRAMMAR,\r\n" +
                        "    FSM\r\n" +
                        "}\r\n" +
                        "SHIFTS, REDUCTIONS AND GOTOS\r\n" +
                        "  CONDITIONS: REDUCE by rule R14: Events: TOKENS ERR RBRACE;\r\n" +
                        "  GRAMMAR: REDUCE by rule R14: Events: TOKENS ERR RBRACE;\r\n" +
                        "  FSM: REDUCE by rule R14: Events: TOKENS ERR RBRACE;\r\n",

                    TerminalColumns = new ParserStateColumn[]
                    {
                        new ParserStateColumn
                        (
                            16402,	// On CONDITIONS
                            null,
                            true,	// reduce by
                            14		// production 14
                        ),
                        new ParserStateColumn
                        (
                            16403,	// On GRAMMAR
                            null,
                            true,	// reduce by
                            14		// production 14
                        ),
                        new ParserStateColumn
                        (
                            16412,	// On FSM
                            null,
                            true,	// reduce by
                            14		// production 14
                        ),
                    },

                    NonterminalColumns = new ParserStateColumn[0],
                },

                new ParserState
                {
                    StateString =
                        "State S30 CORE ITEMS:\r\n" +
                        "R4: ParserOptions: OPTIONS LBRACE OptionList RBRACE ^\r\n" +
                        "{\r\n" +
                        "    TOKENS\r\n" +
                        "}\r\n" +
                        "SHIFTS, REDUCTIONS AND GOTOS\r\n" +
                        "  TOKENS: REDUCE by rule R4: ParserOptions: OPTIONS LBRACE OptionList RBRACE;\r\n",

                    TerminalColumns = new ParserStateColumn[]
                    {
                        new ParserStateColumn
                        (
                            16401,	// On TOKENS
                            null,
                            true,	// reduce by
                            4		// production 4
                        ),
                    },

                    NonterminalColumns = new ParserStateColumn[0],
                },

                new ParserState
                {
                    StateString =
                        "State S31 CORE ITEMS:\r\n" +
                        "R5: OptionList: OptionList COMMA ^ ParserOption\r\n" +
                        "CLOSURE ITEMS:\r\n" +
                        "R8: ParserOption: ^ USING IDENTIFIER\r\n" +
                        "R9: ParserOption: ^ NAMESPACE IDENTIFIER\r\n" +
                        "R10: ParserOption: ^ PARSERCLASS IDENTIFIER\r\n" +
                        "R11: ParserOption: ^ FSMCLASS IDENTIFIER\r\n" +
                        "R12: ParserOption: ^ ASSEMBLYREF IDENTIFIER\r\n" +
                        "SHIFTS, REDUCTIONS AND GOTOS\r\n" +
                        "  USING: SHIFT to state S16\r\n" +
                        "  NAMESPACE: SHIFT to state S17\r\n" +
                        "  PARSERCLASS: SHIFT to state S18\r\n" +
                        "  FSMCLASS: SHIFT to state S19\r\n" +
                        "  ASSEMBLYREF: SHIFT to state S20\r\n" +
                        "  ParserOption: GOTO state S47\r\n",

                    TerminalColumns = new ParserStateColumn[]
                    {
                        new ParserStateColumn
                        (
                            16407,	// On USING
                            null,
                            false,	// shift to
                            16		// state 16
                        ),
                        new ParserStateColumn
                        (
                            16408,	// On NAMESPACE
                            null,
                            false,	// shift to
                            17		// state 17
                        ),
                        new ParserStateColumn
                        (
                            16409,	// On PARSERCLASS
                            null,
                            false,	// shift to
                            18		// state 18
                        ),
                        new ParserStateColumn
                        (
                            16415,	// On FSMCLASS
                            null,
                            false,	// shift to
                            19		// state 19
                        ),
                        new ParserStateColumn
                        (
                            16418,	// On ASSEMBLYREF
                            null,
                            false,	// shift to
                            20		// state 20
                        ),
                    },

                    // GOTO non-terminals used to select next state
                    // after a REDUCE operation has taken place

                    NonterminalColumns = new ParserStateColumn[]
                    {
                        new ParserStateColumn
                        (
                            32776,	// On ParserOption
                            null,
                            false,	// goto
                            47		// state 47
                        ),
                    },
                },

                new ParserState
                {
                    StateString =
                        "State S32 CORE ITEMS:\r\n" +
                        "R8: ParserOption: USING IDENTIFIER ^\r\n" +
                        "{\r\n" +
                        "    RBRACE,\r\n" +
                        "    COMMA\r\n" +
                        "}\r\n" +
                        "SHIFTS, REDUCTIONS AND GOTOS\r\n" +
                        "  RBRACE: REDUCE by rule R8: ParserOption: USING IDENTIFIER;\r\n" +
                        "  COMMA: REDUCE by rule R8: ParserOption: USING IDENTIFIER;\r\n",

                    TerminalColumns = new ParserStateColumn[]
                    {
                        new ParserStateColumn
                        (
                            16390,	// On RBRACE
                            null,
                            true,	// reduce by
                            8		// production 8
                        ),
                        new ParserStateColumn
                        (
                            16393,	// On COMMA
                            null,
                            true,	// reduce by
                            8		// production 8
                        ),
                    },

                    NonterminalColumns = new ParserStateColumn[0],
                },

                new ParserState
                {
                    StateString =
                        "State S33 CORE ITEMS:\r\n" +
                        "R9: ParserOption: NAMESPACE IDENTIFIER ^\r\n" +
                        "{\r\n" +
                        "    RBRACE,\r\n" +
                        "    COMMA\r\n" +
                        "}\r\n" +
                        "SHIFTS, REDUCTIONS AND GOTOS\r\n" +
                        "  RBRACE: REDUCE by rule R9: ParserOption: NAMESPACE IDENTIFIER;\r\n" +
                        "  COMMA: REDUCE by rule R9: ParserOption: NAMESPACE IDENTIFIER;\r\n",

                    TerminalColumns = new ParserStateColumn[]
                    {
                        new ParserStateColumn
                        (
                            16390,	// On RBRACE
                            null,
                            true,	// reduce by
                            9		// production 9
                        ),
                        new ParserStateColumn
                        (
                            16393,	// On COMMA
                            null,
                            true,	// reduce by
                            9		// production 9
                        ),
                    },

                    NonterminalColumns = new ParserStateColumn[0],
                },

                new ParserState
                {
                    StateString =
                        "State S34 CORE ITEMS:\r\n" +
                        "R10: ParserOption: PARSERCLASS IDENTIFIER ^\r\n" +
                        "{\r\n" +
                        "    RBRACE,\r\n" +
                        "    COMMA\r\n" +
                        "}\r\n" +
                        "SHIFTS, REDUCTIONS AND GOTOS\r\n" +
                        "  RBRACE: REDUCE by rule R10: ParserOption: PARSERCLASS IDENTIFIER;\r\n" +
                        "  COMMA: REDUCE by rule R10: ParserOption: PARSERCLASS IDENTIFIER;\r\n",

                    TerminalColumns = new ParserStateColumn[]
                    {
                        new ParserStateColumn
                        (
                            16390,	// On RBRACE
                            null,
                            true,	// reduce by
                            10		// production 10
                        ),
                        new ParserStateColumn
                        (
                            16393,	// On COMMA
                            null,
                            true,	// reduce by
                            10		// production 10
                        ),
                    },

                    NonterminalColumns = new ParserStateColumn[0],
                },

                new ParserState
                {
                    StateString =
                        "State S35 CORE ITEMS:\r\n" +
                        "R11: ParserOption: FSMCLASS IDENTIFIER ^\r\n" +
                        "{\r\n" +
                        "    RBRACE,\r\n" +
                        "    COMMA\r\n" +
                        "}\r\n" +
                        "SHIFTS, REDUCTIONS AND GOTOS\r\n" +
                        "  RBRACE: REDUCE by rule R11: ParserOption: FSMCLASS IDENTIFIER;\r\n" +
                        "  COMMA: REDUCE by rule R11: ParserOption: FSMCLASS IDENTIFIER;\r\n",

                    TerminalColumns = new ParserStateColumn[]
                    {
                        new ParserStateColumn
                        (
                            16390,	// On RBRACE
                            null,
                            true,	// reduce by
                            11		// production 11
                        ),
                        new ParserStateColumn
                        (
                            16393,	// On COMMA
                            null,
                            true,	// reduce by
                            11		// production 11
                        ),
                    },

                    NonterminalColumns = new ParserStateColumn[0],
                },

                new ParserState
                {
                    StateString =
                        "State S36 CORE ITEMS:\r\n" +
                        "R12: ParserOption: ASSEMBLYREF IDENTIFIER ^\r\n" +
                        "{\r\n" +
                        "    RBRACE,\r\n" +
                        "    COMMA\r\n" +
                        "}\r\n" +
                        "SHIFTS, REDUCTIONS AND GOTOS\r\n" +
                        "  RBRACE: REDUCE by rule R12: ParserOption: ASSEMBLYREF IDENTIFIER;\r\n" +
                        "  COMMA: REDUCE by rule R12: ParserOption: ASSEMBLYREF IDENTIFIER;\r\n",

                    TerminalColumns = new ParserStateColumn[]
                    {
                        new ParserStateColumn
                        (
                            16390,	// On RBRACE
                            null,
                            true,	// reduce by
                            12		// production 12
                        ),
                        new ParserStateColumn
                        (
                            16393,	// On COMMA
                            null,
                            true,	// reduce by
                            12		// production 12
                        ),
                    },

                    NonterminalColumns = new ParserStateColumn[0],
                },

                new ParserState
                {
                    StateString =
                        "State S37 CORE ITEMS:\r\n" +
                        "R35: Rules: GRAMMAR LPAREN ^ IDENTIFIER RPAREN LBRACE oneToMany_Rule RBRACE\r\n" +
                        "SHIFTS, REDUCTIONS AND GOTOS\r\n" +
                        "  IDENTIFIER: SHIFT to state S48\r\n",

                    TerminalColumns = new ParserStateColumn[]
                    {
                        new ParserStateColumn
                        (
                            16404,	// On IDENTIFIER
                            null,
                            false,	// shift to
                            48		// state 48
                        ),
                    },

                    NonterminalColumns = new ParserStateColumn[0],
                },

                new ParserState
                {
                    StateString =
                        "State S38 CORE ITEMS:\r\n" +
                        "R38: Rules: FSM LPAREN ^ IDENTIFIER RPAREN LBRACE oneToMany_State RBRACE\r\n" +
                        "SHIFTS, REDUCTIONS AND GOTOS\r\n" +
                        "  IDENTIFIER: SHIFT to state S49\r\n",

                    TerminalColumns = new ParserStateColumn[]
                    {
                        new ParserStateColumn
                        (
                            16404,	// On IDENTIFIER
                            null,
                            false,	// shift to
                            49		// state 49
                        ),
                    },

                    NonterminalColumns = new ParserStateColumn[0],
                },

                new ParserState
                {
                    StateString =
                        "State S39 CORE ITEMS:\r\n" +
                        "R23: Guards: CONDITIONS LBRACE GuardList ^ RBRACE\r\n" +
                        "R28: GuardList: GuardList ^ COMMA GuardInstance\r\n" +
                        "SHIFTS, REDUCTIONS AND GOTOS\r\n" +
                        "  RBRACE: SHIFT to state S50\r\n" +
                        "  COMMA: SHIFT to state S51\r\n",

                    TerminalColumns = new ParserStateColumn[]
                    {
                        new ParserStateColumn
                        (
                            16390,	// On RBRACE
                            null,
                            false,	// shift to
                            50		// state 50
                        ),
                        new ParserStateColumn
                        (
                            16393,	// On COMMA
                            null,
                            false,	// shift to
                            51		// state 51
                        ),
                    },

                    NonterminalColumns = new ParserStateColumn[0],
                },

                new ParserState
                {
                    StateString =
                        "State S40 CORE ITEMS:\r\n" +
                        "R29: GuardList: GuardInstance ^\r\n" +
                        "{\r\n" +
                        "    RBRACE,\r\n" +
                        "    COMMA\r\n" +
                        "}\r\n" +
                        "SHIFTS, REDUCTIONS AND GOTOS\r\n" +
                        "  RBRACE: REDUCE by rule R29: GuardList: GuardInstance;\r\n" +
                        "  COMMA: REDUCE by rule R29: GuardList: GuardInstance;\r\n",

                    TerminalColumns = new ParserStateColumn[]
                    {
                        new ParserStateColumn
                        (
                            16390,	// On RBRACE
                            null,
                            true,	// reduce by
                            29		// production 29
                        ),
                        new ParserStateColumn
                        (
                            16393,	// On COMMA
                            null,
                            true,	// reduce by
                            29		// production 29
                        ),
                    },

                    NonterminalColumns = new ParserStateColumn[0],
                },

                new ParserState
                {
                    StateString =
                        "State S41 CORE ITEMS:\r\n" +
                        "R32: GuardInstance: IDENTIFIER ^ zeroOrOne_TOKENTYPE zeroOrOne_CODE\r\n" +
                        "CLOSURE ITEMS:\r\n" +
                        "R17: zeroOrOne_TOKENTYPE: ^ TOKENTYPE\r\n" +
                        "R18: zeroOrOne_TOKENTYPE: ^\r\n" +
                        "{\r\n" +
                        "    CODE,\r\n" +
                        "    RBRACE,\r\n" +
                        "    COMMA\r\n" +
                        "}\r\n" +
                        "SHIFTS, REDUCTIONS AND GOTOS\r\n" +
                        "  TOKENTYPE: SHIFT to state S46\r\n" +
                        "  CODE: REDUCE by rule R18: zeroOrOne_TOKENTYPE:;\r\n" +
                        "  RBRACE: REDUCE by rule R18: zeroOrOne_TOKENTYPE:;\r\n" +
                        "  COMMA: REDUCE by rule R18: zeroOrOne_TOKENTYPE:;\r\n" +
                        "  zeroOrOne_TOKENTYPE: GOTO state S52\r\n",

                    TerminalColumns = new ParserStateColumn[]
                    {
                        new ParserStateColumn
                        (
                            16419,	// On TOKENTYPE
                            null,
                            false,	// shift to
                            46		// state 46
                        ),
                        new ParserStateColumn
                        (
                            16405,	// On CODE
                            null,
                            true,	// reduce by
                            18		// production 18
                        ),
                        new ParserStateColumn
                        (
                            16390,	// On RBRACE
                            null,
                            true,	// reduce by
                            18		// production 18
                        ),
                        new ParserStateColumn
                        (
                            16393,	// On COMMA
                            null,
                            true,	// reduce by
                            18		// production 18
                        ),
                    },

                    // GOTO non-terminals used to select next state
                    // after a REDUCE operation has taken place

                    NonterminalColumns = new ParserStateColumn[]
                    {
                        new ParserStateColumn
                        (
                            32779,	// On zeroOrOne_TOKENTYPE
                            null,
                            false,	// goto
                            52		// state 52
                        ),
                    },
                },

                new ParserState
                {
                    StateString =
                        "State S42 CORE ITEMS:\r\n" +
                        "R24: Guards: CONDITIONS ERR RBRACE ^\r\n" +
                        "{\r\n" +
                        "    GRAMMAR,\r\n" +
                        "    FSM\r\n" +
                        "}\r\n" +
                        "SHIFTS, REDUCTIONS AND GOTOS\r\n" +
                        "  GRAMMAR: REDUCE by rule R24: Guards: CONDITIONS ERR RBRACE;\r\n" +
                        "  FSM: REDUCE by rule R24: Guards: CONDITIONS ERR RBRACE;\r\n",

                    TerminalColumns = new ParserStateColumn[]
                    {
                        new ParserStateColumn
                        (
                            16403,	// On GRAMMAR
                            null,
                            true,	// reduce by
                            24		// production 24
                        ),
                        new ParserStateColumn
                        (
                            16412,	// On FSM
                            null,
                            true,	// reduce by
                            24		// production 24
                        ),
                    },

                    NonterminalColumns = new ParserStateColumn[0],
                },

                new ParserState
                {
                    StateString =
                        "State S43 CORE ITEMS:\r\n" +
                        "R13: Events: TOKENS LBRACE IdentWithOptAssignList RBRACE ^\r\n" +
                        "{\r\n" +
                        "    CONDITIONS,\r\n" +
                        "    GRAMMAR,\r\n" +
                        "    FSM\r\n" +
                        "}\r\n" +
                        "SHIFTS, REDUCTIONS AND GOTOS\r\n" +
                        "  CONDITIONS: REDUCE by rule R13: Events: TOKENS LBRACE IdentWithOptAssignList RBRACE;\r\n" +
                        "  GRAMMAR: REDUCE by rule R13: Events: TOKENS LBRACE IdentWithOptAssignList RBRACE;\r\n" +
                        "  FSM: REDUCE by rule R13: Events: TOKENS LBRACE IdentWithOptAssignList RBRACE;\r\n",

                    TerminalColumns = new ParserStateColumn[]
                    {
                        new ParserStateColumn
                        (
                            16402,	// On CONDITIONS
                            null,
                            true,	// reduce by
                            13		// production 13
                        ),
                        new ParserStateColumn
                        (
                            16403,	// On GRAMMAR
                            null,
                            true,	// reduce by
                            13		// production 13
                        ),
                        new ParserStateColumn
                        (
                            16412,	// On FSM
                            null,
                            true,	// reduce by
                            13		// production 13
                        ),
                    },

                    NonterminalColumns = new ParserStateColumn[0],
                },

                new ParserState
                {
                    StateString =
                        "State S44 CORE ITEMS:\r\n" +
                        "R15: IdentWithOptAssignList: IdentWithOptAssignList COMMA ^ IdentWithOptAssign\r\n" +
                        "CLOSURE ITEMS:\r\n" +
                        "R21: IdentWithOptAssign: ^ IDENTIFIER zeroOrOne_TOKENTYPE zeroOrOne_AssignedValue\r\n" +
                        "SHIFTS, REDUCTIONS AND GOTOS\r\n" +
                        "  IDENTIFIER: SHIFT to state S28\r\n" +
                        "  IdentWithOptAssign: GOTO state S53\r\n",

                    TerminalColumns = new ParserStateColumn[]
                    {
                        new ParserStateColumn
                        (
                            16404,	// On IDENTIFIER
                            null,
                            false,	// shift to
                            28		// state 28
                        ),
                    },

                    // GOTO non-terminals used to select next state
                    // after a REDUCE operation has taken place

                    NonterminalColumns = new ParserStateColumn[]
                    {
                        new ParserStateColumn
                        (
                            32778,	// On IdentWithOptAssign
                            null,
                            false,	// goto
                            53		// state 53
                        ),
                    },
                },

                new ParserState
                {
                    StateString =
                        "State S45 CORE ITEMS:\r\n" +
                        "R21: IdentWithOptAssign: IDENTIFIER zeroOrOne_TOKENTYPE ^ zeroOrOne_AssignedValue\r\n" +
                        "CLOSURE ITEMS:\r\n" +
                        "R19: zeroOrOne_AssignedValue: ^ AssignedValue\r\n" +
                        "R20: zeroOrOne_AssignedValue: ^\r\n" +
                        "{\r\n" +
                        "    RBRACE,\r\n" +
                        "    COMMA\r\n" +
                        "}\r\n" +
                        "R22: AssignedValue: ^ EQUALS INTEGER\r\n" +
                        "SHIFTS, REDUCTIONS AND GOTOS\r\n" +
                        "  EQUALS: SHIFT to state S56\r\n" +
                        "  RBRACE: REDUCE by rule R20: zeroOrOne_AssignedValue:;\r\n" +
                        "  COMMA: REDUCE by rule R20: zeroOrOne_AssignedValue:;\r\n" +
                        "  zeroOrOne_AssignedValue: GOTO state S54\r\n" +
                        "  AssignedValue: GOTO state S55\r\n",

                    TerminalColumns = new ParserStateColumn[]
                    {
                        new ParserStateColumn
                        (
                            16410,	// On EQUALS
                            null,
                            false,	// shift to
                            56		// state 56
                        ),
                        new ParserStateColumn
                        (
                            16390,	// On RBRACE
                            null,
                            true,	// reduce by
                            20		// production 20
                        ),
                        new ParserStateColumn
                        (
                            16393,	// On COMMA
                            null,
                            true,	// reduce by
                            20		// production 20
                        ),
                    },

                    // GOTO non-terminals used to select next state
                    // after a REDUCE operation has taken place

                    NonterminalColumns = new ParserStateColumn[]
                    {
                        new ParserStateColumn
                        (
                            32781,	// On zeroOrOne_AssignedValue
                            null,
                            false,	// goto
                            54		// state 54
                        ),
                        new ParserStateColumn
                        (
                            32780,	// On AssignedValue
                            null,
                            false,	// goto
                            55		// state 55
                        ),
                    },
                },

                new ParserState
                {
                    StateString =
                        "State S46 CORE ITEMS:\r\n" +
                        "R17: zeroOrOne_TOKENTYPE: TOKENTYPE ^\r\n" +
                        "{\r\n" +
                        "    EQUALS,\r\n" +
                        "    RBRACE,\r\n" +
                        "    COMMA,\r\n" +
                        "    CODE,\r\n" +
                        "    COLON\r\n" +
                        "}\r\n" +
                        "SHIFTS, REDUCTIONS AND GOTOS\r\n" +
                        "  EQUALS: REDUCE by rule R17: zeroOrOne_TOKENTYPE: TOKENTYPE;\r\n" +
                        "  RBRACE: REDUCE by rule R17: zeroOrOne_TOKENTYPE: TOKENTYPE;\r\n" +
                        "  COMMA: REDUCE by rule R17: zeroOrOne_TOKENTYPE: TOKENTYPE;\r\n" +
                        "  CODE: REDUCE by rule R17: zeroOrOne_TOKENTYPE: TOKENTYPE;\r\n" +
                        "  COLON: REDUCE by rule R17: zeroOrOne_TOKENTYPE: TOKENTYPE;\r\n",

                    TerminalColumns = new ParserStateColumn[]
                    {
                        new ParserStateColumn
                        (
                            16410,	// On EQUALS
                            null,
                            true,	// reduce by
                            17		// production 17
                        ),
                        new ParserStateColumn
                        (
                            16390,	// On RBRACE
                            null,
                            true,	// reduce by
                            17		// production 17
                        ),
                        new ParserStateColumn
                        (
                            16393,	// On COMMA
                            null,
                            true,	// reduce by
                            17		// production 17
                        ),
                        new ParserStateColumn
                        (
                            16405,	// On CODE
                            null,
                            true,	// reduce by
                            17		// production 17
                        ),
                        new ParserStateColumn
                        (
                            16394,	// On COLON
                            null,
                            true,	// reduce by
                            17		// production 17
                        ),
                    },

                    NonterminalColumns = new ParserStateColumn[0],
                },

                new ParserState
                {
                    StateString =
                        "State S47 CORE ITEMS:\r\n" +
                        "R5: OptionList: OptionList COMMA ParserOption ^\r\n" +
                        "{\r\n" +
                        "    RBRACE,\r\n" +
                        "    COMMA\r\n" +
                        "}\r\n" +
                        "SHIFTS, REDUCTIONS AND GOTOS\r\n" +
                        "  RBRACE: REDUCE by rule R5: OptionList: OptionList COMMA ParserOption;\r\n" +
                        "  COMMA: REDUCE by rule R5: OptionList: OptionList COMMA ParserOption;\r\n",

                    TerminalColumns = new ParserStateColumn[]
                    {
                        new ParserStateColumn
                        (
                            16390,	// On RBRACE
                            null,
                            true,	// reduce by
                            5		// production 5
                        ),
                        new ParserStateColumn
                        (
                            16393,	// On COMMA
                            null,
                            true,	// reduce by
                            5		// production 5
                        ),
                    },

                    NonterminalColumns = new ParserStateColumn[0],
                },

                new ParserState
                {
                    StateString =
                        "State S48 CORE ITEMS:\r\n" +
                        "R35: Rules: GRAMMAR LPAREN IDENTIFIER ^ RPAREN LBRACE oneToMany_Rule RBRACE\r\n" +
                        "SHIFTS, REDUCTIONS AND GOTOS\r\n" +
                        "  RPAREN: SHIFT to state S57\r\n",

                    TerminalColumns = new ParserStateColumn[]
                    {
                        new ParserStateColumn
                        (
                            16392,	// On RPAREN
                            null,
                            false,	// shift to
                            57		// state 57
                        ),
                    },

                    NonterminalColumns = new ParserStateColumn[0],
                },

                new ParserState
                {
                    StateString =
                        "State S49 CORE ITEMS:\r\n" +
                        "R38: Rules: FSM LPAREN IDENTIFIER ^ RPAREN LBRACE oneToMany_State RBRACE\r\n" +
                        "SHIFTS, REDUCTIONS AND GOTOS\r\n" +
                        "  RPAREN: SHIFT to state S58\r\n",

                    TerminalColumns = new ParserStateColumn[]
                    {
                        new ParserStateColumn
                        (
                            16392,	// On RPAREN
                            null,
                            false,	// shift to
                            58		// state 58
                        ),
                    },

                    NonterminalColumns = new ParserStateColumn[0],
                },

                new ParserState
                {
                    StateString =
                        "State S50 CORE ITEMS:\r\n" +
                        "R23: Guards: CONDITIONS LBRACE GuardList RBRACE ^\r\n" +
                        "{\r\n" +
                        "    GRAMMAR,\r\n" +
                        "    FSM\r\n" +
                        "}\r\n" +
                        "SHIFTS, REDUCTIONS AND GOTOS\r\n" +
                        "  GRAMMAR: REDUCE by rule R23: Guards: CONDITIONS LBRACE GuardList RBRACE;\r\n" +
                        "  FSM: REDUCE by rule R23: Guards: CONDITIONS LBRACE GuardList RBRACE;\r\n",

                    TerminalColumns = new ParserStateColumn[]
                    {
                        new ParserStateColumn
                        (
                            16403,	// On GRAMMAR
                            null,
                            true,	// reduce by
                            23		// production 23
                        ),
                        new ParserStateColumn
                        (
                            16412,	// On FSM
                            null,
                            true,	// reduce by
                            23		// production 23
                        ),
                    },

                    NonterminalColumns = new ParserStateColumn[0],
                },

                new ParserState
                {
                    StateString =
                        "State S51 CORE ITEMS:\r\n" +
                        "R28: GuardList: GuardList COMMA ^ GuardInstance\r\n" +
                        "CLOSURE ITEMS:\r\n" +
                        "R32: GuardInstance: ^ IDENTIFIER zeroOrOne_TOKENTYPE zeroOrOne_CODE\r\n" +
                        "SHIFTS, REDUCTIONS AND GOTOS\r\n" +
                        "  IDENTIFIER: SHIFT to state S41\r\n" +
                        "  GuardInstance: GOTO state S59\r\n",

                    TerminalColumns = new ParserStateColumn[]
                    {
                        new ParserStateColumn
                        (
                            16404,	// On IDENTIFIER
                            null,
                            false,	// shift to
                            41		// state 41
                        ),
                    },

                    // GOTO non-terminals used to select next state
                    // after a REDUCE operation has taken place

                    NonterminalColumns = new ParserStateColumn[]
                    {
                        new ParserStateColumn
                        (
                            32784,	// On GuardInstance
                            null,
                            false,	// goto
                            59		// state 59
                        ),
                    },
                },

                new ParserState
                {
                    StateString =
                        "State S52 CORE ITEMS:\r\n" +
                        "R32: GuardInstance: IDENTIFIER zeroOrOne_TOKENTYPE ^ zeroOrOne_CODE\r\n" +
                        "CLOSURE ITEMS:\r\n" +
                        "R30: zeroOrOne_CODE: ^ CODE\r\n" +
                        "R31: zeroOrOne_CODE: ^\r\n" +
                        "{\r\n" +
                        "    RBRACE,\r\n" +
                        "    COMMA\r\n" +
                        "}\r\n" +
                        "SHIFTS, REDUCTIONS AND GOTOS\r\n" +
                        "  CODE: SHIFT to state S61\r\n" +
                        "  RBRACE: REDUCE by rule R31: zeroOrOne_CODE:;\r\n" +
                        "  COMMA: REDUCE by rule R31: zeroOrOne_CODE:;\r\n" +
                        "  zeroOrOne_CODE: GOTO state S60\r\n",

                    TerminalColumns = new ParserStateColumn[]
                    {
                        new ParserStateColumn
                        (
                            16405,	// On CODE
                            null,
                            false,	// shift to
                            61		// state 61
                        ),
                        new ParserStateColumn
                        (
                            16390,	// On RBRACE
                            null,
                            true,	// reduce by
                            31		// production 31
                        ),
                        new ParserStateColumn
                        (
                            16393,	// On COMMA
                            null,
                            true,	// reduce by
                            31		// production 31
                        ),
                    },

                    // GOTO non-terminals used to select next state
                    // after a REDUCE operation has taken place

                    NonterminalColumns = new ParserStateColumn[]
                    {
                        new ParserStateColumn
                        (
                            32785,	// On zeroOrOne_CODE
                            null,
                            false,	// goto
                            60		// state 60
                        ),
                    },
                },

                new ParserState
                {
                    StateString =
                        "State S53 CORE ITEMS:\r\n" +
                        "R15: IdentWithOptAssignList: IdentWithOptAssignList COMMA IdentWithOptAssign ^\r\n" +
                        "{\r\n" +
                        "    RBRACE,\r\n" +
                        "    COMMA\r\n" +
                        "}\r\n" +
                        "SHIFTS, REDUCTIONS AND GOTOS\r\n" +
                        "  RBRACE: REDUCE by rule R15: IdentWithOptAssignList: IdentWithOptAssignList COMMA IdentWithOptAssign;\r\n" +
                        "  COMMA: REDUCE by rule R15: IdentWithOptAssignList: IdentWithOptAssignList COMMA IdentWithOptAssign;\r\n",

                    TerminalColumns = new ParserStateColumn[]
                    {
                        new ParserStateColumn
                        (
                            16390,	// On RBRACE
                            null,
                            true,	// reduce by
                            15		// production 15
                        ),
                        new ParserStateColumn
                        (
                            16393,	// On COMMA
                            null,
                            true,	// reduce by
                            15		// production 15
                        ),
                    },

                    NonterminalColumns = new ParserStateColumn[0],
                },

                new ParserState
                {
                    StateString =
                        "State S54 CORE ITEMS:\r\n" +
                        "R21: IdentWithOptAssign: IDENTIFIER zeroOrOne_TOKENTYPE zeroOrOne_AssignedValue ^\r\n" +
                        "{\r\n" +
                        "    RBRACE,\r\n" +
                        "    COMMA\r\n" +
                        "}\r\n" +
                        "SHIFTS, REDUCTIONS AND GOTOS\r\n" +
                        "  RBRACE: REDUCE by rule R21: IdentWithOptAssign: IDENTIFIER zeroOrOne_TOKENTYPE zeroOrOne_AssignedValue;\r\n" +
                        "  COMMA: REDUCE by rule R21: IdentWithOptAssign: IDENTIFIER zeroOrOne_TOKENTYPE zeroOrOne_AssignedValue;\r\n",

                    TerminalColumns = new ParserStateColumn[]
                    {
                        new ParserStateColumn
                        (
                            16390,	// On RBRACE
                            null,
                            true,	// reduce by
                            21		// production 21
                        ),
                        new ParserStateColumn
                        (
                            16393,	// On COMMA
                            null,
                            true,	// reduce by
                            21		// production 21
                        ),
                    },

                    NonterminalColumns = new ParserStateColumn[0],
                },

                new ParserState
                {
                    StateString =
                        "State S55 CORE ITEMS:\r\n" +
                        "R19: zeroOrOne_AssignedValue: AssignedValue ^\r\n" +
                        "{\r\n" +
                        "    RBRACE,\r\n" +
                        "    COMMA\r\n" +
                        "}\r\n" +
                        "SHIFTS, REDUCTIONS AND GOTOS\r\n" +
                        "  RBRACE: REDUCE by rule R19: zeroOrOne_AssignedValue: AssignedValue;\r\n" +
                        "  COMMA: REDUCE by rule R19: zeroOrOne_AssignedValue: AssignedValue;\r\n",

                    TerminalColumns = new ParserStateColumn[]
                    {
                        new ParserStateColumn
                        (
                            16390,	// On RBRACE
                            null,
                            true,	// reduce by
                            19		// production 19
                        ),
                        new ParserStateColumn
                        (
                            16393,	// On COMMA
                            null,
                            true,	// reduce by
                            19		// production 19
                        ),
                    },

                    NonterminalColumns = new ParserStateColumn[0],
                },

                new ParserState
                {
                    StateString =
                        "State S56 CORE ITEMS:\r\n" +
                        "R22: AssignedValue: EQUALS ^ INTEGER\r\n" +
                        "SHIFTS, REDUCTIONS AND GOTOS\r\n" +
                        "  INTEGER: SHIFT to state S62\r\n",

                    TerminalColumns = new ParserStateColumn[]
                    {
                        new ParserStateColumn
                        (
                            16411,	// On INTEGER
                            null,
                            false,	// shift to
                            62		// state 62
                        ),
                    },

                    NonterminalColumns = new ParserStateColumn[0],
                },

                new ParserState
                {
                    StateString =
                        "State S57 CORE ITEMS:\r\n" +
                        "R35: Rules: GRAMMAR LPAREN IDENTIFIER RPAREN ^ LBRACE oneToMany_Rule RBRACE\r\n" +
                        "SHIFTS, REDUCTIONS AND GOTOS\r\n" +
                        "  LBRACE: SHIFT to state S63\r\n",

                    TerminalColumns = new ParserStateColumn[]
                    {
                        new ParserStateColumn
                        (
                            16389,	// On LBRACE
                            null,
                            false,	// shift to
                            63		// state 63
                        ),
                    },

                    NonterminalColumns = new ParserStateColumn[0],
                },

                new ParserState
                {
                    StateString =
                        "State S58 CORE ITEMS:\r\n" +
                        "R38: Rules: FSM LPAREN IDENTIFIER RPAREN ^ LBRACE oneToMany_State RBRACE\r\n" +
                        "SHIFTS, REDUCTIONS AND GOTOS\r\n" +
                        "  LBRACE: SHIFT to state S64\r\n",

                    TerminalColumns = new ParserStateColumn[]
                    {
                        new ParserStateColumn
                        (
                            16389,	// On LBRACE
                            null,
                            false,	// shift to
                            64		// state 64
                        ),
                    },

                    NonterminalColumns = new ParserStateColumn[0],
                },

                new ParserState
                {
                    StateString =
                        "State S59 CORE ITEMS:\r\n" +
                        "R28: GuardList: GuardList COMMA GuardInstance ^\r\n" +
                        "{\r\n" +
                        "    RBRACE,\r\n" +
                        "    COMMA\r\n" +
                        "}\r\n" +
                        "SHIFTS, REDUCTIONS AND GOTOS\r\n" +
                        "  RBRACE: REDUCE by rule R28: GuardList: GuardList COMMA GuardInstance;\r\n" +
                        "  COMMA: REDUCE by rule R28: GuardList: GuardList COMMA GuardInstance;\r\n",

                    TerminalColumns = new ParserStateColumn[]
                    {
                        new ParserStateColumn
                        (
                            16390,	// On RBRACE
                            null,
                            true,	// reduce by
                            28		// production 28
                        ),
                        new ParserStateColumn
                        (
                            16393,	// On COMMA
                            null,
                            true,	// reduce by
                            28		// production 28
                        ),
                    },

                    NonterminalColumns = new ParserStateColumn[0],
                },

                new ParserState
                {
                    StateString =
                        "State S60 CORE ITEMS:\r\n" +
                        "R32: GuardInstance: IDENTIFIER zeroOrOne_TOKENTYPE zeroOrOne_CODE ^\r\n" +
                        "{\r\n" +
                        "    RBRACE,\r\n" +
                        "    COMMA\r\n" +
                        "}\r\n" +
                        "SHIFTS, REDUCTIONS AND GOTOS\r\n" +
                        "  RBRACE: REDUCE by rule R32: GuardInstance: IDENTIFIER zeroOrOne_TOKENTYPE zeroOrOne_CODE;\r\n" +
                        "  COMMA: REDUCE by rule R32: GuardInstance: IDENTIFIER zeroOrOne_TOKENTYPE zeroOrOne_CODE;\r\n",

                    TerminalColumns = new ParserStateColumn[]
                    {
                        new ParserStateColumn
                        (
                            16390,	// On RBRACE
                            null,
                            true,	// reduce by
                            32		// production 32
                        ),
                        new ParserStateColumn
                        (
                            16393,	// On COMMA
                            null,
                            true,	// reduce by
                            32		// production 32
                        ),
                    },

                    NonterminalColumns = new ParserStateColumn[0],
                },

                new ParserState
                {
                    StateString =
                        "State S61 CORE ITEMS:\r\n" +
                        "R30: zeroOrOne_CODE: CODE ^\r\n" +
                        "{\r\n" +
                        "    RBRACE,\r\n" +
                        "    COMMA,\r\n" +
                        "    MERGE,\r\n" +
                        "    SEMI,\r\n" +
                        "    OR\r\n" +
                        "}\r\n" +
                        "SHIFTS, REDUCTIONS AND GOTOS\r\n" +
                        "  RBRACE: REDUCE by rule R30: zeroOrOne_CODE: CODE;\r\n" +
                        "  COMMA: REDUCE by rule R30: zeroOrOne_CODE: CODE;\r\n" +
                        "  MERGE: REDUCE by rule R30: zeroOrOne_CODE: CODE;\r\n" +
                        "  SEMI: REDUCE by rule R30: zeroOrOne_CODE: CODE;\r\n" +
                        "  OR: REDUCE by rule R30: zeroOrOne_CODE: CODE;\r\n",

                    TerminalColumns = new ParserStateColumn[]
                    {
                        new ParserStateColumn
                        (
                            16390,	// On RBRACE
                            null,
                            true,	// reduce by
                            30		// production 30
                        ),
                        new ParserStateColumn
                        (
                            16393,	// On COMMA
                            null,
                            true,	// reduce by
                            30		// production 30
                        ),
                        new ParserStateColumn
                        (
                            16416,	// On MERGE
                            null,
                            true,	// reduce by
                            30		// production 30
                        ),
                        new ParserStateColumn
                        (
                            16396,	// On SEMI
                            null,
                            true,	// reduce by
                            30		// production 30
                        ),
                        new ParserStateColumn
                        (
                            16395,	// On OR
                            null,
                            true,	// reduce by
                            30		// production 30
                        ),
                    },

                    NonterminalColumns = new ParserStateColumn[0],
                },

                new ParserState
                {
                    StateString =
                        "State S62 CORE ITEMS:\r\n" +
                        "R22: AssignedValue: EQUALS INTEGER ^\r\n" +
                        "{\r\n" +
                        "    RBRACE,\r\n" +
                        "    COMMA\r\n" +
                        "}\r\n" +
                        "SHIFTS, REDUCTIONS AND GOTOS\r\n" +
                        "  RBRACE: REDUCE by rule R22: AssignedValue: EQUALS INTEGER;\r\n" +
                        "  COMMA: REDUCE by rule R22: AssignedValue: EQUALS INTEGER;\r\n",

                    TerminalColumns = new ParserStateColumn[]
                    {
                        new ParserStateColumn
                        (
                            16390,	// On RBRACE
                            null,
                            true,	// reduce by
                            22		// production 22
                        ),
                        new ParserStateColumn
                        (
                            16393,	// On COMMA
                            null,
                            true,	// reduce by
                            22		// production 22
                        ),
                    },

                    NonterminalColumns = new ParserStateColumn[0],
                },

                new ParserState
                {
                    StateString =
                        "State S63 CORE ITEMS:\r\n" +
                        "R35: Rules: GRAMMAR LPAREN IDENTIFIER RPAREN LBRACE ^ oneToMany_Rule RBRACE\r\n" +
                        "CLOSURE ITEMS:\r\n" +
                        "R33: oneToMany_Rule: ^ oneToMany_Rule Rule\r\n" +
                        "R34: oneToMany_Rule: ^ Rule\r\n" +
                        "R42: Rule: ^ RuleNameAndType ProductionList zeroOrOne_Merge SEMI\r\n" +
                        "R43: Rule: ^ ERR SEMI\r\n" +
                        "R39: RuleNameAndType: ^ IDENTIFIER zeroOrOne_TOKENTYPE COLON\r\n" +
                        "SHIFTS, REDUCTIONS AND GOTOS\r\n" +
                        "  ERR: SHIFT to state S68\r\n" +
                        "  IDENTIFIER: SHIFT to state S69\r\n" +
                        "  oneToMany_Rule: GOTO state S65\r\n" +
                        "  Rule: GOTO state S66\r\n" +
                        "  RuleNameAndType: GOTO state S67\r\n",

                    TerminalColumns = new ParserStateColumn[]
                    {
                        new ParserStateColumn
                        (
                            16387,	// On ERR
                            null,
                            false,	// shift to
                            68		// state 68
                        ),
                        new ParserStateColumn
                        (
                            16404,	// On IDENTIFIER
                            null,
                            false,	// shift to
                            69		// state 69
                        ),
                    },

                    // GOTO non-terminals used to select next state
                    // after a REDUCE operation has taken place

                    NonterminalColumns = new ParserStateColumn[]
                    {
                        new ParserStateColumn
                        (
                            32787,	// On oneToMany_Rule
                            null,
                            false,	// goto
                            65		// state 65
                        ),
                        new ParserStateColumn
                        (
                            32786,	// On Rule
                            null,
                            false,	// goto
                            66		// state 66
                        ),
                        new ParserStateColumn
                        (
                            32790,	// On RuleNameAndType
                            null,
                            false,	// goto
                            67		// state 67
                        ),
                    },
                },

                new ParserState
                {
                    StateString =
                        "State S64 CORE ITEMS:\r\n" +
                        "R38: Rules: FSM LPAREN IDENTIFIER RPAREN LBRACE ^ oneToMany_State RBRACE\r\n" +
                        "CLOSURE ITEMS:\r\n" +
                        "R36: oneToMany_State: ^ oneToMany_State State\r\n" +
                        "R37: oneToMany_State: ^ State\r\n" +
                        "R68: State: ^ IDENTIFIER COLON zeroOrOne_OnEntry zeroOrOne_OnExit TransitionList SEMI\r\n" +
                        "R69: State: ^ ERR SEMI\r\n" +
                        "SHIFTS, REDUCTIONS AND GOTOS\r\n" +
                        "  IDENTIFIER: SHIFT to state S72\r\n" +
                        "  ERR: SHIFT to state S73\r\n" +
                        "  oneToMany_State: GOTO state S70\r\n" +
                        "  State: GOTO state S71\r\n",

                    TerminalColumns = new ParserStateColumn[]
                    {
                        new ParserStateColumn
                        (
                            16404,	// On IDENTIFIER
                            null,
                            false,	// shift to
                            72		// state 72
                        ),
                        new ParserStateColumn
                        (
                            16387,	// On ERR
                            null,
                            false,	// shift to
                            73		// state 73
                        ),
                    },

                    // GOTO non-terminals used to select next state
                    // after a REDUCE operation has taken place

                    NonterminalColumns = new ParserStateColumn[]
                    {
                        new ParserStateColumn
                        (
                            32789,	// On oneToMany_State
                            null,
                            false,	// goto
                            70		// state 70
                        ),
                        new ParserStateColumn
                        (
                            32788,	// On State
                            null,
                            false,	// goto
                            71		// state 71
                        ),
                    },
                },

                new ParserState
                {
                    StateString =
                        "State S65 CORE ITEMS:\r\n" +
                        "R35: Rules: GRAMMAR LPAREN IDENTIFIER RPAREN LBRACE oneToMany_Rule ^ RBRACE\r\n" +
                        "R33: oneToMany_Rule: oneToMany_Rule ^ Rule\r\n" +
                        "CLOSURE ITEMS:\r\n" +
                        "R42: Rule: ^ RuleNameAndType ProductionList zeroOrOne_Merge SEMI\r\n" +
                        "R43: Rule: ^ ERR SEMI\r\n" +
                        "R39: RuleNameAndType: ^ IDENTIFIER zeroOrOne_TOKENTYPE COLON\r\n" +
                        "SHIFTS, REDUCTIONS AND GOTOS\r\n" +
                        "  RBRACE: SHIFT to state S74\r\n" +
                        "  ERR: SHIFT to state S68\r\n" +
                        "  IDENTIFIER: SHIFT to state S69\r\n" +
                        "  Rule: GOTO state S75\r\n" +
                        "  RuleNameAndType: GOTO state S67\r\n",

                    TerminalColumns = new ParserStateColumn[]
                    {
                        new ParserStateColumn
                        (
                            16390,	// On RBRACE
                            null,
                            false,	// shift to
                            74		// state 74
                        ),
                        new ParserStateColumn
                        (
                            16387,	// On ERR
                            null,
                            false,	// shift to
                            68		// state 68
                        ),
                        new ParserStateColumn
                        (
                            16404,	// On IDENTIFIER
                            null,
                            false,	// shift to
                            69		// state 69
                        ),
                    },

                    // GOTO non-terminals used to select next state
                    // after a REDUCE operation has taken place

                    NonterminalColumns = new ParserStateColumn[]
                    {
                        new ParserStateColumn
                        (
                            32786,	// On Rule
                            null,
                            false,	// goto
                            75		// state 75
                        ),
                        new ParserStateColumn
                        (
                            32790,	// On RuleNameAndType
                            null,
                            false,	// goto
                            67		// state 67
                        ),
                    },
                },

                new ParserState
                {
                    StateString =
                        "State S66 CORE ITEMS:\r\n" +
                        "R34: oneToMany_Rule: Rule ^\r\n" +
                        "{\r\n" +
                        "    RBRACE,\r\n" +
                        "    ERR,\r\n" +
                        "    IDENTIFIER\r\n" +
                        "}\r\n" +
                        "SHIFTS, REDUCTIONS AND GOTOS\r\n" +
                        "  RBRACE: REDUCE by rule R34: oneToMany_Rule: Rule;\r\n" +
                        "  ERR: REDUCE by rule R34: oneToMany_Rule: Rule;\r\n" +
                        "  IDENTIFIER: REDUCE by rule R34: oneToMany_Rule: Rule;\r\n",

                    TerminalColumns = new ParserStateColumn[]
                    {
                        new ParserStateColumn
                        (
                            16390,	// On RBRACE
                            null,
                            true,	// reduce by
                            34		// production 34
                        ),
                        new ParserStateColumn
                        (
                            16387,	// On ERR
                            null,
                            true,	// reduce by
                            34		// production 34
                        ),
                        new ParserStateColumn
                        (
                            16404,	// On IDENTIFIER
                            null,
                            true,	// reduce by
                            34		// production 34
                        ),
                    },

                    NonterminalColumns = new ParserStateColumn[0],
                },

                new ParserState
                {
                    StateString =
                        "State S67 CORE ITEMS:\r\n" +
                        "R42: Rule: RuleNameAndType ^ ProductionList zeroOrOne_Merge SEMI\r\n" +
                        "CLOSURE ITEMS:\r\n" +
                        "R44: ProductionList: ^ ProductionList OR Production\r\n" +
                        "R45: ProductionList: ^ Production\r\n" +
                        "R48: Production: ^ zeroToMany_Element zeroOrOne_CODE\r\n" +
                        "R46: zeroToMany_Element: ^ zeroToMany_Element Element\r\n" +
                        "R47: zeroToMany_Element: ^\r\n" +
                        "{\r\n" +
                        "    CODE,\r\n" +
                        "    MERGE,\r\n" +
                        "    SEMI,\r\n" +
                        "    OR,\r\n" +
                        "    IDENTIFIER\r\n" +
                        "}\r\n" +
                        "SHIFTS, REDUCTIONS AND GOTOS\r\n" +
                        "  CODE: REDUCE by rule R47: zeroToMany_Element:;\r\n" +
                        "  MERGE: REDUCE by rule R47: zeroToMany_Element:;\r\n" +
                        "  SEMI: REDUCE by rule R47: zeroToMany_Element:;\r\n" +
                        "  OR: REDUCE by rule R47: zeroToMany_Element:;\r\n" +
                        "  IDENTIFIER: REDUCE by rule R47: zeroToMany_Element:;\r\n" +
                        "  ProductionList: GOTO state S76\r\n" +
                        "  Production: GOTO state S77\r\n" +
                        "  zeroToMany_Element: GOTO state S78\r\n",

                    TerminalColumns = new ParserStateColumn[]
                    {
                        new ParserStateColumn
                        (
                            16405,	// On CODE
                            null,
                            true,	// reduce by
                            47		// production 47
                        ),
                        new ParserStateColumn
                        (
                            16416,	// On MERGE
                            null,
                            true,	// reduce by
                            47		// production 47
                        ),
                        new ParserStateColumn
                        (
                            16396,	// On SEMI
                            null,
                            true,	// reduce by
                            47		// production 47
                        ),
                        new ParserStateColumn
                        (
                            16395,	// On OR
                            null,
                            true,	// reduce by
                            47		// production 47
                        ),
                        new ParserStateColumn
                        (
                            16404,	// On IDENTIFIER
                            null,
                            true,	// reduce by
                            47		// production 47
                        ),
                    },

                    // GOTO non-terminals used to select next state
                    // after a REDUCE operation has taken place

                    NonterminalColumns = new ParserStateColumn[]
                    {
                        new ParserStateColumn
                        (
                            32791,	// On ProductionList
                            null,
                            false,	// goto
                            76		// state 76
                        ),
                        new ParserStateColumn
                        (
                            32794,	// On Production
                            null,
                            false,	// goto
                            77		// state 77
                        ),
                        new ParserStateColumn
                        (
                            32796,	// On zeroToMany_Element
                            null,
                            false,	// goto
                            78		// state 78
                        ),
                    },
                },

                new ParserState
                {
                    StateString =
                        "State S68 CORE ITEMS:\r\n" +
                        "R43: Rule: ERR ^ SEMI\r\n" +
                        "SHIFTS, REDUCTIONS AND GOTOS\r\n" +
                        "  SEMI: SHIFT to state S79\r\n",

                    TerminalColumns = new ParserStateColumn[]
                    {
                        new ParserStateColumn
                        (
                            16396,	// On SEMI
                            null,
                            false,	// shift to
                            79		// state 79
                        ),
                    },

                    NonterminalColumns = new ParserStateColumn[0],
                },

                new ParserState
                {
                    StateString =
                        "State S69 CORE ITEMS:\r\n" +
                        "R39: RuleNameAndType: IDENTIFIER ^ zeroOrOne_TOKENTYPE COLON\r\n" +
                        "CLOSURE ITEMS:\r\n" +
                        "R17: zeroOrOne_TOKENTYPE: ^ TOKENTYPE\r\n" +
                        "R18: zeroOrOne_TOKENTYPE: ^\r\n" +
                        "{\r\n" +
                        "    COLON\r\n" +
                        "}\r\n" +
                        "SHIFTS, REDUCTIONS AND GOTOS\r\n" +
                        "  TOKENTYPE: SHIFT to state S46\r\n" +
                        "  COLON: REDUCE by rule R18: zeroOrOne_TOKENTYPE:;\r\n" +
                        "  zeroOrOne_TOKENTYPE: GOTO state S80\r\n",

                    TerminalColumns = new ParserStateColumn[]
                    {
                        new ParserStateColumn
                        (
                            16419,	// On TOKENTYPE
                            null,
                            false,	// shift to
                            46		// state 46
                        ),
                        new ParserStateColumn
                        (
                            16394,	// On COLON
                            null,
                            true,	// reduce by
                            18		// production 18
                        ),
                    },

                    // GOTO non-terminals used to select next state
                    // after a REDUCE operation has taken place

                    NonterminalColumns = new ParserStateColumn[]
                    {
                        new ParserStateColumn
                        (
                            32779,	// On zeroOrOne_TOKENTYPE
                            null,
                            false,	// goto
                            80		// state 80
                        ),
                    },
                },

                new ParserState
                {
                    StateString =
                        "State S70 CORE ITEMS:\r\n" +
                        "R38: Rules: FSM LPAREN IDENTIFIER RPAREN LBRACE oneToMany_State ^ RBRACE\r\n" +
                        "R36: oneToMany_State: oneToMany_State ^ State\r\n" +
                        "CLOSURE ITEMS:\r\n" +
                        "R68: State: ^ IDENTIFIER COLON zeroOrOne_OnEntry zeroOrOne_OnExit TransitionList SEMI\r\n" +
                        "R69: State: ^ ERR SEMI\r\n" +
                        "SHIFTS, REDUCTIONS AND GOTOS\r\n" +
                        "  RBRACE: SHIFT to state S81\r\n" +
                        "  IDENTIFIER: SHIFT to state S72\r\n" +
                        "  ERR: SHIFT to state S73\r\n" +
                        "  State: GOTO state S82\r\n",

                    TerminalColumns = new ParserStateColumn[]
                    {
                        new ParserStateColumn
                        (
                            16390,	// On RBRACE
                            null,
                            false,	// shift to
                            81		// state 81
                        ),
                        new ParserStateColumn
                        (
                            16404,	// On IDENTIFIER
                            null,
                            false,	// shift to
                            72		// state 72
                        ),
                        new ParserStateColumn
                        (
                            16387,	// On ERR
                            null,
                            false,	// shift to
                            73		// state 73
                        ),
                    },

                    // GOTO non-terminals used to select next state
                    // after a REDUCE operation has taken place

                    NonterminalColumns = new ParserStateColumn[]
                    {
                        new ParserStateColumn
                        (
                            32788,	// On State
                            null,
                            false,	// goto
                            82		// state 82
                        ),
                    },
                },

                new ParserState
                {
                    StateString =
                        "State S71 CORE ITEMS:\r\n" +
                        "R37: oneToMany_State: State ^\r\n" +
                        "{\r\n" +
                        "    RBRACE,\r\n" +
                        "    IDENTIFIER,\r\n" +
                        "    ERR\r\n" +
                        "}\r\n" +
                        "SHIFTS, REDUCTIONS AND GOTOS\r\n" +
                        "  RBRACE: REDUCE by rule R37: oneToMany_State: State;\r\n" +
                        "  IDENTIFIER: REDUCE by rule R37: oneToMany_State: State;\r\n" +
                        "  ERR: REDUCE by rule R37: oneToMany_State: State;\r\n",

                    TerminalColumns = new ParserStateColumn[]
                    {
                        new ParserStateColumn
                        (
                            16390,	// On RBRACE
                            null,
                            true,	// reduce by
                            37		// production 37
                        ),
                        new ParserStateColumn
                        (
                            16404,	// On IDENTIFIER
                            null,
                            true,	// reduce by
                            37		// production 37
                        ),
                        new ParserStateColumn
                        (
                            16387,	// On ERR
                            null,
                            true,	// reduce by
                            37		// production 37
                        ),
                    },

                    NonterminalColumns = new ParserStateColumn[0],
                },

                new ParserState
                {
                    StateString =
                        "State S72 CORE ITEMS:\r\n" +
                        "R68: State: IDENTIFIER ^ COLON zeroOrOne_OnEntry zeroOrOne_OnExit TransitionList SEMI\r\n" +
                        "SHIFTS, REDUCTIONS AND GOTOS\r\n" +
                        "  COLON: SHIFT to state S83\r\n",

                    TerminalColumns = new ParserStateColumn[]
                    {
                        new ParserStateColumn
                        (
                            16394,	// On COLON
                            null,
                            false,	// shift to
                            83		// state 83
                        ),
                    },

                    NonterminalColumns = new ParserStateColumn[0],
                },

                new ParserState
                {
                    StateString =
                        "State S73 CORE ITEMS:\r\n" +
                        "R69: State: ERR ^ SEMI\r\n" +
                        "SHIFTS, REDUCTIONS AND GOTOS\r\n" +
                        "  SEMI: SHIFT to state S84\r\n",

                    TerminalColumns = new ParserStateColumn[]
                    {
                        new ParserStateColumn
                        (
                            16396,	// On SEMI
                            null,
                            false,	// shift to
                            84		// state 84
                        ),
                    },

                    NonterminalColumns = new ParserStateColumn[0],
                },

                new ParserState
                {
                    StateString =
                        "State S74 CORE ITEMS:\r\n" +
                        "R35: Rules: GRAMMAR LPAREN IDENTIFIER RPAREN LBRACE oneToMany_Rule RBRACE ^\r\n" +
                        "{\r\n" +
                        "    EOF\r\n" +
                        "}\r\n" +
                        "SHIFTS, REDUCTIONS AND GOTOS\r\n" +
                        "  EOF: REDUCE by rule R35: Rules: GRAMMAR LPAREN IDENTIFIER RPAREN LBRACE oneToMany_Rule RBRACE;\r\n",

                    TerminalColumns = new ParserStateColumn[]
                    {
                        new ParserStateColumn
                        (
                            16385,	// On EOF
                            null,
                            true,	// reduce by
                            35		// production 35
                        ),
                    },

                    NonterminalColumns = new ParserStateColumn[0],
                },

                new ParserState
                {
                    StateString =
                        "State S75 CORE ITEMS:\r\n" +
                        "R33: oneToMany_Rule: oneToMany_Rule Rule ^\r\n" +
                        "{\r\n" +
                        "    RBRACE,\r\n" +
                        "    ERR,\r\n" +
                        "    IDENTIFIER\r\n" +
                        "}\r\n" +
                        "SHIFTS, REDUCTIONS AND GOTOS\r\n" +
                        "  RBRACE: REDUCE by rule R33: oneToMany_Rule: oneToMany_Rule Rule;\r\n" +
                        "  ERR: REDUCE by rule R33: oneToMany_Rule: oneToMany_Rule Rule;\r\n" +
                        "  IDENTIFIER: REDUCE by rule R33: oneToMany_Rule: oneToMany_Rule Rule;\r\n",

                    TerminalColumns = new ParserStateColumn[]
                    {
                        new ParserStateColumn
                        (
                            16390,	// On RBRACE
                            null,
                            true,	// reduce by
                            33		// production 33
                        ),
                        new ParserStateColumn
                        (
                            16387,	// On ERR
                            null,
                            true,	// reduce by
                            33		// production 33
                        ),
                        new ParserStateColumn
                        (
                            16404,	// On IDENTIFIER
                            null,
                            true,	// reduce by
                            33		// production 33
                        ),
                    },

                    NonterminalColumns = new ParserStateColumn[0],
                },

                new ParserState
                {
                    StateString =
                        "State S76 CORE ITEMS:\r\n" +
                        "R42: Rule: RuleNameAndType ProductionList ^ zeroOrOne_Merge SEMI\r\n" +
                        "R44: ProductionList: ProductionList ^ OR Production\r\n" +
                        "CLOSURE ITEMS:\r\n" +
                        "R40: zeroOrOne_Merge: ^ Merge\r\n" +
                        "R41: zeroOrOne_Merge: ^\r\n" +
                        "{\r\n" +
                        "    SEMI\r\n" +
                        "}\r\n" +
                        "R79: Merge: ^ MERGE CODE\r\n" +
                        "SHIFTS, REDUCTIONS AND GOTOS\r\n" +
                        "  OR: SHIFT to state S86\r\n" +
                        "  MERGE: SHIFT to state S88\r\n" +
                        "  SEMI: REDUCE by rule R41: zeroOrOne_Merge:;\r\n" +
                        "  zeroOrOne_Merge: GOTO state S85\r\n" +
                        "  Merge: GOTO state S87\r\n",

                    TerminalColumns = new ParserStateColumn[]
                    {
                        new ParserStateColumn
                        (
                            16395,	// On OR
                            null,
                            false,	// shift to
                            86		// state 86
                        ),
                        new ParserStateColumn
                        (
                            16416,	// On MERGE
                            null,
                            false,	// shift to
                            88		// state 88
                        ),
                        new ParserStateColumn
                        (
                            16396,	// On SEMI
                            null,
                            true,	// reduce by
                            41		// production 41
                        ),
                    },

                    // GOTO non-terminals used to select next state
                    // after a REDUCE operation has taken place

                    NonterminalColumns = new ParserStateColumn[]
                    {
                        new ParserStateColumn
                        (
                            32793,	// On zeroOrOne_Merge
                            null,
                            false,	// goto
                            85		// state 85
                        ),
                        new ParserStateColumn
                        (
                            32792,	// On Merge
                            null,
                            false,	// goto
                            87		// state 87
                        ),
                    },
                },

                new ParserState
                {
                    StateString =
                        "State S77 CORE ITEMS:\r\n" +
                        "R45: ProductionList: Production ^\r\n" +
                        "{\r\n" +
                        "    MERGE,\r\n" +
                        "    SEMI,\r\n" +
                        "    OR\r\n" +
                        "}\r\n" +
                        "SHIFTS, REDUCTIONS AND GOTOS\r\n" +
                        "  MERGE: REDUCE by rule R45: ProductionList: Production;\r\n" +
                        "  SEMI: REDUCE by rule R45: ProductionList: Production;\r\n" +
                        "  OR: REDUCE by rule R45: ProductionList: Production;\r\n",

                    TerminalColumns = new ParserStateColumn[]
                    {
                        new ParserStateColumn
                        (
                            16416,	// On MERGE
                            null,
                            true,	// reduce by
                            45		// production 45
                        ),
                        new ParserStateColumn
                        (
                            16396,	// On SEMI
                            null,
                            true,	// reduce by
                            45		// production 45
                        ),
                        new ParserStateColumn
                        (
                            16395,	// On OR
                            null,
                            true,	// reduce by
                            45		// production 45
                        ),
                    },

                    NonterminalColumns = new ParserStateColumn[0],
                },

                new ParserState
                {
                    StateString =
                        "State S78 CORE ITEMS:\r\n" +
                        "R48: Production: zeroToMany_Element ^ zeroOrOne_CODE\r\n" +
                        "R46: zeroToMany_Element: zeroToMany_Element ^ Element\r\n" +
                        "CLOSURE ITEMS:\r\n" +
                        "R30: zeroOrOne_CODE: ^ CODE\r\n" +
                        "R31: zeroOrOne_CODE: ^\r\n" +
                        "{\r\n" +
                        "    MERGE,\r\n" +
                        "    SEMI,\r\n" +
                        "    OR\r\n" +
                        "}\r\n" +
                        "R53: Element: ^ IDENTIFIER zeroOrOne_Guard zeroOrOne_Multiplier\r\n" +
                        "SHIFTS, REDUCTIONS AND GOTOS\r\n" +
                        "  CODE: SHIFT to state S61\r\n" +
                        "  IDENTIFIER: SHIFT to state S91\r\n" +
                        "  MERGE: REDUCE by rule R31: zeroOrOne_CODE:;\r\n" +
                        "  SEMI: REDUCE by rule R31: zeroOrOne_CODE:;\r\n" +
                        "  OR: REDUCE by rule R31: zeroOrOne_CODE:;\r\n" +
                        "  zeroOrOne_CODE: GOTO state S89\r\n" +
                        "  Element: GOTO state S90\r\n",

                    TerminalColumns = new ParserStateColumn[]
                    {
                        new ParserStateColumn
                        (
                            16405,	// On CODE
                            null,
                            false,	// shift to
                            61		// state 61
                        ),
                        new ParserStateColumn
                        (
                            16404,	// On IDENTIFIER
                            null,
                            false,	// shift to
                            91		// state 91
                        ),
                        new ParserStateColumn
                        (
                            16416,	// On MERGE
                            null,
                            true,	// reduce by
                            31		// production 31
                        ),
                        new ParserStateColumn
                        (
                            16396,	// On SEMI
                            null,
                            true,	// reduce by
                            31		// production 31
                        ),
                        new ParserStateColumn
                        (
                            16395,	// On OR
                            null,
                            true,	// reduce by
                            31		// production 31
                        ),
                    },

                    // GOTO non-terminals used to select next state
                    // after a REDUCE operation has taken place

                    NonterminalColumns = new ParserStateColumn[]
                    {
                        new ParserStateColumn
                        (
                            32785,	// On zeroOrOne_CODE
                            null,
                            false,	// goto
                            89		// state 89
                        ),
                        new ParserStateColumn
                        (
                            32795,	// On Element
                            null,
                            false,	// goto
                            90		// state 90
                        ),
                    },
                },

                new ParserState
                {
                    StateString =
                        "State S79 CORE ITEMS:\r\n" +
                        "R43: Rule: ERR SEMI ^\r\n" +
                        "{\r\n" +
                        "    RBRACE,\r\n" +
                        "    ERR,\r\n" +
                        "    IDENTIFIER\r\n" +
                        "}\r\n" +
                        "SHIFTS, REDUCTIONS AND GOTOS\r\n" +
                        "  RBRACE: REDUCE by rule R43: Rule: ERR SEMI;\r\n" +
                        "  ERR: REDUCE by rule R43: Rule: ERR SEMI;\r\n" +
                        "  IDENTIFIER: REDUCE by rule R43: Rule: ERR SEMI;\r\n",

                    TerminalColumns = new ParserStateColumn[]
                    {
                        new ParserStateColumn
                        (
                            16390,	// On RBRACE
                            null,
                            true,	// reduce by
                            43		// production 43
                        ),
                        new ParserStateColumn
                        (
                            16387,	// On ERR
                            null,
                            true,	// reduce by
                            43		// production 43
                        ),
                        new ParserStateColumn
                        (
                            16404,	// On IDENTIFIER
                            null,
                            true,	// reduce by
                            43		// production 43
                        ),
                    },

                    NonterminalColumns = new ParserStateColumn[0],
                },

                new ParserState
                {
                    StateString =
                        "State S80 CORE ITEMS:\r\n" +
                        "R39: RuleNameAndType: IDENTIFIER zeroOrOne_TOKENTYPE ^ COLON\r\n" +
                        "SHIFTS, REDUCTIONS AND GOTOS\r\n" +
                        "  COLON: SHIFT to state S92\r\n",

                    TerminalColumns = new ParserStateColumn[]
                    {
                        new ParserStateColumn
                        (
                            16394,	// On COLON
                            null,
                            false,	// shift to
                            92		// state 92
                        ),
                    },

                    NonterminalColumns = new ParserStateColumn[0],
                },

                new ParserState
                {
                    StateString =
                        "State S81 CORE ITEMS:\r\n" +
                        "R38: Rules: FSM LPAREN IDENTIFIER RPAREN LBRACE oneToMany_State RBRACE ^\r\n" +
                        "{\r\n" +
                        "    EOF\r\n" +
                        "}\r\n" +
                        "SHIFTS, REDUCTIONS AND GOTOS\r\n" +
                        "  EOF: REDUCE by rule R38: Rules: FSM LPAREN IDENTIFIER RPAREN LBRACE oneToMany_State RBRACE;\r\n",

                    TerminalColumns = new ParserStateColumn[]
                    {
                        new ParserStateColumn
                        (
                            16385,	// On EOF
                            null,
                            true,	// reduce by
                            38		// production 38
                        ),
                    },

                    NonterminalColumns = new ParserStateColumn[0],
                },

                new ParserState
                {
                    StateString =
                        "State S82 CORE ITEMS:\r\n" +
                        "R36: oneToMany_State: oneToMany_State State ^\r\n" +
                        "{\r\n" +
                        "    RBRACE,\r\n" +
                        "    IDENTIFIER,\r\n" +
                        "    ERR\r\n" +
                        "}\r\n" +
                        "SHIFTS, REDUCTIONS AND GOTOS\r\n" +
                        "  RBRACE: REDUCE by rule R36: oneToMany_State: oneToMany_State State;\r\n" +
                        "  IDENTIFIER: REDUCE by rule R36: oneToMany_State: oneToMany_State State;\r\n" +
                        "  ERR: REDUCE by rule R36: oneToMany_State: oneToMany_State State;\r\n",

                    TerminalColumns = new ParserStateColumn[]
                    {
                        new ParserStateColumn
                        (
                            16390,	// On RBRACE
                            null,
                            true,	// reduce by
                            36		// production 36
                        ),
                        new ParserStateColumn
                        (
                            16404,	// On IDENTIFIER
                            null,
                            true,	// reduce by
                            36		// production 36
                        ),
                        new ParserStateColumn
                        (
                            16387,	// On ERR
                            null,
                            true,	// reduce by
                            36		// production 36
                        ),
                    },

                    NonterminalColumns = new ParserStateColumn[0],
                },

                new ParserState
                {
                    StateString =
                        "State S83 CORE ITEMS:\r\n" +
                        "R68: State: IDENTIFIER COLON ^ zeroOrOne_OnEntry zeroOrOne_OnExit TransitionList SEMI\r\n" +
                        "CLOSURE ITEMS:\r\n" +
                        "R64: zeroOrOne_OnEntry: ^ OnEntry\r\n" +
                        "R65: zeroOrOne_OnEntry: ^\r\n" +
                        "{\r\n" +
                        "    ONEXIT,\r\n" +
                        "    IDENTIFIER\r\n" +
                        "}\r\n" +
                        "R70: OnEntry: ^ ONENTRY TransitionAction\r\n" +
                        "SHIFTS, REDUCTIONS AND GOTOS\r\n" +
                        "  ONENTRY: SHIFT to state S95\r\n" +
                        "  ONEXIT: REDUCE by rule R65: zeroOrOne_OnEntry:;\r\n" +
                        "  IDENTIFIER: REDUCE by rule R65: zeroOrOne_OnEntry:;\r\n" +
                        "  zeroOrOne_OnEntry: GOTO state S93\r\n" +
                        "  OnEntry: GOTO state S94\r\n",

                    TerminalColumns = new ParserStateColumn[]
                    {
                        new ParserStateColumn
                        (
                            16413,	// On ONENTRY
                            null,
                            false,	// shift to
                            95		// state 95
                        ),
                        new ParserStateColumn
                        (
                            16414,	// On ONEXIT
                            null,
                            true,	// reduce by
                            65		// production 65
                        ),
                        new ParserStateColumn
                        (
                            16404,	// On IDENTIFIER
                            null,
                            true,	// reduce by
                            65		// production 65
                        ),
                    },

                    // GOTO non-terminals used to select next state
                    // after a REDUCE operation has taken place

                    NonterminalColumns = new ParserStateColumn[]
                    {
                        new ParserStateColumn
                        (
                            32806,	// On zeroOrOne_OnEntry
                            null,
                            false,	// goto
                            93		// state 93
                        ),
                        new ParserStateColumn
                        (
                            32805,	// On OnEntry
                            null,
                            false,	// goto
                            94		// state 94
                        ),
                    },
                },

                new ParserState
                {
                    StateString =
                        "State S84 CORE ITEMS:\r\n" +
                        "R69: State: ERR SEMI ^\r\n" +
                        "{\r\n" +
                        "    RBRACE,\r\n" +
                        "    IDENTIFIER,\r\n" +
                        "    ERR\r\n" +
                        "}\r\n" +
                        "SHIFTS, REDUCTIONS AND GOTOS\r\n" +
                        "  RBRACE: REDUCE by rule R69: State: ERR SEMI;\r\n" +
                        "  IDENTIFIER: REDUCE by rule R69: State: ERR SEMI;\r\n" +
                        "  ERR: REDUCE by rule R69: State: ERR SEMI;\r\n",

                    TerminalColumns = new ParserStateColumn[]
                    {
                        new ParserStateColumn
                        (
                            16390,	// On RBRACE
                            null,
                            true,	// reduce by
                            69		// production 69
                        ),
                        new ParserStateColumn
                        (
                            16404,	// On IDENTIFIER
                            null,
                            true,	// reduce by
                            69		// production 69
                        ),
                        new ParserStateColumn
                        (
                            16387,	// On ERR
                            null,
                            true,	// reduce by
                            69		// production 69
                        ),
                    },

                    NonterminalColumns = new ParserStateColumn[0],
                },

                new ParserState
                {
                    StateString =
                        "State S85 CORE ITEMS:\r\n" +
                        "R42: Rule: RuleNameAndType ProductionList zeroOrOne_Merge ^ SEMI\r\n" +
                        "SHIFTS, REDUCTIONS AND GOTOS\r\n" +
                        "  SEMI: SHIFT to state S96\r\n",

                    TerminalColumns = new ParserStateColumn[]
                    {
                        new ParserStateColumn
                        (
                            16396,	// On SEMI
                            null,
                            false,	// shift to
                            96		// state 96
                        ),
                    },

                    NonterminalColumns = new ParserStateColumn[0],
                },

                new ParserState
                {
                    StateString =
                        "State S86 CORE ITEMS:\r\n" +
                        "R44: ProductionList: ProductionList OR ^ Production\r\n" +
                        "CLOSURE ITEMS:\r\n" +
                        "R48: Production: ^ zeroToMany_Element zeroOrOne_CODE\r\n" +
                        "R46: zeroToMany_Element: ^ zeroToMany_Element Element\r\n" +
                        "R47: zeroToMany_Element: ^\r\n" +
                        "{\r\n" +
                        "    CODE,\r\n" +
                        "    MERGE,\r\n" +
                        "    SEMI,\r\n" +
                        "    OR,\r\n" +
                        "    IDENTIFIER\r\n" +
                        "}\r\n" +
                        "SHIFTS, REDUCTIONS AND GOTOS\r\n" +
                        "  CODE: REDUCE by rule R47: zeroToMany_Element:;\r\n" +
                        "  MERGE: REDUCE by rule R47: zeroToMany_Element:;\r\n" +
                        "  SEMI: REDUCE by rule R47: zeroToMany_Element:;\r\n" +
                        "  OR: REDUCE by rule R47: zeroToMany_Element:;\r\n" +
                        "  IDENTIFIER: REDUCE by rule R47: zeroToMany_Element:;\r\n" +
                        "  Production: GOTO state S97\r\n" +
                        "  zeroToMany_Element: GOTO state S78\r\n",

                    TerminalColumns = new ParserStateColumn[]
                    {
                        new ParserStateColumn
                        (
                            16405,	// On CODE
                            null,
                            true,	// reduce by
                            47		// production 47
                        ),
                        new ParserStateColumn
                        (
                            16416,	// On MERGE
                            null,
                            true,	// reduce by
                            47		// production 47
                        ),
                        new ParserStateColumn
                        (
                            16396,	// On SEMI
                            null,
                            true,	// reduce by
                            47		// production 47
                        ),
                        new ParserStateColumn
                        (
                            16395,	// On OR
                            null,
                            true,	// reduce by
                            47		// production 47
                        ),
                        new ParserStateColumn
                        (
                            16404,	// On IDENTIFIER
                            null,
                            true,	// reduce by
                            47		// production 47
                        ),
                    },

                    // GOTO non-terminals used to select next state
                    // after a REDUCE operation has taken place

                    NonterminalColumns = new ParserStateColumn[]
                    {
                        new ParserStateColumn
                        (
                            32794,	// On Production
                            null,
                            false,	// goto
                            97		// state 97
                        ),
                        new ParserStateColumn
                        (
                            32796,	// On zeroToMany_Element
                            null,
                            false,	// goto
                            78		// state 78
                        ),
                    },
                },

                new ParserState
                {
                    StateString =
                        "State S87 CORE ITEMS:\r\n" +
                        "R40: zeroOrOne_Merge: Merge ^\r\n" +
                        "{\r\n" +
                        "    SEMI\r\n" +
                        "}\r\n" +
                        "SHIFTS, REDUCTIONS AND GOTOS\r\n" +
                        "  SEMI: REDUCE by rule R40: zeroOrOne_Merge: Merge;\r\n",

                    TerminalColumns = new ParserStateColumn[]
                    {
                        new ParserStateColumn
                        (
                            16396,	// On SEMI
                            null,
                            true,	// reduce by
                            40		// production 40
                        ),
                    },

                    NonterminalColumns = new ParserStateColumn[0],
                },

                new ParserState
                {
                    StateString =
                        "State S88 CORE ITEMS:\r\n" +
                        "R79: Merge: MERGE ^ CODE\r\n" +
                        "SHIFTS, REDUCTIONS AND GOTOS\r\n" +
                        "  CODE: SHIFT to state S98\r\n",

                    TerminalColumns = new ParserStateColumn[]
                    {
                        new ParserStateColumn
                        (
                            16405,	// On CODE
                            null,
                            false,	// shift to
                            98		// state 98
                        ),
                    },

                    NonterminalColumns = new ParserStateColumn[0],
                },

                new ParserState
                {
                    StateString =
                        "State S89 CORE ITEMS:\r\n" +
                        "R48: Production: zeroToMany_Element zeroOrOne_CODE ^\r\n" +
                        "{\r\n" +
                        "    MERGE,\r\n" +
                        "    SEMI,\r\n" +
                        "    OR\r\n" +
                        "}\r\n" +
                        "SHIFTS, REDUCTIONS AND GOTOS\r\n" +
                        "  MERGE: REDUCE by rule R48: Production: zeroToMany_Element zeroOrOne_CODE;\r\n" +
                        "  SEMI: REDUCE by rule R48: Production: zeroToMany_Element zeroOrOne_CODE;\r\n" +
                        "  OR: REDUCE by rule R48: Production: zeroToMany_Element zeroOrOne_CODE;\r\n",

                    TerminalColumns = new ParserStateColumn[]
                    {
                        new ParserStateColumn
                        (
                            16416,	// On MERGE
                            null,
                            true,	// reduce by
                            48		// production 48
                        ),
                        new ParserStateColumn
                        (
                            16396,	// On SEMI
                            null,
                            true,	// reduce by
                            48		// production 48
                        ),
                        new ParserStateColumn
                        (
                            16395,	// On OR
                            null,
                            true,	// reduce by
                            48		// production 48
                        ),
                    },

                    NonterminalColumns = new ParserStateColumn[0],
                },

                new ParserState
                {
                    StateString =
                        "State S90 CORE ITEMS:\r\n" +
                        "R46: zeroToMany_Element: zeroToMany_Element Element ^\r\n" +
                        "{\r\n" +
                        "    CODE,\r\n" +
                        "    MERGE,\r\n" +
                        "    SEMI,\r\n" +
                        "    OR,\r\n" +
                        "    IDENTIFIER\r\n" +
                        "}\r\n" +
                        "SHIFTS, REDUCTIONS AND GOTOS\r\n" +
                        "  CODE: REDUCE by rule R46: zeroToMany_Element: zeroToMany_Element Element;\r\n" +
                        "  MERGE: REDUCE by rule R46: zeroToMany_Element: zeroToMany_Element Element;\r\n" +
                        "  SEMI: REDUCE by rule R46: zeroToMany_Element: zeroToMany_Element Element;\r\n" +
                        "  OR: REDUCE by rule R46: zeroToMany_Element: zeroToMany_Element Element;\r\n" +
                        "  IDENTIFIER: REDUCE by rule R46: zeroToMany_Element: zeroToMany_Element Element;\r\n",

                    TerminalColumns = new ParserStateColumn[]
                    {
                        new ParserStateColumn
                        (
                            16405,	// On CODE
                            null,
                            true,	// reduce by
                            46		// production 46
                        ),
                        new ParserStateColumn
                        (
                            16416,	// On MERGE
                            null,
                            true,	// reduce by
                            46		// production 46
                        ),
                        new ParserStateColumn
                        (
                            16396,	// On SEMI
                            null,
                            true,	// reduce by
                            46		// production 46
                        ),
                        new ParserStateColumn
                        (
                            16395,	// On OR
                            null,
                            true,	// reduce by
                            46		// production 46
                        ),
                        new ParserStateColumn
                        (
                            16404,	// On IDENTIFIER
                            null,
                            true,	// reduce by
                            46		// production 46
                        ),
                    },

                    NonterminalColumns = new ParserStateColumn[0],
                },

                new ParserState
                {
                    StateString =
                        "State S91 CORE ITEMS:\r\n" +
                        "R53: Element: IDENTIFIER ^ zeroOrOne_Guard zeroOrOne_Multiplier\r\n" +
                        "CLOSURE ITEMS:\r\n" +
                        "R49: zeroOrOne_Guard: ^ Guard\r\n" +
                        "R50: zeroOrOne_Guard: ^\r\n" +
                        "{\r\n" +
                        "    MULTIPLICITY,\r\n" +
                        "    CODE,\r\n" +
                        "    MERGE,\r\n" +
                        "    SEMI,\r\n" +
                        "    OR,\r\n" +
                        "    IDENTIFIER\r\n" +
                        "}\r\n" +
                        "R54: Guard: ^ LBRACK CondExpr RBRACK\r\n" +
                        "SHIFTS, REDUCTIONS AND GOTOS\r\n" +
                        "  LBRACK: SHIFT to state S101\r\n" +
                        "  MULTIPLICITY: REDUCE by rule R50: zeroOrOne_Guard:;\r\n" +
                        "  CODE: REDUCE by rule R50: zeroOrOne_Guard:;\r\n" +
                        "  MERGE: REDUCE by rule R50: zeroOrOne_Guard:;\r\n" +
                        "  SEMI: REDUCE by rule R50: zeroOrOne_Guard:;\r\n" +
                        "  OR: REDUCE by rule R50: zeroOrOne_Guard:;\r\n" +
                        "  IDENTIFIER: REDUCE by rule R50: zeroOrOne_Guard:;\r\n" +
                        "  zeroOrOne_Guard: GOTO state S99\r\n" +
                        "  Guard: GOTO state S100\r\n",

                    TerminalColumns = new ParserStateColumn[]
                    {
                        new ParserStateColumn
                        (
                            16397,	// On LBRACK
                            null,
                            false,	// shift to
                            101		// state 101
                        ),
                        new ParserStateColumn
                        (
                            16417,	// On MULTIPLICITY
                            null,
                            true,	// reduce by
                            50		// production 50
                        ),
                        new ParserStateColumn
                        (
                            16405,	// On CODE
                            null,
                            true,	// reduce by
                            50		// production 50
                        ),
                        new ParserStateColumn
                        (
                            16416,	// On MERGE
                            null,
                            true,	// reduce by
                            50		// production 50
                        ),
                        new ParserStateColumn
                        (
                            16396,	// On SEMI
                            null,
                            true,	// reduce by
                            50		// production 50
                        ),
                        new ParserStateColumn
                        (
                            16395,	// On OR
                            null,
                            true,	// reduce by
                            50		// production 50
                        ),
                        new ParserStateColumn
                        (
                            16404,	// On IDENTIFIER
                            null,
                            true,	// reduce by
                            50		// production 50
                        ),
                    },

                    // GOTO non-terminals used to select next state
                    // after a REDUCE operation has taken place

                    NonterminalColumns = new ParserStateColumn[]
                    {
                        new ParserStateColumn
                        (
                            32798,	// On zeroOrOne_Guard
                            null,
                            false,	// goto
                            99		// state 99
                        ),
                        new ParserStateColumn
                        (
                            32797,	// On Guard
                            null,
                            false,	// goto
                            100		// state 100
                        ),
                    },
                },

                new ParserState
                {
                    StateString =
                        "State S92 CORE ITEMS:\r\n" +
                        "R39: RuleNameAndType: IDENTIFIER zeroOrOne_TOKENTYPE COLON ^\r\n" +
                        "{\r\n" +
                        "    CODE,\r\n" +
                        "    OR,\r\n" +
                        "    IDENTIFIER,\r\n" +
                        "    MERGE,\r\n" +
                        "    SEMI\r\n" +
                        "}\r\n" +
                        "SHIFTS, REDUCTIONS AND GOTOS\r\n" +
                        "  CODE: REDUCE by rule R39: RuleNameAndType: IDENTIFIER zeroOrOne_TOKENTYPE COLON;\r\n" +
                        "  OR: REDUCE by rule R39: RuleNameAndType: IDENTIFIER zeroOrOne_TOKENTYPE COLON;\r\n" +
                        "  IDENTIFIER: REDUCE by rule R39: RuleNameAndType: IDENTIFIER zeroOrOne_TOKENTYPE COLON;\r\n" +
                        "  MERGE: REDUCE by rule R39: RuleNameAndType: IDENTIFIER zeroOrOne_TOKENTYPE COLON;\r\n" +
                        "  SEMI: REDUCE by rule R39: RuleNameAndType: IDENTIFIER zeroOrOne_TOKENTYPE COLON;\r\n",

                    TerminalColumns = new ParserStateColumn[]
                    {
                        new ParserStateColumn
                        (
                            16405,	// On CODE
                            null,
                            true,	// reduce by
                            39		// production 39
                        ),
                        new ParserStateColumn
                        (
                            16395,	// On OR
                            null,
                            true,	// reduce by
                            39		// production 39
                        ),
                        new ParserStateColumn
                        (
                            16404,	// On IDENTIFIER
                            null,
                            true,	// reduce by
                            39		// production 39
                        ),
                        new ParserStateColumn
                        (
                            16416,	// On MERGE
                            null,
                            true,	// reduce by
                            39		// production 39
                        ),
                        new ParserStateColumn
                        (
                            16396,	// On SEMI
                            null,
                            true,	// reduce by
                            39		// production 39
                        ),
                    },

                    NonterminalColumns = new ParserStateColumn[0],
                },

                new ParserState
                {
                    StateString =
                        "State S93 CORE ITEMS:\r\n" +
                        "R68: State: IDENTIFIER COLON zeroOrOne_OnEntry ^ zeroOrOne_OnExit TransitionList SEMI\r\n" +
                        "CLOSURE ITEMS:\r\n" +
                        "R66: zeroOrOne_OnExit: ^ OnExit\r\n" +
                        "R67: zeroOrOne_OnExit: ^\r\n" +
                        "{\r\n" +
                        "    IDENTIFIER\r\n" +
                        "}\r\n" +
                        "R71: OnExit: ^ ONEXIT TransitionAction\r\n" +
                        "SHIFTS, REDUCTIONS AND GOTOS\r\n" +
                        "  ONEXIT: SHIFT to state S104\r\n" +
                        "  IDENTIFIER: REDUCE by rule R67: zeroOrOne_OnExit:;\r\n" +
                        "  zeroOrOne_OnExit: GOTO state S102\r\n" +
                        "  OnExit: GOTO state S103\r\n",

                    TerminalColumns = new ParserStateColumn[]
                    {
                        new ParserStateColumn
                        (
                            16414,	// On ONEXIT
                            null,
                            false,	// shift to
                            104		// state 104
                        ),
                        new ParserStateColumn
                        (
                            16404,	// On IDENTIFIER
                            null,
                            true,	// reduce by
                            67		// production 67
                        ),
                    },

                    // GOTO non-terminals used to select next state
                    // after a REDUCE operation has taken place

                    NonterminalColumns = new ParserStateColumn[]
                    {
                        new ParserStateColumn
                        (
                            32808,	// On zeroOrOne_OnExit
                            null,
                            false,	// goto
                            102		// state 102
                        ),
                        new ParserStateColumn
                        (
                            32807,	// On OnExit
                            null,
                            false,	// goto
                            103		// state 103
                        ),
                    },
                },

                new ParserState
                {
                    StateString =
                        "State S94 CORE ITEMS:\r\n" +
                        "R64: zeroOrOne_OnEntry: OnEntry ^\r\n" +
                        "{\r\n" +
                        "    ONEXIT,\r\n" +
                        "    IDENTIFIER\r\n" +
                        "}\r\n" +
                        "SHIFTS, REDUCTIONS AND GOTOS\r\n" +
                        "  ONEXIT: REDUCE by rule R64: zeroOrOne_OnEntry: OnEntry;\r\n" +
                        "  IDENTIFIER: REDUCE by rule R64: zeroOrOne_OnEntry: OnEntry;\r\n",

                    TerminalColumns = new ParserStateColumn[]
                    {
                        new ParserStateColumn
                        (
                            16414,	// On ONEXIT
                            null,
                            true,	// reduce by
                            64		// production 64
                        ),
                        new ParserStateColumn
                        (
                            16404,	// On IDENTIFIER
                            null,
                            true,	// reduce by
                            64		// production 64
                        ),
                    },

                    NonterminalColumns = new ParserStateColumn[0],
                },

                new ParserState
                {
                    StateString =
                        "State S95 CORE ITEMS:\r\n" +
                        "R70: OnEntry: ONENTRY ^ TransitionAction\r\n" +
                        "CLOSURE ITEMS:\r\n" +
                        "R78: TransitionAction: ^ CODE\r\n" +
                        "SHIFTS, REDUCTIONS AND GOTOS\r\n" +
                        "  CODE: SHIFT to state S106\r\n" +
                        "  TransitionAction: GOTO state S105\r\n",

                    TerminalColumns = new ParserStateColumn[]
                    {
                        new ParserStateColumn
                        (
                            16405,	// On CODE
                            null,
                            false,	// shift to
                            106		// state 106
                        ),
                    },

                    // GOTO non-terminals used to select next state
                    // after a REDUCE operation has taken place

                    NonterminalColumns = new ParserStateColumn[]
                    {
                        new ParserStateColumn
                        (
                            32810,	// On TransitionAction
                            null,
                            false,	// goto
                            105		// state 105
                        ),
                    },
                },

                new ParserState
                {
                    StateString =
                        "State S96 CORE ITEMS:\r\n" +
                        "R42: Rule: RuleNameAndType ProductionList zeroOrOne_Merge SEMI ^\r\n" +
                        "{\r\n" +
                        "    RBRACE,\r\n" +
                        "    ERR,\r\n" +
                        "    IDENTIFIER\r\n" +
                        "}\r\n" +
                        "SHIFTS, REDUCTIONS AND GOTOS\r\n" +
                        "  RBRACE: REDUCE by rule R42: Rule: RuleNameAndType ProductionList zeroOrOne_Merge SEMI;\r\n" +
                        "  ERR: REDUCE by rule R42: Rule: RuleNameAndType ProductionList zeroOrOne_Merge SEMI;\r\n" +
                        "  IDENTIFIER: REDUCE by rule R42: Rule: RuleNameAndType ProductionList zeroOrOne_Merge SEMI;\r\n",

                    TerminalColumns = new ParserStateColumn[]
                    {
                        new ParserStateColumn
                        (
                            16390,	// On RBRACE
                            null,
                            true,	// reduce by
                            42		// production 42
                        ),
                        new ParserStateColumn
                        (
                            16387,	// On ERR
                            null,
                            true,	// reduce by
                            42		// production 42
                        ),
                        new ParserStateColumn
                        (
                            16404,	// On IDENTIFIER
                            null,
                            true,	// reduce by
                            42		// production 42
                        ),
                    },

                    NonterminalColumns = new ParserStateColumn[0],
                },

                new ParserState
                {
                    StateString =
                        "State S97 CORE ITEMS:\r\n" +
                        "R44: ProductionList: ProductionList OR Production ^\r\n" +
                        "{\r\n" +
                        "    MERGE,\r\n" +
                        "    SEMI,\r\n" +
                        "    OR\r\n" +
                        "}\r\n" +
                        "SHIFTS, REDUCTIONS AND GOTOS\r\n" +
                        "  MERGE: REDUCE by rule R44: ProductionList: ProductionList OR Production;\r\n" +
                        "  SEMI: REDUCE by rule R44: ProductionList: ProductionList OR Production;\r\n" +
                        "  OR: REDUCE by rule R44: ProductionList: ProductionList OR Production;\r\n",

                    TerminalColumns = new ParserStateColumn[]
                    {
                        new ParserStateColumn
                        (
                            16416,	// On MERGE
                            null,
                            true,	// reduce by
                            44		// production 44
                        ),
                        new ParserStateColumn
                        (
                            16396,	// On SEMI
                            null,
                            true,	// reduce by
                            44		// production 44
                        ),
                        new ParserStateColumn
                        (
                            16395,	// On OR
                            null,
                            true,	// reduce by
                            44		// production 44
                        ),
                    },

                    NonterminalColumns = new ParserStateColumn[0],
                },

                new ParserState
                {
                    StateString =
                        "State S98 CORE ITEMS:\r\n" +
                        "R79: Merge: MERGE CODE ^\r\n" +
                        "{\r\n" +
                        "    SEMI\r\n" +
                        "}\r\n" +
                        "SHIFTS, REDUCTIONS AND GOTOS\r\n" +
                        "  SEMI: REDUCE by rule R79: Merge: MERGE CODE;\r\n",

                    TerminalColumns = new ParserStateColumn[]
                    {
                        new ParserStateColumn
                        (
                            16396,	// On SEMI
                            null,
                            true,	// reduce by
                            79		// production 79
                        ),
                    },

                    NonterminalColumns = new ParserStateColumn[0],
                },

                new ParserState
                {
                    StateString =
                        "State S99 CORE ITEMS:\r\n" +
                        "R53: Element: IDENTIFIER zeroOrOne_Guard ^ zeroOrOne_Multiplier\r\n" +
                        "CLOSURE ITEMS:\r\n" +
                        "R51: zeroOrOne_Multiplier: ^ Multiplier\r\n" +
                        "R52: zeroOrOne_Multiplier: ^\r\n" +
                        "{\r\n" +
                        "    CODE,\r\n" +
                        "    MERGE,\r\n" +
                        "    SEMI,\r\n" +
                        "    OR,\r\n" +
                        "    IDENTIFIER\r\n" +
                        "}\r\n" +
                        "R55: Multiplier: ^ MULTIPLICITY zeroOrOne_Guard\r\n" +
                        "SHIFTS, REDUCTIONS AND GOTOS\r\n" +
                        "  MULTIPLICITY: SHIFT to state S109\r\n" +
                        "  CODE: REDUCE by rule R52: zeroOrOne_Multiplier:;\r\n" +
                        "  MERGE: REDUCE by rule R52: zeroOrOne_Multiplier:;\r\n" +
                        "  SEMI: REDUCE by rule R52: zeroOrOne_Multiplier:;\r\n" +
                        "  OR: REDUCE by rule R52: zeroOrOne_Multiplier:;\r\n" +
                        "  IDENTIFIER: REDUCE by rule R52: zeroOrOne_Multiplier:;\r\n" +
                        "  zeroOrOne_Multiplier: GOTO state S107\r\n" +
                        "  Multiplier: GOTO state S108\r\n",

                    TerminalColumns = new ParserStateColumn[]
                    {
                        new ParserStateColumn
                        (
                            16417,	// On MULTIPLICITY
                            null,
                            false,	// shift to
                            109		// state 109
                        ),
                        new ParserStateColumn
                        (
                            16405,	// On CODE
                            null,
                            true,	// reduce by
                            52		// production 52
                        ),
                        new ParserStateColumn
                        (
                            16416,	// On MERGE
                            null,
                            true,	// reduce by
                            52		// production 52
                        ),
                        new ParserStateColumn
                        (
                            16396,	// On SEMI
                            null,
                            true,	// reduce by
                            52		// production 52
                        ),
                        new ParserStateColumn
                        (
                            16395,	// On OR
                            null,
                            true,	// reduce by
                            52		// production 52
                        ),
                        new ParserStateColumn
                        (
                            16404,	// On IDENTIFIER
                            null,
                            true,	// reduce by
                            52		// production 52
                        ),
                    },

                    // GOTO non-terminals used to select next state
                    // after a REDUCE operation has taken place

                    NonterminalColumns = new ParserStateColumn[]
                    {
                        new ParserStateColumn
                        (
                            32800,	// On zeroOrOne_Multiplier
                            null,
                            false,	// goto
                            107		// state 107
                        ),
                        new ParserStateColumn
                        (
                            32799,	// On Multiplier
                            null,
                            false,	// goto
                            108		// state 108
                        ),
                    },
                },

                new ParserState
                {
                    StateString =
                        "State S100 CORE ITEMS:\r\n" +
                        "R49: zeroOrOne_Guard: Guard ^\r\n" +
                        "{\r\n" +
                        "    MULTIPLICITY,\r\n" +
                        "    CODE,\r\n" +
                        "    MERGE,\r\n" +
                        "    SEMI,\r\n" +
                        "    OR,\r\n" +
                        "    IDENTIFIER\r\n" +
                        "}\r\n" +
                        "SHIFTS, REDUCTIONS AND GOTOS\r\n" +
                        "  MULTIPLICITY: REDUCE by rule R49: zeroOrOne_Guard: Guard;\r\n" +
                        "  CODE: REDUCE by rule R49: zeroOrOne_Guard: Guard;\r\n" +
                        "  MERGE: REDUCE by rule R49: zeroOrOne_Guard: Guard;\r\n" +
                        "  SEMI: REDUCE by rule R49: zeroOrOne_Guard: Guard;\r\n" +
                        "  OR: REDUCE by rule R49: zeroOrOne_Guard: Guard;\r\n" +
                        "  IDENTIFIER: REDUCE by rule R49: zeroOrOne_Guard: Guard;\r\n",

                    TerminalColumns = new ParserStateColumn[]
                    {
                        new ParserStateColumn
                        (
                            16417,	// On MULTIPLICITY
                            null,
                            true,	// reduce by
                            49		// production 49
                        ),
                        new ParserStateColumn
                        (
                            16405,	// On CODE
                            null,
                            true,	// reduce by
                            49		// production 49
                        ),
                        new ParserStateColumn
                        (
                            16416,	// On MERGE
                            null,
                            true,	// reduce by
                            49		// production 49
                        ),
                        new ParserStateColumn
                        (
                            16396,	// On SEMI
                            null,
                            true,	// reduce by
                            49		// production 49
                        ),
                        new ParserStateColumn
                        (
                            16395,	// On OR
                            null,
                            true,	// reduce by
                            49		// production 49
                        ),
                        new ParserStateColumn
                        (
                            16404,	// On IDENTIFIER
                            null,
                            true,	// reduce by
                            49		// production 49
                        ),
                    },

                    NonterminalColumns = new ParserStateColumn[0],
                },

                new ParserState
                {
                    StateString =
                        "State S101 CORE ITEMS:\r\n" +
                        "R54: Guard: LBRACK ^ CondExpr RBRACK\r\n" +
                        "CLOSURE ITEMS:\r\n" +
                        "R56: CondExpr: ^ CondExpr OR OrableExpr\r\n" +
                        "R57: CondExpr: ^ OrableExpr\r\n" +
                        "R58: OrableExpr: ^ OrableExpr AND AndableExpr\r\n" +
                        "R59: OrableExpr: ^ AndableExpr\r\n" +
                        "R60: AndableExpr: ^ RootExpr\r\n" +
                        "R61: AndableExpr: ^ NOT RootExpr\r\n" +
                        "R62: RootExpr: ^ IDENTIFIER\r\n" +
                        "R63: RootExpr: ^ LPAREN CondExpr RPAREN\r\n" +
                        "SHIFTS, REDUCTIONS AND GOTOS\r\n" +
                        "  NOT: SHIFT to state S114\r\n" +
                        "  IDENTIFIER: SHIFT to state S115\r\n" +
                        "  LPAREN: SHIFT to state S116\r\n" +
                        "  CondExpr: GOTO state S110\r\n" +
                        "  OrableExpr: GOTO state S111\r\n" +
                        "  AndableExpr: GOTO state S112\r\n" +
                        "  RootExpr: GOTO state S113\r\n",

                    TerminalColumns = new ParserStateColumn[]
                    {
                        new ParserStateColumn
                        (
                            16400,	// On NOT
                            null,
                            false,	// shift to
                            114		// state 114
                        ),
                        new ParserStateColumn
                        (
                            16404,	// On IDENTIFIER
                            null,
                            false,	// shift to
                            115		// state 115
                        ),
                        new ParserStateColumn
                        (
                            16391,	// On LPAREN
                            null,
                            false,	// shift to
                            116		// state 116
                        ),
                    },

                    // GOTO non-terminals used to select next state
                    // after a REDUCE operation has taken place

                    NonterminalColumns = new ParserStateColumn[]
                    {
                        new ParserStateColumn
                        (
                            32801,	// On CondExpr
                            null,
                            false,	// goto
                            110		// state 110
                        ),
                        new ParserStateColumn
                        (
                            32802,	// On OrableExpr
                            null,
                            false,	// goto
                            111		// state 111
                        ),
                        new ParserStateColumn
                        (
                            32803,	// On AndableExpr
                            null,
                            false,	// goto
                            112		// state 112
                        ),
                        new ParserStateColumn
                        (
                            32804,	// On RootExpr
                            null,
                            false,	// goto
                            113		// state 113
                        ),
                    },
                },

                new ParserState
                {
                    StateString =
                        "State S102 CORE ITEMS:\r\n" +
                        "R68: State: IDENTIFIER COLON zeroOrOne_OnEntry zeroOrOne_OnExit ^ TransitionList SEMI\r\n" +
                        "CLOSURE ITEMS:\r\n" +
                        "R72: TransitionList: ^ TransitionList OR Transition\r\n" +
                        "R73: TransitionList: ^ Transition\r\n" +
                        "R76: Transition: ^ Element IDENTIFIER zeroOrOne_TransitionAction\r\n" +
                        "R77: Transition: ^ Element zeroOrOne_TransitionAction\r\n" +
                        "R53: Element: ^ IDENTIFIER zeroOrOne_Guard zeroOrOne_Multiplier\r\n" +
                        "SHIFTS, REDUCTIONS AND GOTOS\r\n" +
                        "  IDENTIFIER: SHIFT to state S91\r\n" +
                        "  TransitionList: GOTO state S117\r\n" +
                        "  Transition: GOTO state S118\r\n" +
                        "  Element: GOTO state S119\r\n",

                    TerminalColumns = new ParserStateColumn[]
                    {
                        new ParserStateColumn
                        (
                            16404,	// On IDENTIFIER
                            null,
                            false,	// shift to
                            91		// state 91
                        ),
                    },

                    // GOTO non-terminals used to select next state
                    // after a REDUCE operation has taken place

                    NonterminalColumns = new ParserStateColumn[]
                    {
                        new ParserStateColumn
                        (
                            32809,	// On TransitionList
                            null,
                            false,	// goto
                            117		// state 117
                        ),
                        new ParserStateColumn
                        (
                            32811,	// On Transition
                            null,
                            false,	// goto
                            118		// state 118
                        ),
                        new ParserStateColumn
                        (
                            32795,	// On Element
                            null,
                            false,	// goto
                            119		// state 119
                        ),
                    },
                },

                new ParserState
                {
                    StateString =
                        "State S103 CORE ITEMS:\r\n" +
                        "R66: zeroOrOne_OnExit: OnExit ^\r\n" +
                        "{\r\n" +
                        "    IDENTIFIER\r\n" +
                        "}\r\n" +
                        "SHIFTS, REDUCTIONS AND GOTOS\r\n" +
                        "  IDENTIFIER: REDUCE by rule R66: zeroOrOne_OnExit: OnExit;\r\n",

                    TerminalColumns = new ParserStateColumn[]
                    {
                        new ParserStateColumn
                        (
                            16404,	// On IDENTIFIER
                            null,
                            true,	// reduce by
                            66		// production 66
                        ),
                    },

                    NonterminalColumns = new ParserStateColumn[0],
                },

                new ParserState
                {
                    StateString =
                        "State S104 CORE ITEMS:\r\n" +
                        "R71: OnExit: ONEXIT ^ TransitionAction\r\n" +
                        "CLOSURE ITEMS:\r\n" +
                        "R78: TransitionAction: ^ CODE\r\n" +
                        "SHIFTS, REDUCTIONS AND GOTOS\r\n" +
                        "  CODE: SHIFT to state S106\r\n" +
                        "  TransitionAction: GOTO state S120\r\n",

                    TerminalColumns = new ParserStateColumn[]
                    {
                        new ParserStateColumn
                        (
                            16405,	// On CODE
                            null,
                            false,	// shift to
                            106		// state 106
                        ),
                    },

                    // GOTO non-terminals used to select next state
                    // after a REDUCE operation has taken place

                    NonterminalColumns = new ParserStateColumn[]
                    {
                        new ParserStateColumn
                        (
                            32810,	// On TransitionAction
                            null,
                            false,	// goto
                            120		// state 120
                        ),
                    },
                },

                new ParserState
                {
                    StateString =
                        "State S105 CORE ITEMS:\r\n" +
                        "R70: OnEntry: ONENTRY TransitionAction ^\r\n" +
                        "{\r\n" +
                        "    ONEXIT,\r\n" +
                        "    IDENTIFIER\r\n" +
                        "}\r\n" +
                        "SHIFTS, REDUCTIONS AND GOTOS\r\n" +
                        "  ONEXIT: REDUCE by rule R70: OnEntry: ONENTRY TransitionAction;\r\n" +
                        "  IDENTIFIER: REDUCE by rule R70: OnEntry: ONENTRY TransitionAction;\r\n",

                    TerminalColumns = new ParserStateColumn[]
                    {
                        new ParserStateColumn
                        (
                            16414,	// On ONEXIT
                            null,
                            true,	// reduce by
                            70		// production 70
                        ),
                        new ParserStateColumn
                        (
                            16404,	// On IDENTIFIER
                            null,
                            true,	// reduce by
                            70		// production 70
                        ),
                    },

                    NonterminalColumns = new ParserStateColumn[0],
                },

                new ParserState
                {
                    StateString =
                        "State S106 CORE ITEMS:\r\n" +
                        "R78: TransitionAction: CODE ^\r\n" +
                        "{\r\n" +
                        "    ONEXIT,\r\n" +
                        "    IDENTIFIER,\r\n" +
                        "    SEMI,\r\n" +
                        "    OR\r\n" +
                        "}\r\n" +
                        "SHIFTS, REDUCTIONS AND GOTOS\r\n" +
                        "  ONEXIT: REDUCE by rule R78: TransitionAction: CODE;\r\n" +
                        "  IDENTIFIER: REDUCE by rule R78: TransitionAction: CODE;\r\n" +
                        "  SEMI: REDUCE by rule R78: TransitionAction: CODE;\r\n" +
                        "  OR: REDUCE by rule R78: TransitionAction: CODE;\r\n",

                    TerminalColumns = new ParserStateColumn[]
                    {
                        new ParserStateColumn
                        (
                            16414,	// On ONEXIT
                            null,
                            true,	// reduce by
                            78		// production 78
                        ),
                        new ParserStateColumn
                        (
                            16404,	// On IDENTIFIER
                            null,
                            true,	// reduce by
                            78		// production 78
                        ),
                        new ParserStateColumn
                        (
                            16396,	// On SEMI
                            null,
                            true,	// reduce by
                            78		// production 78
                        ),
                        new ParserStateColumn
                        (
                            16395,	// On OR
                            null,
                            true,	// reduce by
                            78		// production 78
                        ),
                    },

                    NonterminalColumns = new ParserStateColumn[0],
                },

                new ParserState
                {
                    StateString =
                        "State S107 CORE ITEMS:\r\n" +
                        "R53: Element: IDENTIFIER zeroOrOne_Guard zeroOrOne_Multiplier ^\r\n" +
                        "{\r\n" +
                        "    CODE,\r\n" +
                        "    MERGE,\r\n" +
                        "    SEMI,\r\n" +
                        "    OR,\r\n" +
                        "    IDENTIFIER\r\n" +
                        "}\r\n" +
                        "SHIFTS, REDUCTIONS AND GOTOS\r\n" +
                        "  CODE: REDUCE by rule R53: Element: IDENTIFIER zeroOrOne_Guard zeroOrOne_Multiplier;\r\n" +
                        "  MERGE: REDUCE by rule R53: Element: IDENTIFIER zeroOrOne_Guard zeroOrOne_Multiplier;\r\n" +
                        "  SEMI: REDUCE by rule R53: Element: IDENTIFIER zeroOrOne_Guard zeroOrOne_Multiplier;\r\n" +
                        "  OR: REDUCE by rule R53: Element: IDENTIFIER zeroOrOne_Guard zeroOrOne_Multiplier;\r\n" +
                        "  IDENTIFIER: REDUCE by rule R53: Element: IDENTIFIER zeroOrOne_Guard zeroOrOne_Multiplier;\r\n",

                    TerminalColumns = new ParserStateColumn[]
                    {
                        new ParserStateColumn
                        (
                            16405,	// On CODE
                            null,
                            true,	// reduce by
                            53		// production 53
                        ),
                        new ParserStateColumn
                        (
                            16416,	// On MERGE
                            null,
                            true,	// reduce by
                            53		// production 53
                        ),
                        new ParserStateColumn
                        (
                            16396,	// On SEMI
                            null,
                            true,	// reduce by
                            53		// production 53
                        ),
                        new ParserStateColumn
                        (
                            16395,	// On OR
                            null,
                            true,	// reduce by
                            53		// production 53
                        ),
                        new ParserStateColumn
                        (
                            16404,	// On IDENTIFIER
                            null,
                            true,	// reduce by
                            53		// production 53
                        ),
                    },

                    NonterminalColumns = new ParserStateColumn[0],
                },

                new ParserState
                {
                    StateString =
                        "State S108 CORE ITEMS:\r\n" +
                        "R51: zeroOrOne_Multiplier: Multiplier ^\r\n" +
                        "{\r\n" +
                        "    CODE,\r\n" +
                        "    MERGE,\r\n" +
                        "    SEMI,\r\n" +
                        "    OR,\r\n" +
                        "    IDENTIFIER\r\n" +
                        "}\r\n" +
                        "SHIFTS, REDUCTIONS AND GOTOS\r\n" +
                        "  CODE: REDUCE by rule R51: zeroOrOne_Multiplier: Multiplier;\r\n" +
                        "  MERGE: REDUCE by rule R51: zeroOrOne_Multiplier: Multiplier;\r\n" +
                        "  SEMI: REDUCE by rule R51: zeroOrOne_Multiplier: Multiplier;\r\n" +
                        "  OR: REDUCE by rule R51: zeroOrOne_Multiplier: Multiplier;\r\n" +
                        "  IDENTIFIER: REDUCE by rule R51: zeroOrOne_Multiplier: Multiplier;\r\n",

                    TerminalColumns = new ParserStateColumn[]
                    {
                        new ParserStateColumn
                        (
                            16405,	// On CODE
                            null,
                            true,	// reduce by
                            51		// production 51
                        ),
                        new ParserStateColumn
                        (
                            16416,	// On MERGE
                            null,
                            true,	// reduce by
                            51		// production 51
                        ),
                        new ParserStateColumn
                        (
                            16396,	// On SEMI
                            null,
                            true,	// reduce by
                            51		// production 51
                        ),
                        new ParserStateColumn
                        (
                            16395,	// On OR
                            null,
                            true,	// reduce by
                            51		// production 51
                        ),
                        new ParserStateColumn
                        (
                            16404,	// On IDENTIFIER
                            null,
                            true,	// reduce by
                            51		// production 51
                        ),
                    },

                    NonterminalColumns = new ParserStateColumn[0],
                },

                new ParserState
                {
                    StateString =
                        "State S109 CORE ITEMS:\r\n" +
                        "R55: Multiplier: MULTIPLICITY ^ zeroOrOne_Guard\r\n" +
                        "CLOSURE ITEMS:\r\n" +
                        "R49: zeroOrOne_Guard: ^ Guard\r\n" +
                        "R50: zeroOrOne_Guard: ^\r\n" +
                        "{\r\n" +
                        "    CODE,\r\n" +
                        "    MERGE,\r\n" +
                        "    SEMI,\r\n" +
                        "    OR,\r\n" +
                        "    IDENTIFIER\r\n" +
                        "}\r\n" +
                        "R54: Guard: ^ LBRACK CondExpr RBRACK\r\n" +
                        "SHIFTS, REDUCTIONS AND GOTOS\r\n" +
                        "  LBRACK: SHIFT to state S101\r\n" +
                        "  CODE: REDUCE by rule R50: zeroOrOne_Guard:;\r\n" +
                        "  MERGE: REDUCE by rule R50: zeroOrOne_Guard:;\r\n" +
                        "  SEMI: REDUCE by rule R50: zeroOrOne_Guard:;\r\n" +
                        "  OR: REDUCE by rule R50: zeroOrOne_Guard:;\r\n" +
                        "  IDENTIFIER: REDUCE by rule R50: zeroOrOne_Guard:;\r\n" +
                        "  zeroOrOne_Guard: GOTO state S121\r\n" +
                        "  Guard: GOTO state S100\r\n",

                    TerminalColumns = new ParserStateColumn[]
                    {
                        new ParserStateColumn
                        (
                            16397,	// On LBRACK
                            null,
                            false,	// shift to
                            101		// state 101
                        ),
                        new ParserStateColumn
                        (
                            16405,	// On CODE
                            null,
                            true,	// reduce by
                            50		// production 50
                        ),
                        new ParserStateColumn
                        (
                            16416,	// On MERGE
                            null,
                            true,	// reduce by
                            50		// production 50
                        ),
                        new ParserStateColumn
                        (
                            16396,	// On SEMI
                            null,
                            true,	// reduce by
                            50		// production 50
                        ),
                        new ParserStateColumn
                        (
                            16395,	// On OR
                            null,
                            true,	// reduce by
                            50		// production 50
                        ),
                        new ParserStateColumn
                        (
                            16404,	// On IDENTIFIER
                            null,
                            true,	// reduce by
                            50		// production 50
                        ),
                    },

                    // GOTO non-terminals used to select next state
                    // after a REDUCE operation has taken place

                    NonterminalColumns = new ParserStateColumn[]
                    {
                        new ParserStateColumn
                        (
                            32798,	// On zeroOrOne_Guard
                            null,
                            false,	// goto
                            121		// state 121
                        ),
                        new ParserStateColumn
                        (
                            32797,	// On Guard
                            null,
                            false,	// goto
                            100		// state 100
                        ),
                    },
                },

                new ParserState
                {
                    StateString =
                        "State S110 CORE ITEMS:\r\n" +
                        "R54: Guard: LBRACK CondExpr ^ RBRACK\r\n" +
                        "R56: CondExpr: CondExpr ^ OR OrableExpr\r\n" +
                        "SHIFTS, REDUCTIONS AND GOTOS\r\n" +
                        "  RBRACK: SHIFT to state S122\r\n" +
                        "  OR: SHIFT to state S123\r\n",

                    TerminalColumns = new ParserStateColumn[]
                    {
                        new ParserStateColumn
                        (
                            16398,	// On RBRACK
                            null,
                            false,	// shift to
                            122		// state 122
                        ),
                        new ParserStateColumn
                        (
                            16395,	// On OR
                            null,
                            false,	// shift to
                            123		// state 123
                        ),
                    },

                    NonterminalColumns = new ParserStateColumn[0],
                },

                new ParserState
                {
                    StateString =
                        "State S111 CORE ITEMS:\r\n" +
                        "R57: CondExpr: OrableExpr ^\r\n" +
                        "{\r\n" +
                        "    RBRACK,\r\n" +
                        "    OR,\r\n" +
                        "    RPAREN\r\n" +
                        "}\r\n" +
                        "R58: OrableExpr: OrableExpr ^ AND AndableExpr\r\n" +
                        "SHIFTS, REDUCTIONS AND GOTOS\r\n" +
                        "  AND: SHIFT to state S124\r\n" +
                        "  RBRACK: REDUCE by rule R57: CondExpr: OrableExpr;\r\n" +
                        "  OR: REDUCE by rule R57: CondExpr: OrableExpr;\r\n" +
                        "  RPAREN: REDUCE by rule R57: CondExpr: OrableExpr;\r\n",

                    TerminalColumns = new ParserStateColumn[]
                    {
                        new ParserStateColumn
                        (
                            16399,	// On AND
                            null,
                            false,	// shift to
                            124		// state 124
                        ),
                        new ParserStateColumn
                        (
                            16398,	// On RBRACK
                            null,
                            true,	// reduce by
                            57		// production 57
                        ),
                        new ParserStateColumn
                        (
                            16395,	// On OR
                            null,
                            true,	// reduce by
                            57		// production 57
                        ),
                        new ParserStateColumn
                        (
                            16392,	// On RPAREN
                            null,
                            true,	// reduce by
                            57		// production 57
                        ),
                    },

                    NonterminalColumns = new ParserStateColumn[0],
                },

                new ParserState
                {
                    StateString =
                        "State S112 CORE ITEMS:\r\n" +
                        "R59: OrableExpr: AndableExpr ^\r\n" +
                        "{\r\n" +
                        "    RBRACK,\r\n" +
                        "    OR,\r\n" +
                        "    AND,\r\n" +
                        "    RPAREN\r\n" +
                        "}\r\n" +
                        "SHIFTS, REDUCTIONS AND GOTOS\r\n" +
                        "  RBRACK: REDUCE by rule R59: OrableExpr: AndableExpr;\r\n" +
                        "  OR: REDUCE by rule R59: OrableExpr: AndableExpr;\r\n" +
                        "  AND: REDUCE by rule R59: OrableExpr: AndableExpr;\r\n" +
                        "  RPAREN: REDUCE by rule R59: OrableExpr: AndableExpr;\r\n",

                    TerminalColumns = new ParserStateColumn[]
                    {
                        new ParserStateColumn
                        (
                            16398,	// On RBRACK
                            null,
                            true,	// reduce by
                            59		// production 59
                        ),
                        new ParserStateColumn
                        (
                            16395,	// On OR
                            null,
                            true,	// reduce by
                            59		// production 59
                        ),
                        new ParserStateColumn
                        (
                            16399,	// On AND
                            null,
                            true,	// reduce by
                            59		// production 59
                        ),
                        new ParserStateColumn
                        (
                            16392,	// On RPAREN
                            null,
                            true,	// reduce by
                            59		// production 59
                        ),
                    },

                    NonterminalColumns = new ParserStateColumn[0],
                },

                new ParserState
                {
                    StateString =
                        "State S113 CORE ITEMS:\r\n" +
                        "R60: AndableExpr: RootExpr ^\r\n" +
                        "{\r\n" +
                        "    RBRACK,\r\n" +
                        "    OR,\r\n" +
                        "    AND,\r\n" +
                        "    RPAREN\r\n" +
                        "}\r\n" +
                        "SHIFTS, REDUCTIONS AND GOTOS\r\n" +
                        "  RBRACK: REDUCE by rule R60: AndableExpr: RootExpr;\r\n" +
                        "  OR: REDUCE by rule R60: AndableExpr: RootExpr;\r\n" +
                        "  AND: REDUCE by rule R60: AndableExpr: RootExpr;\r\n" +
                        "  RPAREN: REDUCE by rule R60: AndableExpr: RootExpr;\r\n",

                    TerminalColumns = new ParserStateColumn[]
                    {
                        new ParserStateColumn
                        (
                            16398,	// On RBRACK
                            null,
                            true,	// reduce by
                            60		// production 60
                        ),
                        new ParserStateColumn
                        (
                            16395,	// On OR
                            null,
                            true,	// reduce by
                            60		// production 60
                        ),
                        new ParserStateColumn
                        (
                            16399,	// On AND
                            null,
                            true,	// reduce by
                            60		// production 60
                        ),
                        new ParserStateColumn
                        (
                            16392,	// On RPAREN
                            null,
                            true,	// reduce by
                            60		// production 60
                        ),
                    },

                    NonterminalColumns = new ParserStateColumn[0],
                },

                new ParserState
                {
                    StateString =
                        "State S114 CORE ITEMS:\r\n" +
                        "R61: AndableExpr: NOT ^ RootExpr\r\n" +
                        "CLOSURE ITEMS:\r\n" +
                        "R62: RootExpr: ^ IDENTIFIER\r\n" +
                        "R63: RootExpr: ^ LPAREN CondExpr RPAREN\r\n" +
                        "SHIFTS, REDUCTIONS AND GOTOS\r\n" +
                        "  IDENTIFIER: SHIFT to state S115\r\n" +
                        "  LPAREN: SHIFT to state S116\r\n" +
                        "  RootExpr: GOTO state S125\r\n",

                    TerminalColumns = new ParserStateColumn[]
                    {
                        new ParserStateColumn
                        (
                            16404,	// On IDENTIFIER
                            null,
                            false,	// shift to
                            115		// state 115
                        ),
                        new ParserStateColumn
                        (
                            16391,	// On LPAREN
                            null,
                            false,	// shift to
                            116		// state 116
                        ),
                    },

                    // GOTO non-terminals used to select next state
                    // after a REDUCE operation has taken place

                    NonterminalColumns = new ParserStateColumn[]
                    {
                        new ParserStateColumn
                        (
                            32804,	// On RootExpr
                            null,
                            false,	// goto
                            125		// state 125
                        ),
                    },
                },

                new ParserState
                {
                    StateString =
                        "State S115 CORE ITEMS:\r\n" +
                        "R62: RootExpr: IDENTIFIER ^\r\n" +
                        "{\r\n" +
                        "    RBRACK,\r\n" +
                        "    OR,\r\n" +
                        "    AND,\r\n" +
                        "    RPAREN\r\n" +
                        "}\r\n" +
                        "SHIFTS, REDUCTIONS AND GOTOS\r\n" +
                        "  RBRACK: REDUCE by rule R62: RootExpr: IDENTIFIER;\r\n" +
                        "  OR: REDUCE by rule R62: RootExpr: IDENTIFIER;\r\n" +
                        "  AND: REDUCE by rule R62: RootExpr: IDENTIFIER;\r\n" +
                        "  RPAREN: REDUCE by rule R62: RootExpr: IDENTIFIER;\r\n",

                    TerminalColumns = new ParserStateColumn[]
                    {
                        new ParserStateColumn
                        (
                            16398,	// On RBRACK
                            null,
                            true,	// reduce by
                            62		// production 62
                        ),
                        new ParserStateColumn
                        (
                            16395,	// On OR
                            null,
                            true,	// reduce by
                            62		// production 62
                        ),
                        new ParserStateColumn
                        (
                            16399,	// On AND
                            null,
                            true,	// reduce by
                            62		// production 62
                        ),
                        new ParserStateColumn
                        (
                            16392,	// On RPAREN
                            null,
                            true,	// reduce by
                            62		// production 62
                        ),
                    },

                    NonterminalColumns = new ParserStateColumn[0],
                },

                new ParserState
                {
                    StateString =
                        "State S116 CORE ITEMS:\r\n" +
                        "R63: RootExpr: LPAREN ^ CondExpr RPAREN\r\n" +
                        "CLOSURE ITEMS:\r\n" +
                        "R56: CondExpr: ^ CondExpr OR OrableExpr\r\n" +
                        "R57: CondExpr: ^ OrableExpr\r\n" +
                        "R58: OrableExpr: ^ OrableExpr AND AndableExpr\r\n" +
                        "R59: OrableExpr: ^ AndableExpr\r\n" +
                        "R60: AndableExpr: ^ RootExpr\r\n" +
                        "R61: AndableExpr: ^ NOT RootExpr\r\n" +
                        "R62: RootExpr: ^ IDENTIFIER\r\n" +
                        "R63: RootExpr: ^ LPAREN CondExpr RPAREN\r\n" +
                        "SHIFTS, REDUCTIONS AND GOTOS\r\n" +
                        "  NOT: SHIFT to state S114\r\n" +
                        "  IDENTIFIER: SHIFT to state S115\r\n" +
                        "  LPAREN: SHIFT to state S116\r\n" +
                        "  CondExpr: GOTO state S126\r\n" +
                        "  OrableExpr: GOTO state S111\r\n" +
                        "  AndableExpr: GOTO state S112\r\n" +
                        "  RootExpr: GOTO state S113\r\n",

                    TerminalColumns = new ParserStateColumn[]
                    {
                        new ParserStateColumn
                        (
                            16400,	// On NOT
                            null,
                            false,	// shift to
                            114		// state 114
                        ),
                        new ParserStateColumn
                        (
                            16404,	// On IDENTIFIER
                            null,
                            false,	// shift to
                            115		// state 115
                        ),
                        new ParserStateColumn
                        (
                            16391,	// On LPAREN
                            null,
                            false,	// shift to
                            116		// state 116
                        ),
                    },

                    // GOTO non-terminals used to select next state
                    // after a REDUCE operation has taken place

                    NonterminalColumns = new ParserStateColumn[]
                    {
                        new ParserStateColumn
                        (
                            32801,	// On CondExpr
                            null,
                            false,	// goto
                            126		// state 126
                        ),
                        new ParserStateColumn
                        (
                            32802,	// On OrableExpr
                            null,
                            false,	// goto
                            111		// state 111
                        ),
                        new ParserStateColumn
                        (
                            32803,	// On AndableExpr
                            null,
                            false,	// goto
                            112		// state 112
                        ),
                        new ParserStateColumn
                        (
                            32804,	// On RootExpr
                            null,
                            false,	// goto
                            113		// state 113
                        ),
                    },
                },

                new ParserState
                {
                    StateString =
                        "State S117 CORE ITEMS:\r\n" +
                        "R68: State: IDENTIFIER COLON zeroOrOne_OnEntry zeroOrOne_OnExit TransitionList ^ SEMI\r\n" +
                        "R72: TransitionList: TransitionList ^ OR Transition\r\n" +
                        "SHIFTS, REDUCTIONS AND GOTOS\r\n" +
                        "  SEMI: SHIFT to state S127\r\n" +
                        "  OR: SHIFT to state S128\r\n",

                    TerminalColumns = new ParserStateColumn[]
                    {
                        new ParserStateColumn
                        (
                            16396,	// On SEMI
                            null,
                            false,	// shift to
                            127		// state 127
                        ),
                        new ParserStateColumn
                        (
                            16395,	// On OR
                            null,
                            false,	// shift to
                            128		// state 128
                        ),
                    },

                    NonterminalColumns = new ParserStateColumn[0],
                },

                new ParserState
                {
                    StateString =
                        "State S118 CORE ITEMS:\r\n" +
                        "R73: TransitionList: Transition ^\r\n" +
                        "{\r\n" +
                        "    SEMI,\r\n" +
                        "    OR\r\n" +
                        "}\r\n" +
                        "SHIFTS, REDUCTIONS AND GOTOS\r\n" +
                        "  SEMI: REDUCE by rule R73: TransitionList: Transition;\r\n" +
                        "  OR: REDUCE by rule R73: TransitionList: Transition;\r\n",

                    TerminalColumns = new ParserStateColumn[]
                    {
                        new ParserStateColumn
                        (
                            16396,	// On SEMI
                            null,
                            true,	// reduce by
                            73		// production 73
                        ),
                        new ParserStateColumn
                        (
                            16395,	// On OR
                            null,
                            true,	// reduce by
                            73		// production 73
                        ),
                    },

                    NonterminalColumns = new ParserStateColumn[0],
                },

                new ParserState
                {
                    StateString =
                        "State S119 CORE ITEMS:\r\n" +
                        "R76: Transition: Element ^ IDENTIFIER zeroOrOne_TransitionAction\r\n" +
                        "R77: Transition: Element ^ zeroOrOne_TransitionAction\r\n" +
                        "CLOSURE ITEMS:\r\n" +
                        "R74: zeroOrOne_TransitionAction: ^ TransitionAction\r\n" +
                        "R75: zeroOrOne_TransitionAction: ^\r\n" +
                        "{\r\n" +
                        "    SEMI,\r\n" +
                        "    OR\r\n" +
                        "}\r\n" +
                        "R78: TransitionAction: ^ CODE\r\n" +
                        "SHIFTS, REDUCTIONS AND GOTOS\r\n" +
                        "  IDENTIFIER: SHIFT to state S129\r\n" +
                        "  CODE: SHIFT to state S106\r\n" +
                        "  SEMI: REDUCE by rule R75: zeroOrOne_TransitionAction:;\r\n" +
                        "  OR: REDUCE by rule R75: zeroOrOne_TransitionAction:;\r\n" +
                        "  zeroOrOne_TransitionAction: GOTO state S130\r\n" +
                        "  TransitionAction: GOTO state S131\r\n",

                    TerminalColumns = new ParserStateColumn[]
                    {
                        new ParserStateColumn
                        (
                            16404,	// On IDENTIFIER
                            null,
                            false,	// shift to
                            129		// state 129
                        ),
                        new ParserStateColumn
                        (
                            16405,	// On CODE
                            null,
                            false,	// shift to
                            106		// state 106
                        ),
                        new ParserStateColumn
                        (
                            16396,	// On SEMI
                            null,
                            true,	// reduce by
                            75		// production 75
                        ),
                        new ParserStateColumn
                        (
                            16395,	// On OR
                            null,
                            true,	// reduce by
                            75		// production 75
                        ),
                    },

                    // GOTO non-terminals used to select next state
                    // after a REDUCE operation has taken place

                    NonterminalColumns = new ParserStateColumn[]
                    {
                        new ParserStateColumn
                        (
                            32812,	// On zeroOrOne_TransitionAction
                            null,
                            false,	// goto
                            130		// state 130
                        ),
                        new ParserStateColumn
                        (
                            32810,	// On TransitionAction
                            null,
                            false,	// goto
                            131		// state 131
                        ),
                    },
                },

                new ParserState
                {
                    StateString =
                        "State S120 CORE ITEMS:\r\n" +
                        "R71: OnExit: ONEXIT TransitionAction ^\r\n" +
                        "{\r\n" +
                        "    IDENTIFIER\r\n" +
                        "}\r\n" +
                        "SHIFTS, REDUCTIONS AND GOTOS\r\n" +
                        "  IDENTIFIER: REDUCE by rule R71: OnExit: ONEXIT TransitionAction;\r\n",

                    TerminalColumns = new ParserStateColumn[]
                    {
                        new ParserStateColumn
                        (
                            16404,	// On IDENTIFIER
                            null,
                            true,	// reduce by
                            71		// production 71
                        ),
                    },

                    NonterminalColumns = new ParserStateColumn[0],
                },

                new ParserState
                {
                    StateString =
                        "State S121 CORE ITEMS:\r\n" +
                        "R55: Multiplier: MULTIPLICITY zeroOrOne_Guard ^\r\n" +
                        "{\r\n" +
                        "    CODE,\r\n" +
                        "    MERGE,\r\n" +
                        "    SEMI,\r\n" +
                        "    OR,\r\n" +
                        "    IDENTIFIER\r\n" +
                        "}\r\n" +
                        "SHIFTS, REDUCTIONS AND GOTOS\r\n" +
                        "  CODE: REDUCE by rule R55: Multiplier: MULTIPLICITY zeroOrOne_Guard;\r\n" +
                        "  MERGE: REDUCE by rule R55: Multiplier: MULTIPLICITY zeroOrOne_Guard;\r\n" +
                        "  SEMI: REDUCE by rule R55: Multiplier: MULTIPLICITY zeroOrOne_Guard;\r\n" +
                        "  OR: REDUCE by rule R55: Multiplier: MULTIPLICITY zeroOrOne_Guard;\r\n" +
                        "  IDENTIFIER: REDUCE by rule R55: Multiplier: MULTIPLICITY zeroOrOne_Guard;\r\n",

                    TerminalColumns = new ParserStateColumn[]
                    {
                        new ParserStateColumn
                        (
                            16405,	// On CODE
                            null,
                            true,	// reduce by
                            55		// production 55
                        ),
                        new ParserStateColumn
                        (
                            16416,	// On MERGE
                            null,
                            true,	// reduce by
                            55		// production 55
                        ),
                        new ParserStateColumn
                        (
                            16396,	// On SEMI
                            null,
                            true,	// reduce by
                            55		// production 55
                        ),
                        new ParserStateColumn
                        (
                            16395,	// On OR
                            null,
                            true,	// reduce by
                            55		// production 55
                        ),
                        new ParserStateColumn
                        (
                            16404,	// On IDENTIFIER
                            null,
                            true,	// reduce by
                            55		// production 55
                        ),
                    },

                    NonterminalColumns = new ParserStateColumn[0],
                },

                new ParserState
                {
                    StateString =
                        "State S122 CORE ITEMS:\r\n" +
                        "R54: Guard: LBRACK CondExpr RBRACK ^\r\n" +
                        "{\r\n" +
                        "    MULTIPLICITY,\r\n" +
                        "    CODE,\r\n" +
                        "    MERGE,\r\n" +
                        "    SEMI,\r\n" +
                        "    OR,\r\n" +
                        "    IDENTIFIER\r\n" +
                        "}\r\n" +
                        "SHIFTS, REDUCTIONS AND GOTOS\r\n" +
                        "  MULTIPLICITY: REDUCE by rule R54: Guard: LBRACK CondExpr RBRACK;\r\n" +
                        "  CODE: REDUCE by rule R54: Guard: LBRACK CondExpr RBRACK;\r\n" +
                        "  MERGE: REDUCE by rule R54: Guard: LBRACK CondExpr RBRACK;\r\n" +
                        "  SEMI: REDUCE by rule R54: Guard: LBRACK CondExpr RBRACK;\r\n" +
                        "  OR: REDUCE by rule R54: Guard: LBRACK CondExpr RBRACK;\r\n" +
                        "  IDENTIFIER: REDUCE by rule R54: Guard: LBRACK CondExpr RBRACK;\r\n",

                    TerminalColumns = new ParserStateColumn[]
                    {
                        new ParserStateColumn
                        (
                            16417,	// On MULTIPLICITY
                            null,
                            true,	// reduce by
                            54		// production 54
                        ),
                        new ParserStateColumn
                        (
                            16405,	// On CODE
                            null,
                            true,	// reduce by
                            54		// production 54
                        ),
                        new ParserStateColumn
                        (
                            16416,	// On MERGE
                            null,
                            true,	// reduce by
                            54		// production 54
                        ),
                        new ParserStateColumn
                        (
                            16396,	// On SEMI
                            null,
                            true,	// reduce by
                            54		// production 54
                        ),
                        new ParserStateColumn
                        (
                            16395,	// On OR
                            null,
                            true,	// reduce by
                            54		// production 54
                        ),
                        new ParserStateColumn
                        (
                            16404,	// On IDENTIFIER
                            null,
                            true,	// reduce by
                            54		// production 54
                        ),
                    },

                    NonterminalColumns = new ParserStateColumn[0],
                },

                new ParserState
                {
                    StateString =
                        "State S123 CORE ITEMS:\r\n" +
                        "R56: CondExpr: CondExpr OR ^ OrableExpr\r\n" +
                        "CLOSURE ITEMS:\r\n" +
                        "R58: OrableExpr: ^ OrableExpr AND AndableExpr\r\n" +
                        "R59: OrableExpr: ^ AndableExpr\r\n" +
                        "R60: AndableExpr: ^ RootExpr\r\n" +
                        "R61: AndableExpr: ^ NOT RootExpr\r\n" +
                        "R62: RootExpr: ^ IDENTIFIER\r\n" +
                        "R63: RootExpr: ^ LPAREN CondExpr RPAREN\r\n" +
                        "SHIFTS, REDUCTIONS AND GOTOS\r\n" +
                        "  NOT: SHIFT to state S114\r\n" +
                        "  IDENTIFIER: SHIFT to state S115\r\n" +
                        "  LPAREN: SHIFT to state S116\r\n" +
                        "  OrableExpr: GOTO state S132\r\n" +
                        "  AndableExpr: GOTO state S112\r\n" +
                        "  RootExpr: GOTO state S113\r\n",

                    TerminalColumns = new ParserStateColumn[]
                    {
                        new ParserStateColumn
                        (
                            16400,	// On NOT
                            null,
                            false,	// shift to
                            114		// state 114
                        ),
                        new ParserStateColumn
                        (
                            16404,	// On IDENTIFIER
                            null,
                            false,	// shift to
                            115		// state 115
                        ),
                        new ParserStateColumn
                        (
                            16391,	// On LPAREN
                            null,
                            false,	// shift to
                            116		// state 116
                        ),
                    },

                    // GOTO non-terminals used to select next state
                    // after a REDUCE operation has taken place

                    NonterminalColumns = new ParserStateColumn[]
                    {
                        new ParserStateColumn
                        (
                            32802,	// On OrableExpr
                            null,
                            false,	// goto
                            132		// state 132
                        ),
                        new ParserStateColumn
                        (
                            32803,	// On AndableExpr
                            null,
                            false,	// goto
                            112		// state 112
                        ),
                        new ParserStateColumn
                        (
                            32804,	// On RootExpr
                            null,
                            false,	// goto
                            113		// state 113
                        ),
                    },
                },

                new ParserState
                {
                    StateString =
                        "State S124 CORE ITEMS:\r\n" +
                        "R58: OrableExpr: OrableExpr AND ^ AndableExpr\r\n" +
                        "CLOSURE ITEMS:\r\n" +
                        "R60: AndableExpr: ^ RootExpr\r\n" +
                        "R61: AndableExpr: ^ NOT RootExpr\r\n" +
                        "R62: RootExpr: ^ IDENTIFIER\r\n" +
                        "R63: RootExpr: ^ LPAREN CondExpr RPAREN\r\n" +
                        "SHIFTS, REDUCTIONS AND GOTOS\r\n" +
                        "  NOT: SHIFT to state S114\r\n" +
                        "  IDENTIFIER: SHIFT to state S115\r\n" +
                        "  LPAREN: SHIFT to state S116\r\n" +
                        "  AndableExpr: GOTO state S133\r\n" +
                        "  RootExpr: GOTO state S113\r\n",

                    TerminalColumns = new ParserStateColumn[]
                    {
                        new ParserStateColumn
                        (
                            16400,	// On NOT
                            null,
                            false,	// shift to
                            114		// state 114
                        ),
                        new ParserStateColumn
                        (
                            16404,	// On IDENTIFIER
                            null,
                            false,	// shift to
                            115		// state 115
                        ),
                        new ParserStateColumn
                        (
                            16391,	// On LPAREN
                            null,
                            false,	// shift to
                            116		// state 116
                        ),
                    },

                    // GOTO non-terminals used to select next state
                    // after a REDUCE operation has taken place

                    NonterminalColumns = new ParserStateColumn[]
                    {
                        new ParserStateColumn
                        (
                            32803,	// On AndableExpr
                            null,
                            false,	// goto
                            133		// state 133
                        ),
                        new ParserStateColumn
                        (
                            32804,	// On RootExpr
                            null,
                            false,	// goto
                            113		// state 113
                        ),
                    },
                },

                new ParserState
                {
                    StateString =
                        "State S125 CORE ITEMS:\r\n" +
                        "R61: AndableExpr: NOT RootExpr ^\r\n" +
                        "{\r\n" +
                        "    RBRACK,\r\n" +
                        "    OR,\r\n" +
                        "    AND,\r\n" +
                        "    RPAREN\r\n" +
                        "}\r\n" +
                        "SHIFTS, REDUCTIONS AND GOTOS\r\n" +
                        "  RBRACK: REDUCE by rule R61: AndableExpr: NOT RootExpr;\r\n" +
                        "  OR: REDUCE by rule R61: AndableExpr: NOT RootExpr;\r\n" +
                        "  AND: REDUCE by rule R61: AndableExpr: NOT RootExpr;\r\n" +
                        "  RPAREN: REDUCE by rule R61: AndableExpr: NOT RootExpr;\r\n",

                    TerminalColumns = new ParserStateColumn[]
                    {
                        new ParserStateColumn
                        (
                            16398,	// On RBRACK
                            null,
                            true,	// reduce by
                            61		// production 61
                        ),
                        new ParserStateColumn
                        (
                            16395,	// On OR
                            null,
                            true,	// reduce by
                            61		// production 61
                        ),
                        new ParserStateColumn
                        (
                            16399,	// On AND
                            null,
                            true,	// reduce by
                            61		// production 61
                        ),
                        new ParserStateColumn
                        (
                            16392,	// On RPAREN
                            null,
                            true,	// reduce by
                            61		// production 61
                        ),
                    },

                    NonterminalColumns = new ParserStateColumn[0],
                },

                new ParserState
                {
                    StateString =
                        "State S126 CORE ITEMS:\r\n" +
                        "R63: RootExpr: LPAREN CondExpr ^ RPAREN\r\n" +
                        "R56: CondExpr: CondExpr ^ OR OrableExpr\r\n" +
                        "SHIFTS, REDUCTIONS AND GOTOS\r\n" +
                        "  RPAREN: SHIFT to state S134\r\n" +
                        "  OR: SHIFT to state S123\r\n",

                    TerminalColumns = new ParserStateColumn[]
                    {
                        new ParserStateColumn
                        (
                            16392,	// On RPAREN
                            null,
                            false,	// shift to
                            134		// state 134
                        ),
                        new ParserStateColumn
                        (
                            16395,	// On OR
                            null,
                            false,	// shift to
                            123		// state 123
                        ),
                    },

                    NonterminalColumns = new ParserStateColumn[0],
                },

                new ParserState
                {
                    StateString =
                        "State S127 CORE ITEMS:\r\n" +
                        "R68: State: IDENTIFIER COLON zeroOrOne_OnEntry zeroOrOne_OnExit TransitionList SEMI ^\r\n" +
                        "{\r\n" +
                        "    RBRACE,\r\n" +
                        "    IDENTIFIER,\r\n" +
                        "    ERR\r\n" +
                        "}\r\n" +
                        "SHIFTS, REDUCTIONS AND GOTOS\r\n" +
                        "  RBRACE: REDUCE by rule R68: State: IDENTIFIER COLON zeroOrOne_OnEntry zeroOrOne_OnExit TransitionList SEMI;\r\n" +
                        "  IDENTIFIER: REDUCE by rule R68: State: IDENTIFIER COLON zeroOrOne_OnEntry zeroOrOne_OnExit TransitionList SEMI;\r\n" +
                        "  ERR: REDUCE by rule R68: State: IDENTIFIER COLON zeroOrOne_OnEntry zeroOrOne_OnExit TransitionList SEMI;\r\n",

                    TerminalColumns = new ParserStateColumn[]
                    {
                        new ParserStateColumn
                        (
                            16390,	// On RBRACE
                            null,
                            true,	// reduce by
                            68		// production 68
                        ),
                        new ParserStateColumn
                        (
                            16404,	// On IDENTIFIER
                            null,
                            true,	// reduce by
                            68		// production 68
                        ),
                        new ParserStateColumn
                        (
                            16387,	// On ERR
                            null,
                            true,	// reduce by
                            68		// production 68
                        ),
                    },

                    NonterminalColumns = new ParserStateColumn[0],
                },

                new ParserState
                {
                    StateString =
                        "State S128 CORE ITEMS:\r\n" +
                        "R72: TransitionList: TransitionList OR ^ Transition\r\n" +
                        "CLOSURE ITEMS:\r\n" +
                        "R76: Transition: ^ Element IDENTIFIER zeroOrOne_TransitionAction\r\n" +
                        "R77: Transition: ^ Element zeroOrOne_TransitionAction\r\n" +
                        "R53: Element: ^ IDENTIFIER zeroOrOne_Guard zeroOrOne_Multiplier\r\n" +
                        "SHIFTS, REDUCTIONS AND GOTOS\r\n" +
                        "  IDENTIFIER: SHIFT to state S91\r\n" +
                        "  Transition: GOTO state S135\r\n" +
                        "  Element: GOTO state S119\r\n",

                    TerminalColumns = new ParserStateColumn[]
                    {
                        new ParserStateColumn
                        (
                            16404,	// On IDENTIFIER
                            null,
                            false,	// shift to
                            91		// state 91
                        ),
                    },

                    // GOTO non-terminals used to select next state
                    // after a REDUCE operation has taken place

                    NonterminalColumns = new ParserStateColumn[]
                    {
                        new ParserStateColumn
                        (
                            32811,	// On Transition
                            null,
                            false,	// goto
                            135		// state 135
                        ),
                        new ParserStateColumn
                        (
                            32795,	// On Element
                            null,
                            false,	// goto
                            119		// state 119
                        ),
                    },
                },

                new ParserState
                {
                    StateString =
                        "State S129 CORE ITEMS:\r\n" +
                        "R76: Transition: Element IDENTIFIER ^ zeroOrOne_TransitionAction\r\n" +
                        "CLOSURE ITEMS:\r\n" +
                        "R74: zeroOrOne_TransitionAction: ^ TransitionAction\r\n" +
                        "R75: zeroOrOne_TransitionAction: ^\r\n" +
                        "{\r\n" +
                        "    SEMI,\r\n" +
                        "    OR\r\n" +
                        "}\r\n" +
                        "R78: TransitionAction: ^ CODE\r\n" +
                        "SHIFTS, REDUCTIONS AND GOTOS\r\n" +
                        "  CODE: SHIFT to state S106\r\n" +
                        "  SEMI: REDUCE by rule R75: zeroOrOne_TransitionAction:;\r\n" +
                        "  OR: REDUCE by rule R75: zeroOrOne_TransitionAction:;\r\n" +
                        "  zeroOrOne_TransitionAction: GOTO state S136\r\n" +
                        "  TransitionAction: GOTO state S131\r\n",

                    TerminalColumns = new ParserStateColumn[]
                    {
                        new ParserStateColumn
                        (
                            16405,	// On CODE
                            null,
                            false,	// shift to
                            106		// state 106
                        ),
                        new ParserStateColumn
                        (
                            16396,	// On SEMI
                            null,
                            true,	// reduce by
                            75		// production 75
                        ),
                        new ParserStateColumn
                        (
                            16395,	// On OR
                            null,
                            true,	// reduce by
                            75		// production 75
                        ),
                    },

                    // GOTO non-terminals used to select next state
                    // after a REDUCE operation has taken place

                    NonterminalColumns = new ParserStateColumn[]
                    {
                        new ParserStateColumn
                        (
                            32812,	// On zeroOrOne_TransitionAction
                            null,
                            false,	// goto
                            136		// state 136
                        ),
                        new ParserStateColumn
                        (
                            32810,	// On TransitionAction
                            null,
                            false,	// goto
                            131		// state 131
                        ),
                    },
                },

                new ParserState
                {
                    StateString =
                        "State S130 CORE ITEMS:\r\n" +
                        "R77: Transition: Element zeroOrOne_TransitionAction ^\r\n" +
                        "{\r\n" +
                        "    SEMI,\r\n" +
                        "    OR\r\n" +
                        "}\r\n" +
                        "SHIFTS, REDUCTIONS AND GOTOS\r\n" +
                        "  SEMI: REDUCE by rule R77: Transition: Element zeroOrOne_TransitionAction;\r\n" +
                        "  OR: REDUCE by rule R77: Transition: Element zeroOrOne_TransitionAction;\r\n",

                    TerminalColumns = new ParserStateColumn[]
                    {
                        new ParserStateColumn
                        (
                            16396,	// On SEMI
                            null,
                            true,	// reduce by
                            77		// production 77
                        ),
                        new ParserStateColumn
                        (
                            16395,	// On OR
                            null,
                            true,	// reduce by
                            77		// production 77
                        ),
                    },

                    NonterminalColumns = new ParserStateColumn[0],
                },

                new ParserState
                {
                    StateString =
                        "State S131 CORE ITEMS:\r\n" +
                        "R74: zeroOrOne_TransitionAction: TransitionAction ^\r\n" +
                        "{\r\n" +
                        "    SEMI,\r\n" +
                        "    OR\r\n" +
                        "}\r\n" +
                        "SHIFTS, REDUCTIONS AND GOTOS\r\n" +
                        "  SEMI: REDUCE by rule R74: zeroOrOne_TransitionAction: TransitionAction;\r\n" +
                        "  OR: REDUCE by rule R74: zeroOrOne_TransitionAction: TransitionAction;\r\n",

                    TerminalColumns = new ParserStateColumn[]
                    {
                        new ParserStateColumn
                        (
                            16396,	// On SEMI
                            null,
                            true,	// reduce by
                            74		// production 74
                        ),
                        new ParserStateColumn
                        (
                            16395,	// On OR
                            null,
                            true,	// reduce by
                            74		// production 74
                        ),
                    },

                    NonterminalColumns = new ParserStateColumn[0],
                },

                new ParserState
                {
                    StateString =
                        "State S132 CORE ITEMS:\r\n" +
                        "R56: CondExpr: CondExpr OR OrableExpr ^\r\n" +
                        "{\r\n" +
                        "    RBRACK,\r\n" +
                        "    OR,\r\n" +
                        "    RPAREN\r\n" +
                        "}\r\n" +
                        "R58: OrableExpr: OrableExpr ^ AND AndableExpr\r\n" +
                        "SHIFTS, REDUCTIONS AND GOTOS\r\n" +
                        "  AND: SHIFT to state S124\r\n" +
                        "  RBRACK: REDUCE by rule R56: CondExpr: CondExpr OR OrableExpr;\r\n" +
                        "  OR: REDUCE by rule R56: CondExpr: CondExpr OR OrableExpr;\r\n" +
                        "  RPAREN: REDUCE by rule R56: CondExpr: CondExpr OR OrableExpr;\r\n",

                    TerminalColumns = new ParserStateColumn[]
                    {
                        new ParserStateColumn
                        (
                            16399,	// On AND
                            null,
                            false,	// shift to
                            124		// state 124
                        ),
                        new ParserStateColumn
                        (
                            16398,	// On RBRACK
                            null,
                            true,	// reduce by
                            56		// production 56
                        ),
                        new ParserStateColumn
                        (
                            16395,	// On OR
                            null,
                            true,	// reduce by
                            56		// production 56
                        ),
                        new ParserStateColumn
                        (
                            16392,	// On RPAREN
                            null,
                            true,	// reduce by
                            56		// production 56
                        ),
                    },

                    NonterminalColumns = new ParserStateColumn[0],
                },

                new ParserState
                {
                    StateString =
                        "State S133 CORE ITEMS:\r\n" +
                        "R58: OrableExpr: OrableExpr AND AndableExpr ^\r\n" +
                        "{\r\n" +
                        "    RBRACK,\r\n" +
                        "    OR,\r\n" +
                        "    AND,\r\n" +
                        "    RPAREN\r\n" +
                        "}\r\n" +
                        "SHIFTS, REDUCTIONS AND GOTOS\r\n" +
                        "  RBRACK: REDUCE by rule R58: OrableExpr: OrableExpr AND AndableExpr;\r\n" +
                        "  OR: REDUCE by rule R58: OrableExpr: OrableExpr AND AndableExpr;\r\n" +
                        "  AND: REDUCE by rule R58: OrableExpr: OrableExpr AND AndableExpr;\r\n" +
                        "  RPAREN: REDUCE by rule R58: OrableExpr: OrableExpr AND AndableExpr;\r\n",

                    TerminalColumns = new ParserStateColumn[]
                    {
                        new ParserStateColumn
                        (
                            16398,	// On RBRACK
                            null,
                            true,	// reduce by
                            58		// production 58
                        ),
                        new ParserStateColumn
                        (
                            16395,	// On OR
                            null,
                            true,	// reduce by
                            58		// production 58
                        ),
                        new ParserStateColumn
                        (
                            16399,	// On AND
                            null,
                            true,	// reduce by
                            58		// production 58
                        ),
                        new ParserStateColumn
                        (
                            16392,	// On RPAREN
                            null,
                            true,	// reduce by
                            58		// production 58
                        ),
                    },

                    NonterminalColumns = new ParserStateColumn[0],
                },

                new ParserState
                {
                    StateString =
                        "State S134 CORE ITEMS:\r\n" +
                        "R63: RootExpr: LPAREN CondExpr RPAREN ^\r\n" +
                        "{\r\n" +
                        "    RBRACK,\r\n" +
                        "    OR,\r\n" +
                        "    AND,\r\n" +
                        "    RPAREN\r\n" +
                        "}\r\n" +
                        "SHIFTS, REDUCTIONS AND GOTOS\r\n" +
                        "  RBRACK: REDUCE by rule R63: RootExpr: LPAREN CondExpr RPAREN;\r\n" +
                        "  OR: REDUCE by rule R63: RootExpr: LPAREN CondExpr RPAREN;\r\n" +
                        "  AND: REDUCE by rule R63: RootExpr: LPAREN CondExpr RPAREN;\r\n" +
                        "  RPAREN: REDUCE by rule R63: RootExpr: LPAREN CondExpr RPAREN;\r\n",

                    TerminalColumns = new ParserStateColumn[]
                    {
                        new ParserStateColumn
                        (
                            16398,	// On RBRACK
                            null,
                            true,	// reduce by
                            63		// production 63
                        ),
                        new ParserStateColumn
                        (
                            16395,	// On OR
                            null,
                            true,	// reduce by
                            63		// production 63
                        ),
                        new ParserStateColumn
                        (
                            16399,	// On AND
                            null,
                            true,	// reduce by
                            63		// production 63
                        ),
                        new ParserStateColumn
                        (
                            16392,	// On RPAREN
                            null,
                            true,	// reduce by
                            63		// production 63
                        ),
                    },

                    NonterminalColumns = new ParserStateColumn[0],
                },

                new ParserState
                {
                    StateString =
                        "State S135 CORE ITEMS:\r\n" +
                        "R72: TransitionList: TransitionList OR Transition ^\r\n" +
                        "{\r\n" +
                        "    SEMI,\r\n" +
                        "    OR\r\n" +
                        "}\r\n" +
                        "SHIFTS, REDUCTIONS AND GOTOS\r\n" +
                        "  SEMI: REDUCE by rule R72: TransitionList: TransitionList OR Transition;\r\n" +
                        "  OR: REDUCE by rule R72: TransitionList: TransitionList OR Transition;\r\n",

                    TerminalColumns = new ParserStateColumn[]
                    {
                        new ParserStateColumn
                        (
                            16396,	// On SEMI
                            null,
                            true,	// reduce by
                            72		// production 72
                        ),
                        new ParserStateColumn
                        (
                            16395,	// On OR
                            null,
                            true,	// reduce by
                            72		// production 72
                        ),
                    },

                    NonterminalColumns = new ParserStateColumn[0],
                },

                new ParserState
                {
                    StateString =
                        "State S136 CORE ITEMS:\r\n" +
                        "R76: Transition: Element IDENTIFIER zeroOrOne_TransitionAction ^\r\n" +
                        "{\r\n" +
                        "    SEMI,\r\n" +
                        "    OR\r\n" +
                        "}\r\n" +
                        "SHIFTS, REDUCTIONS AND GOTOS\r\n" +
                        "  SEMI: REDUCE by rule R76: Transition: Element IDENTIFIER zeroOrOne_TransitionAction;\r\n" +
                        "  OR: REDUCE by rule R76: Transition: Element IDENTIFIER zeroOrOne_TransitionAction;\r\n",

                    TerminalColumns = new ParserStateColumn[]
                    {
                        new ParserStateColumn
                        (
                            16396,	// On SEMI
                            null,
                            true,	// reduce by
                            76		// production 76
                        ),
                        new ParserStateColumn
                        (
                            16395,	// On OR
                            null,
                            true,	// reduce by
                            76		// production 76
                        ),
                    },

                    NonterminalColumns = new ParserStateColumn[0],
                },

            };

            return table;
        }

        // Initialize the guard condition evaluator functions

        private static IGuardEvaluator[] InitGuards()
        {
            return new IGuardEvaluator[]
            {
            };
        }

        // The action functions taken from the inline code fragments
        // after the grammar rules, and used when rules are reduced.

        // zeroOrOne_ParserOptions: ParserOptions
        // zeroOrOne_TOKENTYPE: TOKENTYPE
        // zeroOrOne_AssignedValue: AssignedValue
        // zeroOrOne_CODE: CODE
        // oneToMany_Rule: Rule
        // oneToMany_State: State
        // zeroOrOne_Merge: Merge
        // zeroOrOne_Guard: Guard
        // zeroOrOne_Multiplier: Multiplier
        // zeroOrOne_OnEntry: OnEntry
        // zeroOrOne_OnExit: OnExit
        // zeroOrOne_TransitionAction: TransitionAction

        public void EarliestNonterminalInList(object[] args)
        {
            List<object> argList = new List<object>();
            argList.Add(args[1]);
            args[0] = argList;
        }

        // zeroOrOne_ParserOptions:
        // zeroOrOne_TOKENTYPE:
        // zeroOrOne_AssignedValue:
        // zeroOrOne_CODE:
        // zeroOrOne_Merge:
        // zeroToMany_Element:
        // zeroOrOne_Guard:
        // zeroOrOne_Multiplier:
        // zeroOrOne_OnEntry:
        // zeroOrOne_OnExit:
        // zeroOrOne_TransitionAction:

        public void EmptyList(object[] args)
        {
            args[0] = new List<object>();
        }

        // OptionList: ERR

        public void Action_OptionList_2(object[] args)
        {
            Error("Badly formed parser option");
        }

        // ParserOption: USING IDENTIFIER

        public void Action_ParserOption_0(object[] args)
        {
            string arg2 = (string)args[2];
            AddUsing(arg2);
        }

        // ParserOption: NAMESPACE IDENTIFIER

        public void Action_ParserOption_1(object[] args)
        {
            string arg2 = (string)args[2];
            Namespace = arg2;
        }

        // ParserOption: PARSERCLASS IDENTIFIER

        public void Action_ParserOption_2(object[] args)
        {
            string arg2 = (string)args[2];
            ParserClass = arg2;
        }

        // ParserOption: FSMCLASS IDENTIFIER

        public void Action_ParserOption_3(object[] args)
        {
            string arg2 = (string)args[2];
            FSMClass = arg2;
        }

        // ParserOption: ASSEMBLYREF IDENTIFIER

        public void Action_ParserOption_4(object[] args)
        {
            string arg2 = (string)args[2];
            AddAssemblyReference(arg2);
        }

        // Events: TOKENS LBRACE IdentWithOptAssignList RBRACE

        public void Action_Events_0(object[] args)
        {
            List<Tuple<string, string, int>> arg3 = (List<Tuple<string, string, int>>)args[3];
            foreach(Tuple<string, string, int> token in arg3)
            {
                if(!CheckAndInsertToken(token.Item1, token.Item2, token.Item3))
                    break;
            }
        }

        // Events: TOKENS ERR RBRACE

        public void Action_Events_1(object[] args)
        {
            Error
            (
                "Token/event list should be a comma separated list of " +
                "identifiers or identifier=value pairs"
            );
        }

        // IdentWithOptAssignList: IdentWithOptAssignList COMMA IdentWithOptAssign

        public void Action_IdentWithOptAssignList_0(object[] args)
        {
            List<Tuple<string, string, int>> arg0 = default(List<Tuple<string, string, int>>);
            List<Tuple<string, string, int>> arg1 = (List<Tuple<string, string, int>>)args[1];
            Tuple<string, string, int> arg3 = (Tuple<string, string, int>)args[3];
            try
            {
                arg1.Add(arg3);
                arg0 = arg1;
            }
            finally
            {
                args[0] = arg0;
            }
        }

        // IdentWithOptAssignList: IdentWithOptAssign

        public void Action_IdentWithOptAssignList_1(object[] args)
        {
            List<Tuple<string, string, int>> arg0 = default(List<Tuple<string, string, int>>);
            Tuple<string, string, int> arg1 = (Tuple<string, string, int>)args[1];
            try
            {
                arg0 = new List<Tuple<string, string, int>> { arg1 };
            }
            finally
            {
                args[0] = arg0;
            }
        }

        // IdentWithOptAssign: IDENTIFIER zeroOrOne_TOKENTYPE zeroOrOne_AssignedValue

        public void Action_IdentWithOptAssign_0(object[] args)
        {
            Tuple<string, string, int> arg0 = default(Tuple<string, string, int>);
            string arg1 = (string)args[1];
            IOptional<string> arg2 = AsOptional<string>(args[2]);
            IOptional<int> arg3 = AsOptional<int>(args[3]);
            try
            {
                arg0 = 
                    new Tuple<string, string, int>
                    (
                        arg1, 
                        arg2.Value, 
                        arg3.HasValue 
                			? arg3.Value 
                			: Grammar.UnassignedTokenValue
                    );
            }
            finally
            {
                args[0] = arg0;
            }
        }

        // AssignedValue: EQUALS INTEGER

        public void Action_AssignedValue_0(object[] args)
        {
            int arg0 = default(int);
            int arg2 = (int)args[2];
            try
            {
                arg0 = arg2;
            }
            finally
            {
                args[0] = arg0;
            }
        }

        // Guards: CONDITIONS LBRACE GuardList RBRACE

        public void Action_Guards_0(object[] args)
        {
            List<GrammarGuardOrAction> arg3 = (List<GrammarGuardOrAction>)args[3];
            foreach(GrammarGuardOrAction guard in arg3)
            {
                if(!CheckAndInsertGuardToken(guard))
                    break;
            }
        }

        // Guards: CONDITIONS ERR RBRACE

        public void Action_Guards_1(object[] args)
        {
            Error("List of guards must be guard function names separated by commas");
        }

        // IdentifierList: IdentifierList COMMA IDENTIFIER

        public void Action_IdentifierList_0(object[] args)
        {
            List<string> arg0 = default(List<string>);
            List<string> arg1 = (List<string>)args[1];
            string arg3 = (string)args[3];
            try
            {
                arg1.Add(arg3);
                arg0 = arg1;
            }
            finally
            {
                args[0] = arg0;
            }
        }

        // IdentifierList: IDENTIFIER

        public void Action_IdentifierList_1(object[] args)
        {
            List<string> arg0 = default(List<string>);
            string arg1 = (string)args[1];
            try
            {
                arg0 = new List<string> { arg1 };
            }
            finally
            {
                args[0] = arg0;
            }
        }

        // GuardList: GuardList COMMA GuardInstance

        public void Action_GuardList_0(object[] args)
        {
            List<GrammarGuardOrAction> arg0 = default(List<GrammarGuardOrAction>);
            List<GrammarGuardOrAction> arg1 = (List<GrammarGuardOrAction>)args[1];
            GrammarGuardOrAction arg3 = (GrammarGuardOrAction)args[3];
            try
            {
                arg1.Add(arg3);
                arg0 = arg1;
            }
            finally
            {
                args[0] = arg0;
            }
        }

        // GuardList: GuardInstance

        public void Action_GuardList_1(object[] args)
        {
            List<GrammarGuardOrAction> arg0 = default(List<GrammarGuardOrAction>);
            GrammarGuardOrAction arg1 = (GrammarGuardOrAction)args[1];
            try
            {
                arg0 = new List<GrammarGuardOrAction> { arg1 };
            }
            finally
            {
                args[0] = arg0;
            }
        }

        // GuardInstance: IDENTIFIER zeroOrOne_TOKENTYPE zeroOrOne_CODE

        public void Action_GuardInstance_0(object[] args)
        {
            GrammarGuardOrAction arg0 = default(GrammarGuardOrAction);
            string arg1 = (string)args[1];
            IOptional<string> arg3 = AsOptional<string>(args[3]);
            IOptional<string> arg2 = AsOptional<string>(args[2]);
            try
            {
                arg0 = new GrammarGuardOrAction(arg1, arg3.Value, arg2.Value);
            }
            finally
            {
                args[0] = arg0;
            }
        }

        // oneToMany_Rule: oneToMany_Rule Rule
        // oneToMany_State: oneToMany_State State
        // zeroToMany_Element: zeroToMany_Element Element

        public void LatestNonterminalInList(object[] args)
        {
            List<object> argList = args[1] as List<object>;
            argList.Add(args[2]);
            args[0] = argList;
        }

        // Rules: GRAMMAR LPAREN IDENTIFIER RPAREN LBRACE oneToMany_Rule RBRACE

        public void Action_Rules_0(object[] args)
        {
            string arg3 = (string)args[3];
            if(!ConstructedGrammar.SetStartingNonterminal(arg3))
                Error("No grammar entry symbol found called " + arg3); 
        }

        // Rules: FSM LPAREN IDENTIFIER RPAREN LBRACE oneToMany_State RBRACE

        public void Action_Rules_1(object[] args)
        {
            string arg3 = (string)args[3];
            string result = ConstructedGrammar.ValidateStates(arg3);
            if(!string.IsNullOrEmpty(result))
                Error(result);
        }

        // RuleNameAndType: IDENTIFIER zeroOrOne_TOKENTYPE COLON

        public void Action_RuleNameAndType_0(object[] args)
        {
            GrammarToken arg0 = default(GrammarToken);
            string arg1 = (string)args[1];
            IOptional<string> arg2 = AsOptional<string>(args[2]);
            try
            {
                arg0 = ConstructedGrammar.Terminals
                    .FirstOrDefault(t => t.Text == arg1);
                if (arg0 != null)
                    Error(arg0.Text + " already used as a terminal token name");
                else
                {
                    arg0 = ConstructedGrammar.Nonterminals
                        .FirstOrDefault(t => t.Text == arg1);
                    if (arg0 == null)
                    {
                        arg0 = new GrammarToken
                            (ConstructedGrammar.Nonterminals.Count + Grammar.MinNonterminalValue + 1,
                            ParserGenerator.TokenType.Nonterminal, arg1, arg2.Value);
                        ConstructedGrammar.Nonterminals.Add(arg0);
                    }
                    else if(arg2.HasValue 
                        && !string.IsNullOrEmpty(arg0.ValueType) 
                        && arg2.Value != arg0.ValueType)
                    {
                        Error("Non-terminal " + arg0.Text + " has conflicting Value types");
                    }
                    else if(string.IsNullOrEmpty(arg0.ValueType))
                        arg0.ValueType = arg2.Value;
                }
                CurrentRuleLHS = arg0;
            }
            finally
            {
                args[0] = arg0;
            }
        }

        // Rule: RuleNameAndType ProductionList zeroOrOne_Merge SEMI

        public void Action_Rule_0(object[] args)
        {
            IOptional<GrammarGuardOrAction> arg3 = AsOptional<GrammarGuardOrAction>(args[3]);
            GrammarToken arg1 = (GrammarToken)args[1];
            // Capture the merge handler if it exists

            if(arg3.HasValue)
            {
                if(ConstructedGrammar.MergeActions.ContainsKey(arg1.Text))
                {
                    // Generate error to indicate that there has
                    // already been a merge handler defined for
                    // this non-terminal token
                                    
                    Error("Multiple merge actions defined for non-terminal " + arg1.Text);
                }
                else
                    ConstructedGrammar.MergeActions.Add(arg1.Text, arg3.Value);
            }
        }

        // Production: zeroToMany_Element zeroOrOne_CODE

        public void Action_Production_0(object[] args)
        {
            IList<GrammarElement> arg1 = AsList<GrammarElement>(args[1]);
            IOptional<string> arg2 = AsOptional<string>(args[2]);
            // The index number for the production is corrected
            // later when it gets inserted into the list of Productions

            GrammarProduction gp = new GrammarProduction
                    (ConstructedGrammar, 0, arg1, arg2.Value);
            AppendGrammarProduction(CurrentRuleLHS, gp);
            string errMsg = gp.ValidateCodeArguments();
            if(!string.IsNullOrEmpty(errMsg))
            	Error(errMsg);
        }

        // Element: IDENTIFIER zeroOrOne_Guard zeroOrOne_Multiplier

        public void Action_Element_0(object[] args)
        {
            GrammarElement arg0 = default(GrammarElement);
            IOptional<Tuple<Multiplicity, BoolExpr>> arg3 = AsOptional<Tuple<Multiplicity, BoolExpr>>(args[3]);
            string arg1 = (string)args[1];
            IOptional<BoolExpr> arg2 = AsOptional<BoolExpr>(args[2]);
            try
            {
                Multiplicity elementMultiplicity = Multiplicity.ExactlyOne;
                BoolExpr multiplicityGuard = default(BoolExpr);

                if(arg3.HasValue)
                {
                	elementMultiplicity = arg3.Value.Item1;
                	multiplicityGuard = arg3.Value.Item2;
                }

                // Deal with the special error identifier

                if(arg1 == "error" && OutputParserSupportsErrorRecovery)
                    arg1 = "ERR";

                // Manage syntax errors for the 'error' keyword

                if(arg1 == "ERR" 
                    && (!OutputParserSupportsErrorRecovery 
                        || elementMultiplicity != Multiplicity.ExactlyOne 
                        || arg2.HasValue))
                    Error("Keyword 'error' cannot be followed by '?', '+', '*', or a guard condition");
                else
                    // Use a method in the LR parser to construct the
                    // additional multiplicity rules, and to replace
                    // the identifier and its multiplicity symbol with
                    // the corresponding element.

                    arg0 = ManageMultiplicityProductions
                        (arg1, arg2.Value, elementMultiplicity, multiplicityGuard);
            }
            finally
            {
                args[0] = arg0;
            }
        }

        // Guard: LBRACK CondExpr RBRACK

        public void Action_Guard_0(object[] args)
        {
            BoolExpr arg0 = default(BoolExpr);
            BoolExpr arg2 = (BoolExpr)args[2];
            try
            {
                // The element between the square brackets 
                // is the conditional expression 

                arg0 = arg2; 
            }
            finally
            {
                args[0] = arg0;
            }
        }

        // Multiplier: MULTIPLICITY zeroOrOne_Guard

        public void Action_Multiplier_0(object[] args)
        {
            Tuple<Multiplicity, BoolExpr> arg0 = default(Tuple<Multiplicity, BoolExpr>);
            Multiplicity arg1 = (Multiplicity)args[1];
            IOptional<BoolExpr> arg2 = AsOptional<BoolExpr>(args[2]);
            try
            {
                arg0 = new Tuple<Multiplicity, BoolExpr>(arg1, arg2.Value);
            }
            finally
            {
                args[0] = arg0;
            }
        }

        // CondExpr: CondExpr OR OrableExpr

        public void Action_CondExpr_0(object[] args)
        {
            BoolExpr arg0 = default(BoolExpr);
            BoolExpr arg1 = (BoolExpr)args[1];
            BoolExpr arg3 = (BoolExpr)args[3];
            try
            {
                arg0 = new OrExpr(arg1, arg3); 
            }
            finally
            {
                args[0] = arg0;
            }
        }

        // CondExpr: OrableExpr

        public void Action_CondExpr_1(object[] args)
        {
            BoolExpr arg0 = default(BoolExpr);
            BoolExpr arg1 = (BoolExpr)args[1];
            try
            {
                arg0 = arg1;
            }
            finally
            {
                args[0] = arg0;
            }
        }

        // OrableExpr: OrableExpr AND AndableExpr

        public void Action_OrableExpr_0(object[] args)
        {
            BoolExpr arg0 = default(BoolExpr);
            BoolExpr arg1 = (BoolExpr)args[1];
            BoolExpr arg3 = (BoolExpr)args[3];
            try
            {
                arg0 = new AndExpr(arg1, arg3); 
            }
            finally
            {
                args[0] = arg0;
            }
        }

        // OrableExpr: AndableExpr

        public void Action_OrableExpr_1(object[] args)
        {
            BoolExpr arg0 = default(BoolExpr);
            BoolExpr arg1 = (BoolExpr)args[1];
            try
            {
                arg0 = arg1;
            }
            finally
            {
                args[0] = arg0;
            }
        }

        // AndableExpr: RootExpr

        public void Action_AndableExpr_0(object[] args)
        {
            BoolExpr arg0 = default(BoolExpr);
            BoolExpr arg1 = (BoolExpr)args[1];
            try
            {
                // Pass the root expression back up the rule tree 

                arg0 = arg1; 
            }
            finally
            {
                args[0] = arg0;
            }
        }

        // AndableExpr: NOT RootExpr

        public void Action_AndableExpr_1(object[] args)
        {
            BoolExpr arg0 = default(BoolExpr);
            BoolExpr arg2 = (BoolExpr)args[2];
            try
            {
                // Prepend the root expression with a NOT 
                // operator node, and return that to the 
                // parent rule 
                 
                arg0 = new NotExpr(arg2); 
            }
            finally
            {
                args[0] = arg0;
            }
        }

        // RootExpr: IDENTIFIER

        public void Action_RootExpr_0(object[] args)
        {
            BoolExpr arg0 = default(BoolExpr);
            string arg1 = (string)args[1];
            try
            {
                // Look up the identifier among the list of guards 

                GrammarToken gt = ConstructedGrammar.Guards 
                    .FirstOrDefault(t => t.Text == arg1); 

                if (gt == null) 
                    Error(arg1 + " is not a valid guard condition"); 
                else 
                    arg0 = new LeafExpr(gt.Text, 
                        ConstructedGrammar.BooleanExpressionCache.IndexProvider); 
            }
            finally
            {
                args[0] = arg0;
            }
        }

        // RootExpr: LPAREN CondExpr RPAREN

        public void Action_RootExpr_1(object[] args)
        {
            BoolExpr arg0 = default(BoolExpr);
            BoolExpr arg2 = (BoolExpr)args[2];
            try
            {
                // The second argument should already be the 
                // correct BoolExpr to return to the parent rule 

                arg0 = arg2; 
            }
            finally
            {
                args[0] = arg0;
            }
        }

        // State: IDENTIFIER COLON zeroOrOne_OnEntry zeroOrOne_OnExit TransitionList SEMI

        public void Action_State_0(object[] args)
        {
            string arg1 = (string)args[1];
            IOptional<GrammarGuardOrAction> arg3 = AsOptional<GrammarGuardOrAction>(args[3]);
            IOptional<GrammarGuardOrAction> arg4 = AsOptional<GrammarGuardOrAction>(args[4]);
            List<StateTransition> arg5 = (List<StateTransition>)args[5];
            // First process the state identifier
            // and store it in the list of non-terminals

            GrammarToken gt = ConstructedGrammar.Nonterminals
                .FirstOrDefault(t => t.Text == arg1);
            if (gt == null)
            {
                gt = new GrammarToken
                    (ConstructedGrammar.Nonterminals.Count + Grammar.MinNonterminalValue + 1,
                    ParserGenerator.TokenType.Nonterminal, arg1);
                ConstructedGrammar.Nonterminals.Add(gt);
            }

            // Populate the state with the transition list. If there are
            // multiple state sections with the same state name, they are
            // treated as if they were contiguous.

            State s = ConstructedGrammar.MachineStates.FirstOrDefault(t => t.StateName.Text == arg1);
            if(s == null)
            {
                s = new State(gt, arg3.Value, arg4.Value);
                ConstructedGrammar.MachineStates.Add(s);
            }
            s.Transitions.AddRange(arg5);
        }

        // OnEntry: ONENTRY TransitionAction

        public void Action_OnEntry_0(object[] args)
        {
            GrammarGuardOrAction arg0 = default(GrammarGuardOrAction);
            GrammarGuardOrAction arg2 = (GrammarGuardOrAction)args[2];
            try
            {
                arg0 = arg2;
            }
            finally
            {
                args[0] = arg0;
            }
        }

        // OnExit: ONEXIT TransitionAction

        public void Action_OnExit_0(object[] args)
        {
            GrammarGuardOrAction arg0 = default(GrammarGuardOrAction);
            GrammarGuardOrAction arg2 = (GrammarGuardOrAction)args[2];
            try
            {
                arg0 = arg2;
            }
            finally
            {
                args[0] = arg0;
            }
        }

        // TransitionList: TransitionList OR Transition

        public void Action_TransitionList_0(object[] args)
        {
            List<StateTransition> arg0 = default(List<StateTransition>);
            List<StateTransition> arg1 = (List<StateTransition>)args[1];
            StateTransition arg3 = (StateTransition)args[3];
            try
            {
                arg1.Add(arg3);
                arg0 = arg1;
            }
            finally
            {
                args[0] = arg0;
            }
        }

        // TransitionList: Transition

        public void Action_TransitionList_1(object[] args)
        {
            List<StateTransition> arg0 = default(List<StateTransition>);
            StateTransition arg1 = (StateTransition)args[1];
            try
            {
                arg0 = new List<StateTransition> { arg1 };
            }
            finally
            {
                args[0] = arg0;
            }
        }

        // Transition: Element IDENTIFIER zeroOrOne_TransitionAction

        public void Action_Transition_0(object[] args)
        {
            StateTransition arg0 = default(StateTransition);
            string arg2 = (string)args[2];
            GrammarElement arg1 = (GrammarElement)args[1];
            IOptional<GrammarGuardOrAction> arg3 = AsOptional<GrammarGuardOrAction>(args[3]);
            try
            {
                // Find the identifier used as the target state
                // and store it in the list of non-terminals

                GrammarToken gt = ConstructedGrammar.Nonterminals
                    .FirstOrDefault(t => t.Text == arg2);
                if (gt == null)
                {
                    gt = new GrammarToken
                        (ConstructedGrammar.Nonterminals.Count + Grammar.MinNonterminalValue + 1,
                        ParserGenerator.TokenType.Nonterminal, arg2);
                    ConstructedGrammar.Nonterminals.Add(gt);
                }

                // Now create a state transition

                arg0 = new StateTransition
                {
                    TransitionEventAndGuard = arg1,
                    TargetState = gt,
                    Code = arg3.Value
                };
            }
            finally
            {
                args[0] = arg0;
            }
        }

        // Transition: Element zeroOrOne_TransitionAction

        public void Action_Transition_1(object[] args)
        {
            StateTransition arg0 = default(StateTransition);
            GrammarElement arg1 = (GrammarElement)args[1];
            IOptional<GrammarGuardOrAction> arg2 = AsOptional<GrammarGuardOrAction>(args[2]);
            try
            {
                arg0 = new StateTransition
                {
                    TransitionEventAndGuard = arg1,
                    TargetState = null,
                    Code = arg2.Value
                };
            }
            finally
            {
                args[0] = arg0;
            }
        }

        // TransitionAction: CODE

        public void Action_TransitionAction_0(object[] args)
        {
            GrammarGuardOrAction arg0 = default(GrammarGuardOrAction);
            string arg1 = (string)args[1];
            try
            {
                arg0 = new GrammarGuardOrAction(string.Empty, arg1);
            }
            finally
            {
                args[0] = arg0;
            }
        }

        // Merge: MERGE CODE

        public void Action_Merge_0(object[] args)
        {
            GrammarGuardOrAction arg0 = default(GrammarGuardOrAction);
            string arg2 = (string)args[2];
            try
            {
                arg0 = new GrammarGuardOrAction(string.Empty, arg2);
            }
            finally
            {
                args[0] = arg0;
            }
        }
    }
}
