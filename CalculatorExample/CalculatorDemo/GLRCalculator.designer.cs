// AUTOGENERATED CODE FROM PARSELR PARSER-GENERATOR. DO NOT EDIT.
//
// Date generated: Mon, 31 Aug 2020 12:38:02 GMT
// This code represents the hidden derived class from the
// application-specific parser class, itself derived from
// Parsing.Parser. There should be no need to edit this file.

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.IO;
using Parsing;

namespace CalculatorDemo.AutoGenerated
{
    /// <summary>
    /// Implements the auto-generated part of the user-specific
    /// parser class. This gives the action functions and guards
    /// in-class access to the contents of the user-specific parser.
    /// </summary>

    public class GLRCalculator_AutoGenerated : GLRCalculator
    {
        /// <summary>
        /// Initialiser for source-code parser
        /// generator that is subsequently compiled to
        /// obtain the new run-time code.
        /// </summary>

        public static ParserTable InitParserTable()
        {
            ParserTable table = new ParserTable();

            // Initialize the parser factory delegate

            table.InitializeParserConstructor(typeof(GLRCalculator_AutoGenerated));

            table.Tokens = new TwoWayMap<string, int>();
            table.ErrorRecoveryEnabled = false;

            // Terminal token names and values

            table.Tokens.Add("EOF", 16385);
            table.Tokens.Add("SOF", 16386);
            table.Tokens.Add("ERR", 16387);
            table.Tokens.Add("LPAREN", 16388);
            table.Tokens.Add("RPAREN", 16389);
            table.Tokens.Add("PLUS", 16390);
            table.Tokens.Add("MINUS", 16391);
            table.Tokens.Add("TIMES", 16392);
            table.Tokens.Add("DIVIDE", 16393);
            table.Tokens.Add("POWER", 16394);
            table.Tokens.Add("NUMBER", 16395);
            table.Tokens.Add("PERIOD", 16396);
            table.Tokens.Add("EXPONENT", 16397);

            // Non-terminal token names and values

            table.Tokens.Add("_Start", 32768);
            table.Tokens.Add("result", 32769);
            table.Tokens.Add("expression", 32770);
            table.Tokens.Add("leafExpression", 32771);
            table.Tokens.Add("optMinus", 32772);
            table.Tokens.Add("number", 32773);
            table.Tokens.Add("exponent", 32774);
            table.Tokens.Add("mantissa", 32775);

            table.Guards = InitGuards();

            table.Productions = new ParserProduction[]
            {
                new ParserProduction
                (
                    0, 0, "_Start: SOF result",
                    2, 32768 	// _Start
                ),

                new ParserProduction
                (
                    1, 0, "result: expression",
                    1, 32769,	// result
                    new ParserInlineAction("Action_result_0")
                ),

                new ParserProduction
                (
                    2, 0, "leafExpression: optMinus number",
                    2, 32771,	// leafExpression
                    new ParserInlineAction("Action_leafExpression_0")
                ),

                new ParserProduction
                (
                    3, 1, "leafExpression: optMinus LPAREN expression RPAREN",
                    4, 32771,	// leafExpression
                    new ParserInlineAction("Action_leafExpression_1")
                ),

                new ParserProduction
                (
                    4, 0, "optMinus: MINUS",
                    1, 32772,	// optMinus
                    new ParserInlineAction("Action_optMinus_0")
                ),

                new ParserProduction
                (
                    5, 1, "optMinus:",
                    0, 32772,	// optMinus
                    new ParserInlineAction("Action_optMinus_1")
                ),

                new ParserProduction
                (
                    6, 0, "expression: leafExpression",
                    1, 32770,	// expression
                    new ParserInlineAction("Action_expression_0")
                ),

                new ParserProduction
                (
                    7, 1, "expression: expression POWER expression",
                    3, 32770,	// expression
                    new ParserInlineAction("Action_expression_1")
                ),

                new ParserProduction
                (
                    8, 2, "expression: expression TIMES expression",
                    3, 32770,	// expression
                    new ParserInlineAction("Action_expression_2")
                ),

                new ParserProduction
                (
                    9, 3, "expression: expression DIVIDE expression",
                    3, 32770,	// expression
                    new ParserInlineAction("Action_expression_3")
                ),

                new ParserProduction
                (
                    10, 4, "expression: expression PLUS expression",
                    3, 32770,	// expression
                    new ParserInlineAction("Action_expression_4")
                ),

                new ParserProduction
                (
                    11, 5, "expression: expression MINUS expression",
                    3, 32770,	// expression
                    new ParserInlineAction("Action_expression_5")
                ),

                new ParserProduction
                (
                    12, 0, "number: NUMBER exponent",
                    2, 32773,	// number
                    new ParserInlineAction("Action_number_0")
                ),

                new ParserProduction
                (
                    13, 1, "number: NUMBER mantissa exponent",
                    3, 32773,	// number
                    new ParserInlineAction("Action_number_1")
                ),

                new ParserProduction
                (
                    14, 2, "number: mantissa exponent",
                    2, 32773,	// number
                    new ParserInlineAction("Action_number_2")
                ),

                new ParserProduction
                (
                    15, 0, "mantissa: PERIOD NUMBER",
                    2, 32775,	// mantissa
                    new ParserInlineAction("Action_mantissa_0")
                ),

                new ParserProduction
                (
                    16, 0, "exponent: EXPONENT NUMBER",
                    2, 32774,	// exponent
                    new ParserInlineAction("Action_exponent_0")
                ),

                new ParserProduction
                (
                    17, 1, "exponent: EXPONENT MINUS NUMBER",
                    3, 32774,	// exponent
                    new ParserInlineAction("Action_exponent_1")
                ),

                new ParserProduction
                (
                    18, 2, "exponent:",
                    0, 32774,	// exponent
                    new ParserInlineAction("Action_exponent_2")
                ),

            };

            table.States = new ParserState[]
            {
                new ParserState
                {
                    StateString =
                        "State S0 CORE ITEMS:\r\n" +
                        "R0: _Start: ^ SOF result\r\n" +
                        "SHIFTS, REDUCTIONS AND GOTOS\r\n" +
                        "  SOF: SHIFT to state S1\r\n",

                    TerminalColumns = new ParserStateColumn[]
                    {
                        new ParserStateColumn
                        (
                            16386,	// On SOF
                            null,
                            false,	// shift to
                            1		// state 1
                        ),
                    },

                    NonterminalColumns = new ParserStateColumn[0],
                },

                new ParserState
                {
                    StateString =
                        "State S1 CORE ITEMS:\r\n" +
                        "R0: _Start: SOF ^ result\r\n" +
                        "CLOSURE ITEMS:\r\n" +
                        "R1: result: ^ expression\r\n" +
                        "R6: expression: ^ leafExpression\r\n" +
                        "R7: expression: ^ expression POWER expression\r\n" +
                        "R8: expression: ^ expression TIMES expression\r\n" +
                        "R9: expression: ^ expression DIVIDE expression\r\n" +
                        "R10: expression: ^ expression PLUS expression\r\n" +
                        "R11: expression: ^ expression MINUS expression\r\n" +
                        "R2: leafExpression: ^ optMinus number\r\n" +
                        "R3: leafExpression: ^ optMinus LPAREN expression RPAREN\r\n" +
                        "R4: optMinus: ^ MINUS\r\n" +
                        "R5: optMinus: ^\r\n" +
                        "{\r\n" +
                        "    NUMBER,\r\n" +
                        "    PERIOD,\r\n" +
                        "    LPAREN\r\n" +
                        "}\r\n" +
                        "SHIFTS, REDUCTIONS AND GOTOS\r\n" +
                        "  MINUS: SHIFT to state S6\r\n" +
                        "  NUMBER: REDUCE by rule R5: optMinus:;\r\n" +
                        "  PERIOD: REDUCE by rule R5: optMinus:;\r\n" +
                        "  LPAREN: REDUCE by rule R5: optMinus:;\r\n" +
                        "  result: GOTO state S2\r\n" +
                        "  expression: GOTO state S3\r\n" +
                        "  leafExpression: GOTO state S4\r\n" +
                        "  optMinus: GOTO state S5\r\n",

                    TerminalColumns = new ParserStateColumn[]
                    {
                        new ParserStateColumn
                        (
                            16391,	// On MINUS
                            null,
                            false,	// shift to
                            6		// state 6
                        ),
                        new ParserStateColumn
                        (
                            16395,	// On NUMBER
                            null,
                            true,	// reduce by
                            5		// production 5
                        ),
                        new ParserStateColumn
                        (
                            16396,	// On PERIOD
                            null,
                            true,	// reduce by
                            5		// production 5
                        ),
                        new ParserStateColumn
                        (
                            16388,	// On LPAREN
                            null,
                            true,	// reduce by
                            5		// production 5
                        ),
                    },

                    // GOTO non-terminals used to select next state
                    // after a REDUCE operation has taken place

                    NonterminalColumns = new ParserStateColumn[]
                    {
                        new ParserStateColumn
                        (
                            32769,	// On result
                            null,
                            false,	// goto
                            2		// state 2
                        ),
                        new ParserStateColumn
                        (
                            32770,	// On expression
                            null,
                            false,	// goto
                            3		// state 3
                        ),
                        new ParserStateColumn
                        (
                            32771,	// On leafExpression
                            null,
                            false,	// goto
                            4		// state 4
                        ),
                        new ParserStateColumn
                        (
                            32772,	// On optMinus
                            null,
                            false,	// goto
                            5		// state 5
                        ),
                    },
                },

                new ParserState
                {
                    StateString =
                        "State S2 CORE ITEMS:\r\n" +
                        "R0: _Start: SOF result ^\r\n" +
                        "{\r\n" +
                        "    EOF\r\n" +
                        "}\r\n" +
                        "SHIFTS, REDUCTIONS AND GOTOS\r\n" +
                        "  EOF: REDUCE by rule R0: _Start: SOF result;\r\n",

                    TerminalColumns = new ParserStateColumn[]
                    {
                        new ParserStateColumn
                        (
                            16385,	// On EOF
                            null,
                            true,	// reduce by
                            0		// production 0
                        ),
                    },

                    NonterminalColumns = new ParserStateColumn[0],
                },

                new ParserState
                {
                    StateString =
                        "State S3 CORE ITEMS:\r\n" +
                        "R1: result: expression ^\r\n" +
                        "{\r\n" +
                        "    EOF\r\n" +
                        "}\r\n" +
                        "R7: expression: expression ^ POWER expression\r\n" +
                        "R8: expression: expression ^ TIMES expression\r\n" +
                        "R9: expression: expression ^ DIVIDE expression\r\n" +
                        "R10: expression: expression ^ PLUS expression\r\n" +
                        "R11: expression: expression ^ MINUS expression\r\n" +
                        "SHIFTS, REDUCTIONS AND GOTOS\r\n" +
                        "  POWER: SHIFT to state S7\r\n" +
                        "  TIMES: SHIFT to state S8\r\n" +
                        "  DIVIDE: SHIFT to state S9\r\n" +
                        "  PLUS: SHIFT to state S10\r\n" +
                        "  MINUS: SHIFT to state S11\r\n" +
                        "  EOF: REDUCE by rule R1: result: expression;\r\n",

                    TerminalColumns = new ParserStateColumn[]
                    {
                        new ParserStateColumn
                        (
                            16394,	// On POWER
                            null,
                            false,	// shift to
                            7		// state 7
                        ),
                        new ParserStateColumn
                        (
                            16392,	// On TIMES
                            null,
                            false,	// shift to
                            8		// state 8
                        ),
                        new ParserStateColumn
                        (
                            16393,	// On DIVIDE
                            null,
                            false,	// shift to
                            9		// state 9
                        ),
                        new ParserStateColumn
                        (
                            16390,	// On PLUS
                            null,
                            false,	// shift to
                            10		// state 10
                        ),
                        new ParserStateColumn
                        (
                            16391,	// On MINUS
                            null,
                            false,	// shift to
                            11		// state 11
                        ),
                        new ParserStateColumn
                        (
                            16385,	// On EOF
                            null,
                            true,	// reduce by
                            1		// production 1
                        ),
                    },

                    NonterminalColumns = new ParserStateColumn[0],
                },

                new ParserState
                {
                    StateString =
                        "State S4 CORE ITEMS:\r\n" +
                        "R6: expression: leafExpression ^\r\n" +
                        "{\r\n" +
                        "    EOF,\r\n" +
                        "    POWER,\r\n" +
                        "    TIMES,\r\n" +
                        "    DIVIDE,\r\n" +
                        "    PLUS,\r\n" +
                        "    MINUS\r\n" +
                        "}\r\n" +
                        "SHIFTS, REDUCTIONS AND GOTOS\r\n" +
                        "  EOF: REDUCE by rule R6: expression: leafExpression;\r\n" +
                        "  POWER: REDUCE by rule R6: expression: leafExpression;\r\n" +
                        "  TIMES: REDUCE by rule R6: expression: leafExpression;\r\n" +
                        "  DIVIDE: REDUCE by rule R6: expression: leafExpression;\r\n" +
                        "  PLUS: REDUCE by rule R6: expression: leafExpression;\r\n" +
                        "  MINUS: REDUCE by rule R6: expression: leafExpression;\r\n",

                    TerminalColumns = new ParserStateColumn[]
                    {
                        new ParserStateColumn
                        (
                            16385,	// On EOF
                            null,
                            true,	// reduce by
                            6		// production 6
                        ),
                        new ParserStateColumn
                        (
                            16394,	// On POWER
                            null,
                            true,	// reduce by
                            6		// production 6
                        ),
                        new ParserStateColumn
                        (
                            16392,	// On TIMES
                            null,
                            true,	// reduce by
                            6		// production 6
                        ),
                        new ParserStateColumn
                        (
                            16393,	// On DIVIDE
                            null,
                            true,	// reduce by
                            6		// production 6
                        ),
                        new ParserStateColumn
                        (
                            16390,	// On PLUS
                            null,
                            true,	// reduce by
                            6		// production 6
                        ),
                        new ParserStateColumn
                        (
                            16391,	// On MINUS
                            null,
                            true,	// reduce by
                            6		// production 6
                        ),
                    },

                    NonterminalColumns = new ParserStateColumn[0],
                },

                new ParserState
                {
                    StateString =
                        "State S5 CORE ITEMS:\r\n" +
                        "R2: leafExpression: optMinus ^ number\r\n" +
                        "R3: leafExpression: optMinus ^ LPAREN expression RPAREN\r\n" +
                        "CLOSURE ITEMS:\r\n" +
                        "R12: number: ^ NUMBER exponent\r\n" +
                        "R13: number: ^ NUMBER mantissa exponent\r\n" +
                        "R14: number: ^ mantissa exponent\r\n" +
                        "R15: mantissa: ^ PERIOD NUMBER\r\n" +
                        "SHIFTS, REDUCTIONS AND GOTOS\r\n" +
                        "  LPAREN: SHIFT to state S13\r\n" +
                        "  NUMBER: SHIFT to state S14\r\n" +
                        "  PERIOD: SHIFT to state S16\r\n" +
                        "  number: GOTO state S12\r\n" +
                        "  mantissa: GOTO state S15\r\n",

                    TerminalColumns = new ParserStateColumn[]
                    {
                        new ParserStateColumn
                        (
                            16388,	// On LPAREN
                            null,
                            false,	// shift to
                            13		// state 13
                        ),
                        new ParserStateColumn
                        (
                            16395,	// On NUMBER
                            null,
                            false,	// shift to
                            14		// state 14
                        ),
                        new ParserStateColumn
                        (
                            16396,	// On PERIOD
                            null,
                            false,	// shift to
                            16		// state 16
                        ),
                    },

                    // GOTO non-terminals used to select next state
                    // after a REDUCE operation has taken place

                    NonterminalColumns = new ParserStateColumn[]
                    {
                        new ParserStateColumn
                        (
                            32773,	// On number
                            null,
                            false,	// goto
                            12		// state 12
                        ),
                        new ParserStateColumn
                        (
                            32775,	// On mantissa
                            null,
                            false,	// goto
                            15		// state 15
                        ),
                    },
                },

                new ParserState
                {
                    StateString =
                        "State S6 CORE ITEMS:\r\n" +
                        "R4: optMinus: MINUS ^\r\n" +
                        "{\r\n" +
                        "    NUMBER,\r\n" +
                        "    PERIOD,\r\n" +
                        "    LPAREN\r\n" +
                        "}\r\n" +
                        "SHIFTS, REDUCTIONS AND GOTOS\r\n" +
                        "  NUMBER: REDUCE by rule R4: optMinus: MINUS;\r\n" +
                        "  PERIOD: REDUCE by rule R4: optMinus: MINUS;\r\n" +
                        "  LPAREN: REDUCE by rule R4: optMinus: MINUS;\r\n",

                    TerminalColumns = new ParserStateColumn[]
                    {
                        new ParserStateColumn
                        (
                            16395,	// On NUMBER
                            null,
                            true,	// reduce by
                            4		// production 4
                        ),
                        new ParserStateColumn
                        (
                            16396,	// On PERIOD
                            null,
                            true,	// reduce by
                            4		// production 4
                        ),
                        new ParserStateColumn
                        (
                            16388,	// On LPAREN
                            null,
                            true,	// reduce by
                            4		// production 4
                        ),
                    },

                    NonterminalColumns = new ParserStateColumn[0],
                },

                new ParserState
                {
                    StateString =
                        "State S7 CORE ITEMS:\r\n" +
                        "R7: expression: expression POWER ^ expression\r\n" +
                        "CLOSURE ITEMS:\r\n" +
                        "R6: expression: ^ leafExpression\r\n" +
                        "R7: expression: ^ expression POWER expression\r\n" +
                        "R8: expression: ^ expression TIMES expression\r\n" +
                        "R9: expression: ^ expression DIVIDE expression\r\n" +
                        "R10: expression: ^ expression PLUS expression\r\n" +
                        "R11: expression: ^ expression MINUS expression\r\n" +
                        "R2: leafExpression: ^ optMinus number\r\n" +
                        "R3: leafExpression: ^ optMinus LPAREN expression RPAREN\r\n" +
                        "R4: optMinus: ^ MINUS\r\n" +
                        "R5: optMinus: ^\r\n" +
                        "{\r\n" +
                        "    NUMBER,\r\n" +
                        "    PERIOD,\r\n" +
                        "    LPAREN\r\n" +
                        "}\r\n" +
                        "SHIFTS, REDUCTIONS AND GOTOS\r\n" +
                        "  MINUS: SHIFT to state S6\r\n" +
                        "  NUMBER: REDUCE by rule R5: optMinus:;\r\n" +
                        "  PERIOD: REDUCE by rule R5: optMinus:;\r\n" +
                        "  LPAREN: REDUCE by rule R5: optMinus:;\r\n" +
                        "  expression: GOTO state S17\r\n" +
                        "  leafExpression: GOTO state S4\r\n" +
                        "  optMinus: GOTO state S5\r\n",

                    TerminalColumns = new ParserStateColumn[]
                    {
                        new ParserStateColumn
                        (
                            16391,	// On MINUS
                            null,
                            false,	// shift to
                            6		// state 6
                        ),
                        new ParserStateColumn
                        (
                            16395,	// On NUMBER
                            null,
                            true,	// reduce by
                            5		// production 5
                        ),
                        new ParserStateColumn
                        (
                            16396,	// On PERIOD
                            null,
                            true,	// reduce by
                            5		// production 5
                        ),
                        new ParserStateColumn
                        (
                            16388,	// On LPAREN
                            null,
                            true,	// reduce by
                            5		// production 5
                        ),
                    },

                    // GOTO non-terminals used to select next state
                    // after a REDUCE operation has taken place

                    NonterminalColumns = new ParserStateColumn[]
                    {
                        new ParserStateColumn
                        (
                            32770,	// On expression
                            null,
                            false,	// goto
                            17		// state 17
                        ),
                        new ParserStateColumn
                        (
                            32771,	// On leafExpression
                            null,
                            false,	// goto
                            4		// state 4
                        ),
                        new ParserStateColumn
                        (
                            32772,	// On optMinus
                            null,
                            false,	// goto
                            5		// state 5
                        ),
                    },
                },

                new ParserState
                {
                    StateString =
                        "State S8 CORE ITEMS:\r\n" +
                        "R8: expression: expression TIMES ^ expression\r\n" +
                        "CLOSURE ITEMS:\r\n" +
                        "R6: expression: ^ leafExpression\r\n" +
                        "R7: expression: ^ expression POWER expression\r\n" +
                        "R8: expression: ^ expression TIMES expression\r\n" +
                        "R9: expression: ^ expression DIVIDE expression\r\n" +
                        "R10: expression: ^ expression PLUS expression\r\n" +
                        "R11: expression: ^ expression MINUS expression\r\n" +
                        "R2: leafExpression: ^ optMinus number\r\n" +
                        "R3: leafExpression: ^ optMinus LPAREN expression RPAREN\r\n" +
                        "R4: optMinus: ^ MINUS\r\n" +
                        "R5: optMinus: ^\r\n" +
                        "{\r\n" +
                        "    NUMBER,\r\n" +
                        "    PERIOD,\r\n" +
                        "    LPAREN\r\n" +
                        "}\r\n" +
                        "SHIFTS, REDUCTIONS AND GOTOS\r\n" +
                        "  MINUS: SHIFT to state S6\r\n" +
                        "  NUMBER: REDUCE by rule R5: optMinus:;\r\n" +
                        "  PERIOD: REDUCE by rule R5: optMinus:;\r\n" +
                        "  LPAREN: REDUCE by rule R5: optMinus:;\r\n" +
                        "  expression: GOTO state S18\r\n" +
                        "  leafExpression: GOTO state S4\r\n" +
                        "  optMinus: GOTO state S5\r\n",

                    TerminalColumns = new ParserStateColumn[]
                    {
                        new ParserStateColumn
                        (
                            16391,	// On MINUS
                            null,
                            false,	// shift to
                            6		// state 6
                        ),
                        new ParserStateColumn
                        (
                            16395,	// On NUMBER
                            null,
                            true,	// reduce by
                            5		// production 5
                        ),
                        new ParserStateColumn
                        (
                            16396,	// On PERIOD
                            null,
                            true,	// reduce by
                            5		// production 5
                        ),
                        new ParserStateColumn
                        (
                            16388,	// On LPAREN
                            null,
                            true,	// reduce by
                            5		// production 5
                        ),
                    },

                    // GOTO non-terminals used to select next state
                    // after a REDUCE operation has taken place

                    NonterminalColumns = new ParserStateColumn[]
                    {
                        new ParserStateColumn
                        (
                            32770,	// On expression
                            null,
                            false,	// goto
                            18		// state 18
                        ),
                        new ParserStateColumn
                        (
                            32771,	// On leafExpression
                            null,
                            false,	// goto
                            4		// state 4
                        ),
                        new ParserStateColumn
                        (
                            32772,	// On optMinus
                            null,
                            false,	// goto
                            5		// state 5
                        ),
                    },
                },

                new ParserState
                {
                    StateString =
                        "State S9 CORE ITEMS:\r\n" +
                        "R9: expression: expression DIVIDE ^ expression\r\n" +
                        "CLOSURE ITEMS:\r\n" +
                        "R6: expression: ^ leafExpression\r\n" +
                        "R7: expression: ^ expression POWER expression\r\n" +
                        "R8: expression: ^ expression TIMES expression\r\n" +
                        "R9: expression: ^ expression DIVIDE expression\r\n" +
                        "R10: expression: ^ expression PLUS expression\r\n" +
                        "R11: expression: ^ expression MINUS expression\r\n" +
                        "R2: leafExpression: ^ optMinus number\r\n" +
                        "R3: leafExpression: ^ optMinus LPAREN expression RPAREN\r\n" +
                        "R4: optMinus: ^ MINUS\r\n" +
                        "R5: optMinus: ^\r\n" +
                        "{\r\n" +
                        "    NUMBER,\r\n" +
                        "    PERIOD,\r\n" +
                        "    LPAREN\r\n" +
                        "}\r\n" +
                        "SHIFTS, REDUCTIONS AND GOTOS\r\n" +
                        "  MINUS: SHIFT to state S6\r\n" +
                        "  NUMBER: REDUCE by rule R5: optMinus:;\r\n" +
                        "  PERIOD: REDUCE by rule R5: optMinus:;\r\n" +
                        "  LPAREN: REDUCE by rule R5: optMinus:;\r\n" +
                        "  expression: GOTO state S19\r\n" +
                        "  leafExpression: GOTO state S4\r\n" +
                        "  optMinus: GOTO state S5\r\n",

                    TerminalColumns = new ParserStateColumn[]
                    {
                        new ParserStateColumn
                        (
                            16391,	// On MINUS
                            null,
                            false,	// shift to
                            6		// state 6
                        ),
                        new ParserStateColumn
                        (
                            16395,	// On NUMBER
                            null,
                            true,	// reduce by
                            5		// production 5
                        ),
                        new ParserStateColumn
                        (
                            16396,	// On PERIOD
                            null,
                            true,	// reduce by
                            5		// production 5
                        ),
                        new ParserStateColumn
                        (
                            16388,	// On LPAREN
                            null,
                            true,	// reduce by
                            5		// production 5
                        ),
                    },

                    // GOTO non-terminals used to select next state
                    // after a REDUCE operation has taken place

                    NonterminalColumns = new ParserStateColumn[]
                    {
                        new ParserStateColumn
                        (
                            32770,	// On expression
                            null,
                            false,	// goto
                            19		// state 19
                        ),
                        new ParserStateColumn
                        (
                            32771,	// On leafExpression
                            null,
                            false,	// goto
                            4		// state 4
                        ),
                        new ParserStateColumn
                        (
                            32772,	// On optMinus
                            null,
                            false,	// goto
                            5		// state 5
                        ),
                    },
                },

                new ParserState
                {
                    StateString =
                        "State S10 CORE ITEMS:\r\n" +
                        "R10: expression: expression PLUS ^ expression\r\n" +
                        "CLOSURE ITEMS:\r\n" +
                        "R6: expression: ^ leafExpression\r\n" +
                        "R7: expression: ^ expression POWER expression\r\n" +
                        "R8: expression: ^ expression TIMES expression\r\n" +
                        "R9: expression: ^ expression DIVIDE expression\r\n" +
                        "R10: expression: ^ expression PLUS expression\r\n" +
                        "R11: expression: ^ expression MINUS expression\r\n" +
                        "R2: leafExpression: ^ optMinus number\r\n" +
                        "R3: leafExpression: ^ optMinus LPAREN expression RPAREN\r\n" +
                        "R4: optMinus: ^ MINUS\r\n" +
                        "R5: optMinus: ^\r\n" +
                        "{\r\n" +
                        "    NUMBER,\r\n" +
                        "    PERIOD,\r\n" +
                        "    LPAREN\r\n" +
                        "}\r\n" +
                        "SHIFTS, REDUCTIONS AND GOTOS\r\n" +
                        "  MINUS: SHIFT to state S6\r\n" +
                        "  NUMBER: REDUCE by rule R5: optMinus:;\r\n" +
                        "  PERIOD: REDUCE by rule R5: optMinus:;\r\n" +
                        "  LPAREN: REDUCE by rule R5: optMinus:;\r\n" +
                        "  expression: GOTO state S20\r\n" +
                        "  leafExpression: GOTO state S4\r\n" +
                        "  optMinus: GOTO state S5\r\n",

                    TerminalColumns = new ParserStateColumn[]
                    {
                        new ParserStateColumn
                        (
                            16391,	// On MINUS
                            null,
                            false,	// shift to
                            6		// state 6
                        ),
                        new ParserStateColumn
                        (
                            16395,	// On NUMBER
                            null,
                            true,	// reduce by
                            5		// production 5
                        ),
                        new ParserStateColumn
                        (
                            16396,	// On PERIOD
                            null,
                            true,	// reduce by
                            5		// production 5
                        ),
                        new ParserStateColumn
                        (
                            16388,	// On LPAREN
                            null,
                            true,	// reduce by
                            5		// production 5
                        ),
                    },

                    // GOTO non-terminals used to select next state
                    // after a REDUCE operation has taken place

                    NonterminalColumns = new ParserStateColumn[]
                    {
                        new ParserStateColumn
                        (
                            32770,	// On expression
                            null,
                            false,	// goto
                            20		// state 20
                        ),
                        new ParserStateColumn
                        (
                            32771,	// On leafExpression
                            null,
                            false,	// goto
                            4		// state 4
                        ),
                        new ParserStateColumn
                        (
                            32772,	// On optMinus
                            null,
                            false,	// goto
                            5		// state 5
                        ),
                    },
                },

                new ParserState
                {
                    StateString =
                        "State S11 CORE ITEMS:\r\n" +
                        "R11: expression: expression MINUS ^ expression\r\n" +
                        "CLOSURE ITEMS:\r\n" +
                        "R6: expression: ^ leafExpression\r\n" +
                        "R7: expression: ^ expression POWER expression\r\n" +
                        "R8: expression: ^ expression TIMES expression\r\n" +
                        "R9: expression: ^ expression DIVIDE expression\r\n" +
                        "R10: expression: ^ expression PLUS expression\r\n" +
                        "R11: expression: ^ expression MINUS expression\r\n" +
                        "R2: leafExpression: ^ optMinus number\r\n" +
                        "R3: leafExpression: ^ optMinus LPAREN expression RPAREN\r\n" +
                        "R4: optMinus: ^ MINUS\r\n" +
                        "R5: optMinus: ^\r\n" +
                        "{\r\n" +
                        "    NUMBER,\r\n" +
                        "    PERIOD,\r\n" +
                        "    LPAREN\r\n" +
                        "}\r\n" +
                        "SHIFTS, REDUCTIONS AND GOTOS\r\n" +
                        "  MINUS: SHIFT to state S6\r\n" +
                        "  NUMBER: REDUCE by rule R5: optMinus:;\r\n" +
                        "  PERIOD: REDUCE by rule R5: optMinus:;\r\n" +
                        "  LPAREN: REDUCE by rule R5: optMinus:;\r\n" +
                        "  expression: GOTO state S21\r\n" +
                        "  leafExpression: GOTO state S4\r\n" +
                        "  optMinus: GOTO state S5\r\n",

                    TerminalColumns = new ParserStateColumn[]
                    {
                        new ParserStateColumn
                        (
                            16391,	// On MINUS
                            null,
                            false,	// shift to
                            6		// state 6
                        ),
                        new ParserStateColumn
                        (
                            16395,	// On NUMBER
                            null,
                            true,	// reduce by
                            5		// production 5
                        ),
                        new ParserStateColumn
                        (
                            16396,	// On PERIOD
                            null,
                            true,	// reduce by
                            5		// production 5
                        ),
                        new ParserStateColumn
                        (
                            16388,	// On LPAREN
                            null,
                            true,	// reduce by
                            5		// production 5
                        ),
                    },

                    // GOTO non-terminals used to select next state
                    // after a REDUCE operation has taken place

                    NonterminalColumns = new ParserStateColumn[]
                    {
                        new ParserStateColumn
                        (
                            32770,	// On expression
                            null,
                            false,	// goto
                            21		// state 21
                        ),
                        new ParserStateColumn
                        (
                            32771,	// On leafExpression
                            null,
                            false,	// goto
                            4		// state 4
                        ),
                        new ParserStateColumn
                        (
                            32772,	// On optMinus
                            null,
                            false,	// goto
                            5		// state 5
                        ),
                    },
                },

                new ParserState
                {
                    StateString =
                        "State S12 CORE ITEMS:\r\n" +
                        "R2: leafExpression: optMinus number ^\r\n" +
                        "{\r\n" +
                        "    EOF,\r\n" +
                        "    POWER,\r\n" +
                        "    TIMES,\r\n" +
                        "    DIVIDE,\r\n" +
                        "    PLUS,\r\n" +
                        "    MINUS\r\n" +
                        "}\r\n" +
                        "SHIFTS, REDUCTIONS AND GOTOS\r\n" +
                        "  EOF: REDUCE by rule R2: leafExpression: optMinus number;\r\n" +
                        "  POWER: REDUCE by rule R2: leafExpression: optMinus number;\r\n" +
                        "  TIMES: REDUCE by rule R2: leafExpression: optMinus number;\r\n" +
                        "  DIVIDE: REDUCE by rule R2: leafExpression: optMinus number;\r\n" +
                        "  PLUS: REDUCE by rule R2: leafExpression: optMinus number;\r\n" +
                        "  MINUS: REDUCE by rule R2: leafExpression: optMinus number;\r\n",

                    TerminalColumns = new ParserStateColumn[]
                    {
                        new ParserStateColumn
                        (
                            16385,	// On EOF
                            null,
                            true,	// reduce by
                            2		// production 2
                        ),
                        new ParserStateColumn
                        (
                            16394,	// On POWER
                            null,
                            true,	// reduce by
                            2		// production 2
                        ),
                        new ParserStateColumn
                        (
                            16392,	// On TIMES
                            null,
                            true,	// reduce by
                            2		// production 2
                        ),
                        new ParserStateColumn
                        (
                            16393,	// On DIVIDE
                            null,
                            true,	// reduce by
                            2		// production 2
                        ),
                        new ParserStateColumn
                        (
                            16390,	// On PLUS
                            null,
                            true,	// reduce by
                            2		// production 2
                        ),
                        new ParserStateColumn
                        (
                            16391,	// On MINUS
                            null,
                            true,	// reduce by
                            2		// production 2
                        ),
                    },

                    NonterminalColumns = new ParserStateColumn[0],
                },

                new ParserState
                {
                    StateString =
                        "State S13 CORE ITEMS:\r\n" +
                        "R3: leafExpression: optMinus LPAREN ^ expression RPAREN\r\n" +
                        "CLOSURE ITEMS:\r\n" +
                        "R6: expression: ^ leafExpression\r\n" +
                        "R7: expression: ^ expression POWER expression\r\n" +
                        "R8: expression: ^ expression TIMES expression\r\n" +
                        "R9: expression: ^ expression DIVIDE expression\r\n" +
                        "R10: expression: ^ expression PLUS expression\r\n" +
                        "R11: expression: ^ expression MINUS expression\r\n" +
                        "R2: leafExpression: ^ optMinus number\r\n" +
                        "R3: leafExpression: ^ optMinus LPAREN expression RPAREN\r\n" +
                        "R4: optMinus: ^ MINUS\r\n" +
                        "R5: optMinus: ^\r\n" +
                        "{\r\n" +
                        "    NUMBER,\r\n" +
                        "    PERIOD,\r\n" +
                        "    LPAREN\r\n" +
                        "}\r\n" +
                        "SHIFTS, REDUCTIONS AND GOTOS\r\n" +
                        "  MINUS: SHIFT to state S6\r\n" +
                        "  NUMBER: REDUCE by rule R5: optMinus:;\r\n" +
                        "  PERIOD: REDUCE by rule R5: optMinus:;\r\n" +
                        "  LPAREN: REDUCE by rule R5: optMinus:;\r\n" +
                        "  expression: GOTO state S22\r\n" +
                        "  leafExpression: GOTO state S23\r\n" +
                        "  optMinus: GOTO state S24\r\n",

                    TerminalColumns = new ParserStateColumn[]
                    {
                        new ParserStateColumn
                        (
                            16391,	// On MINUS
                            null,
                            false,	// shift to
                            6		// state 6
                        ),
                        new ParserStateColumn
                        (
                            16395,	// On NUMBER
                            null,
                            true,	// reduce by
                            5		// production 5
                        ),
                        new ParserStateColumn
                        (
                            16396,	// On PERIOD
                            null,
                            true,	// reduce by
                            5		// production 5
                        ),
                        new ParserStateColumn
                        (
                            16388,	// On LPAREN
                            null,
                            true,	// reduce by
                            5		// production 5
                        ),
                    },

                    // GOTO non-terminals used to select next state
                    // after a REDUCE operation has taken place

                    NonterminalColumns = new ParserStateColumn[]
                    {
                        new ParserStateColumn
                        (
                            32770,	// On expression
                            null,
                            false,	// goto
                            22		// state 22
                        ),
                        new ParserStateColumn
                        (
                            32771,	// On leafExpression
                            null,
                            false,	// goto
                            23		// state 23
                        ),
                        new ParserStateColumn
                        (
                            32772,	// On optMinus
                            null,
                            false,	// goto
                            24		// state 24
                        ),
                    },
                },

                new ParserState
                {
                    StateString =
                        "State S14 CORE ITEMS:\r\n" +
                        "R12: number: NUMBER ^ exponent\r\n" +
                        "R13: number: NUMBER ^ mantissa exponent\r\n" +
                        "CLOSURE ITEMS:\r\n" +
                        "R16: exponent: ^ EXPONENT NUMBER\r\n" +
                        "R17: exponent: ^ EXPONENT MINUS NUMBER\r\n" +
                        "R18: exponent: ^\r\n" +
                        "{\r\n" +
                        "    EOF,\r\n" +
                        "    POWER,\r\n" +
                        "    TIMES,\r\n" +
                        "    DIVIDE,\r\n" +
                        "    PLUS,\r\n" +
                        "    MINUS\r\n" +
                        "}\r\n" +
                        "R15: mantissa: ^ PERIOD NUMBER\r\n" +
                        "SHIFTS, REDUCTIONS AND GOTOS\r\n" +
                        "  EXPONENT: SHIFT to state S27\r\n" +
                        "  PERIOD: SHIFT to state S16\r\n" +
                        "  EOF: REDUCE by rule R18: exponent:;\r\n" +
                        "  POWER: REDUCE by rule R18: exponent:;\r\n" +
                        "  TIMES: REDUCE by rule R18: exponent:;\r\n" +
                        "  DIVIDE: REDUCE by rule R18: exponent:;\r\n" +
                        "  PLUS: REDUCE by rule R18: exponent:;\r\n" +
                        "  MINUS: REDUCE by rule R18: exponent:;\r\n" +
                        "  exponent: GOTO state S25\r\n" +
                        "  mantissa: GOTO state S26\r\n",

                    TerminalColumns = new ParserStateColumn[]
                    {
                        new ParserStateColumn
                        (
                            16397,	// On EXPONENT
                            null,
                            false,	// shift to
                            27		// state 27
                        ),
                        new ParserStateColumn
                        (
                            16396,	// On PERIOD
                            null,
                            false,	// shift to
                            16		// state 16
                        ),
                        new ParserStateColumn
                        (
                            16385,	// On EOF
                            null,
                            true,	// reduce by
                            18		// production 18
                        ),
                        new ParserStateColumn
                        (
                            16394,	// On POWER
                            null,
                            true,	// reduce by
                            18		// production 18
                        ),
                        new ParserStateColumn
                        (
                            16392,	// On TIMES
                            null,
                            true,	// reduce by
                            18		// production 18
                        ),
                        new ParserStateColumn
                        (
                            16393,	// On DIVIDE
                            null,
                            true,	// reduce by
                            18		// production 18
                        ),
                        new ParserStateColumn
                        (
                            16390,	// On PLUS
                            null,
                            true,	// reduce by
                            18		// production 18
                        ),
                        new ParserStateColumn
                        (
                            16391,	// On MINUS
                            null,
                            true,	// reduce by
                            18		// production 18
                        ),
                    },

                    // GOTO non-terminals used to select next state
                    // after a REDUCE operation has taken place

                    NonterminalColumns = new ParserStateColumn[]
                    {
                        new ParserStateColumn
                        (
                            32774,	// On exponent
                            null,
                            false,	// goto
                            25		// state 25
                        ),
                        new ParserStateColumn
                        (
                            32775,	// On mantissa
                            null,
                            false,	// goto
                            26		// state 26
                        ),
                    },
                },

                new ParserState
                {
                    StateString =
                        "State S15 CORE ITEMS:\r\n" +
                        "R14: number: mantissa ^ exponent\r\n" +
                        "CLOSURE ITEMS:\r\n" +
                        "R16: exponent: ^ EXPONENT NUMBER\r\n" +
                        "R17: exponent: ^ EXPONENT MINUS NUMBER\r\n" +
                        "R18: exponent: ^\r\n" +
                        "{\r\n" +
                        "    EOF,\r\n" +
                        "    POWER,\r\n" +
                        "    TIMES,\r\n" +
                        "    DIVIDE,\r\n" +
                        "    PLUS,\r\n" +
                        "    MINUS\r\n" +
                        "}\r\n" +
                        "SHIFTS, REDUCTIONS AND GOTOS\r\n" +
                        "  EXPONENT: SHIFT to state S27\r\n" +
                        "  EOF: REDUCE by rule R18: exponent:;\r\n" +
                        "  POWER: REDUCE by rule R18: exponent:;\r\n" +
                        "  TIMES: REDUCE by rule R18: exponent:;\r\n" +
                        "  DIVIDE: REDUCE by rule R18: exponent:;\r\n" +
                        "  PLUS: REDUCE by rule R18: exponent:;\r\n" +
                        "  MINUS: REDUCE by rule R18: exponent:;\r\n" +
                        "  exponent: GOTO state S28\r\n",

                    TerminalColumns = new ParserStateColumn[]
                    {
                        new ParserStateColumn
                        (
                            16397,	// On EXPONENT
                            null,
                            false,	// shift to
                            27		// state 27
                        ),
                        new ParserStateColumn
                        (
                            16385,	// On EOF
                            null,
                            true,	// reduce by
                            18		// production 18
                        ),
                        new ParserStateColumn
                        (
                            16394,	// On POWER
                            null,
                            true,	// reduce by
                            18		// production 18
                        ),
                        new ParserStateColumn
                        (
                            16392,	// On TIMES
                            null,
                            true,	// reduce by
                            18		// production 18
                        ),
                        new ParserStateColumn
                        (
                            16393,	// On DIVIDE
                            null,
                            true,	// reduce by
                            18		// production 18
                        ),
                        new ParserStateColumn
                        (
                            16390,	// On PLUS
                            null,
                            true,	// reduce by
                            18		// production 18
                        ),
                        new ParserStateColumn
                        (
                            16391,	// On MINUS
                            null,
                            true,	// reduce by
                            18		// production 18
                        ),
                    },

                    // GOTO non-terminals used to select next state
                    // after a REDUCE operation has taken place

                    NonterminalColumns = new ParserStateColumn[]
                    {
                        new ParserStateColumn
                        (
                            32774,	// On exponent
                            null,
                            false,	// goto
                            28		// state 28
                        ),
                    },
                },

                new ParserState
                {
                    StateString =
                        "State S16 CORE ITEMS:\r\n" +
                        "R15: mantissa: PERIOD ^ NUMBER\r\n" +
                        "SHIFTS, REDUCTIONS AND GOTOS\r\n" +
                        "  NUMBER: SHIFT to state S29\r\n",

                    TerminalColumns = new ParserStateColumn[]
                    {
                        new ParserStateColumn
                        (
                            16395,	// On NUMBER
                            null,
                            false,	// shift to
                            29		// state 29
                        ),
                    },

                    NonterminalColumns = new ParserStateColumn[0],
                },

                new ParserState
                {
                    StateString =
                        "State S17 CORE ITEMS:\r\n" +
                        "R7: expression: expression POWER expression ^\r\n" +
                        "{\r\n" +
                        "    EOF,\r\n" +
                        "    POWER,\r\n" +
                        "    TIMES,\r\n" +
                        "    DIVIDE,\r\n" +
                        "    PLUS,\r\n" +
                        "    MINUS,\r\n" +
                        "    EOF,\r\n" +
                        "    POWER,\r\n" +
                        "    TIMES,\r\n" +
                        "    DIVIDE,\r\n" +
                        "    PLUS,\r\n" +
                        "    MINUS\r\n" +
                        "}\r\n" +
                        "R8: expression: expression ^ TIMES expression\r\n" +
                        "R9: expression: expression ^ DIVIDE expression\r\n" +
                        "R10: expression: expression ^ PLUS expression\r\n" +
                        "R11: expression: expression ^ MINUS expression\r\n" +
                        "SHIFTS, REDUCTIONS AND GOTOS\r\n" +
                        "  POWER: SHIFT to state S7\r\n" +
                        "  POWER: REDUCE by rule R7: expression: expression POWER expression;\r\n" +
                        "  TIMES: SHIFT to state S8\r\n" +
                        "  TIMES: REDUCE by rule R7: expression: expression POWER expression;\r\n" +
                        "  DIVIDE: SHIFT to state S9\r\n" +
                        "  DIVIDE: REDUCE by rule R7: expression: expression POWER expression;\r\n" +
                        "  PLUS: SHIFT to state S10\r\n" +
                        "  PLUS: REDUCE by rule R7: expression: expression POWER expression;\r\n" +
                        "  MINUS: SHIFT to state S11\r\n" +
                        "  MINUS: REDUCE by rule R7: expression: expression POWER expression;\r\n" +
                        "  EOF: REDUCE by rule R7: expression: expression POWER expression;\r\n",

                    TerminalColumns = new ParserStateColumn[]
                    {
                        new ParserStateColumn
                        (
                            16394,	// On POWER
                            null,
                            false,	// shift to
                            7		// state 7
                        ),
                        new ParserStateColumn
                        (
                            16394,	// On POWER
                            null,
                            true,	// reduce by
                            7		// production 7
                        ),
                        new ParserStateColumn
                        (
                            16392,	// On TIMES
                            null,
                            false,	// shift to
                            8		// state 8
                        ),
                        new ParserStateColumn
                        (
                            16392,	// On TIMES
                            null,
                            true,	// reduce by
                            7		// production 7
                        ),
                        new ParserStateColumn
                        (
                            16393,	// On DIVIDE
                            null,
                            false,	// shift to
                            9		// state 9
                        ),
                        new ParserStateColumn
                        (
                            16393,	// On DIVIDE
                            null,
                            true,	// reduce by
                            7		// production 7
                        ),
                        new ParserStateColumn
                        (
                            16390,	// On PLUS
                            null,
                            false,	// shift to
                            10		// state 10
                        ),
                        new ParserStateColumn
                        (
                            16390,	// On PLUS
                            null,
                            true,	// reduce by
                            7		// production 7
                        ),
                        new ParserStateColumn
                        (
                            16391,	// On MINUS
                            null,
                            false,	// shift to
                            11		// state 11
                        ),
                        new ParserStateColumn
                        (
                            16391,	// On MINUS
                            null,
                            true,	// reduce by
                            7		// production 7
                        ),
                        new ParserStateColumn
                        (
                            16385,	// On EOF
                            null,
                            true,	// reduce by
                            7		// production 7
                        ),
                    },

                    NonterminalColumns = new ParserStateColumn[0],
                },

                new ParserState
                {
                    StateString =
                        "State S18 CORE ITEMS:\r\n" +
                        "R8: expression: expression TIMES expression ^\r\n" +
                        "{\r\n" +
                        "    EOF,\r\n" +
                        "    POWER,\r\n" +
                        "    TIMES,\r\n" +
                        "    DIVIDE,\r\n" +
                        "    PLUS,\r\n" +
                        "    MINUS,\r\n" +
                        "    EOF,\r\n" +
                        "    POWER,\r\n" +
                        "    TIMES,\r\n" +
                        "    DIVIDE,\r\n" +
                        "    PLUS,\r\n" +
                        "    MINUS\r\n" +
                        "}\r\n" +
                        "R7: expression: expression ^ POWER expression\r\n" +
                        "R9: expression: expression ^ DIVIDE expression\r\n" +
                        "R10: expression: expression ^ PLUS expression\r\n" +
                        "R11: expression: expression ^ MINUS expression\r\n" +
                        "SHIFTS, REDUCTIONS AND GOTOS\r\n" +
                        "  POWER: SHIFT to state S7\r\n" +
                        "  POWER: REDUCE by rule R8: expression: expression TIMES expression;\r\n" +
                        "  TIMES: SHIFT to state S8\r\n" +
                        "  TIMES: REDUCE by rule R8: expression: expression TIMES expression;\r\n" +
                        "  DIVIDE: SHIFT to state S9\r\n" +
                        "  DIVIDE: REDUCE by rule R8: expression: expression TIMES expression;\r\n" +
                        "  PLUS: SHIFT to state S10\r\n" +
                        "  PLUS: REDUCE by rule R8: expression: expression TIMES expression;\r\n" +
                        "  MINUS: SHIFT to state S11\r\n" +
                        "  MINUS: REDUCE by rule R8: expression: expression TIMES expression;\r\n" +
                        "  EOF: REDUCE by rule R8: expression: expression TIMES expression;\r\n",

                    TerminalColumns = new ParserStateColumn[]
                    {
                        new ParserStateColumn
                        (
                            16394,	// On POWER
                            null,
                            false,	// shift to
                            7		// state 7
                        ),
                        new ParserStateColumn
                        (
                            16394,	// On POWER
                            null,
                            true,	// reduce by
                            8		// production 8
                        ),
                        new ParserStateColumn
                        (
                            16392,	// On TIMES
                            null,
                            false,	// shift to
                            8		// state 8
                        ),
                        new ParserStateColumn
                        (
                            16392,	// On TIMES
                            null,
                            true,	// reduce by
                            8		// production 8
                        ),
                        new ParserStateColumn
                        (
                            16393,	// On DIVIDE
                            null,
                            false,	// shift to
                            9		// state 9
                        ),
                        new ParserStateColumn
                        (
                            16393,	// On DIVIDE
                            null,
                            true,	// reduce by
                            8		// production 8
                        ),
                        new ParserStateColumn
                        (
                            16390,	// On PLUS
                            null,
                            false,	// shift to
                            10		// state 10
                        ),
                        new ParserStateColumn
                        (
                            16390,	// On PLUS
                            null,
                            true,	// reduce by
                            8		// production 8
                        ),
                        new ParserStateColumn
                        (
                            16391,	// On MINUS
                            null,
                            false,	// shift to
                            11		// state 11
                        ),
                        new ParserStateColumn
                        (
                            16391,	// On MINUS
                            null,
                            true,	// reduce by
                            8		// production 8
                        ),
                        new ParserStateColumn
                        (
                            16385,	// On EOF
                            null,
                            true,	// reduce by
                            8		// production 8
                        ),
                    },

                    NonterminalColumns = new ParserStateColumn[0],
                },

                new ParserState
                {
                    StateString =
                        "State S19 CORE ITEMS:\r\n" +
                        "R9: expression: expression DIVIDE expression ^\r\n" +
                        "{\r\n" +
                        "    EOF,\r\n" +
                        "    POWER,\r\n" +
                        "    TIMES,\r\n" +
                        "    DIVIDE,\r\n" +
                        "    PLUS,\r\n" +
                        "    MINUS,\r\n" +
                        "    EOF,\r\n" +
                        "    POWER,\r\n" +
                        "    TIMES,\r\n" +
                        "    DIVIDE,\r\n" +
                        "    PLUS,\r\n" +
                        "    MINUS\r\n" +
                        "}\r\n" +
                        "R7: expression: expression ^ POWER expression\r\n" +
                        "R8: expression: expression ^ TIMES expression\r\n" +
                        "R10: expression: expression ^ PLUS expression\r\n" +
                        "R11: expression: expression ^ MINUS expression\r\n" +
                        "SHIFTS, REDUCTIONS AND GOTOS\r\n" +
                        "  POWER: SHIFT to state S7\r\n" +
                        "  POWER: REDUCE by rule R9: expression: expression DIVIDE expression;\r\n" +
                        "  TIMES: SHIFT to state S8\r\n" +
                        "  TIMES: REDUCE by rule R9: expression: expression DIVIDE expression;\r\n" +
                        "  DIVIDE: SHIFT to state S9\r\n" +
                        "  DIVIDE: REDUCE by rule R9: expression: expression DIVIDE expression;\r\n" +
                        "  PLUS: SHIFT to state S10\r\n" +
                        "  PLUS: REDUCE by rule R9: expression: expression DIVIDE expression;\r\n" +
                        "  MINUS: SHIFT to state S11\r\n" +
                        "  MINUS: REDUCE by rule R9: expression: expression DIVIDE expression;\r\n" +
                        "  EOF: REDUCE by rule R9: expression: expression DIVIDE expression;\r\n",

                    TerminalColumns = new ParserStateColumn[]
                    {
                        new ParserStateColumn
                        (
                            16394,	// On POWER
                            null,
                            false,	// shift to
                            7		// state 7
                        ),
                        new ParserStateColumn
                        (
                            16394,	// On POWER
                            null,
                            true,	// reduce by
                            9		// production 9
                        ),
                        new ParserStateColumn
                        (
                            16392,	// On TIMES
                            null,
                            false,	// shift to
                            8		// state 8
                        ),
                        new ParserStateColumn
                        (
                            16392,	// On TIMES
                            null,
                            true,	// reduce by
                            9		// production 9
                        ),
                        new ParserStateColumn
                        (
                            16393,	// On DIVIDE
                            null,
                            false,	// shift to
                            9		// state 9
                        ),
                        new ParserStateColumn
                        (
                            16393,	// On DIVIDE
                            null,
                            true,	// reduce by
                            9		// production 9
                        ),
                        new ParserStateColumn
                        (
                            16390,	// On PLUS
                            null,
                            false,	// shift to
                            10		// state 10
                        ),
                        new ParserStateColumn
                        (
                            16390,	// On PLUS
                            null,
                            true,	// reduce by
                            9		// production 9
                        ),
                        new ParserStateColumn
                        (
                            16391,	// On MINUS
                            null,
                            false,	// shift to
                            11		// state 11
                        ),
                        new ParserStateColumn
                        (
                            16391,	// On MINUS
                            null,
                            true,	// reduce by
                            9		// production 9
                        ),
                        new ParserStateColumn
                        (
                            16385,	// On EOF
                            null,
                            true,	// reduce by
                            9		// production 9
                        ),
                    },

                    NonterminalColumns = new ParserStateColumn[0],
                },

                new ParserState
                {
                    StateString =
                        "State S20 CORE ITEMS:\r\n" +
                        "R10: expression: expression PLUS expression ^\r\n" +
                        "{\r\n" +
                        "    EOF,\r\n" +
                        "    POWER,\r\n" +
                        "    TIMES,\r\n" +
                        "    DIVIDE,\r\n" +
                        "    PLUS,\r\n" +
                        "    MINUS,\r\n" +
                        "    EOF,\r\n" +
                        "    POWER,\r\n" +
                        "    TIMES,\r\n" +
                        "    DIVIDE,\r\n" +
                        "    PLUS,\r\n" +
                        "    MINUS\r\n" +
                        "}\r\n" +
                        "R7: expression: expression ^ POWER expression\r\n" +
                        "R8: expression: expression ^ TIMES expression\r\n" +
                        "R9: expression: expression ^ DIVIDE expression\r\n" +
                        "R11: expression: expression ^ MINUS expression\r\n" +
                        "SHIFTS, REDUCTIONS AND GOTOS\r\n" +
                        "  POWER: SHIFT to state S7\r\n" +
                        "  POWER: REDUCE by rule R10: expression: expression PLUS expression;\r\n" +
                        "  TIMES: SHIFT to state S8\r\n" +
                        "  TIMES: REDUCE by rule R10: expression: expression PLUS expression;\r\n" +
                        "  DIVIDE: SHIFT to state S9\r\n" +
                        "  DIVIDE: REDUCE by rule R10: expression: expression PLUS expression;\r\n" +
                        "  PLUS: SHIFT to state S10\r\n" +
                        "  PLUS: REDUCE by rule R10: expression: expression PLUS expression;\r\n" +
                        "  MINUS: SHIFT to state S11\r\n" +
                        "  MINUS: REDUCE by rule R10: expression: expression PLUS expression;\r\n" +
                        "  EOF: REDUCE by rule R10: expression: expression PLUS expression;\r\n",

                    TerminalColumns = new ParserStateColumn[]
                    {
                        new ParserStateColumn
                        (
                            16394,	// On POWER
                            null,
                            false,	// shift to
                            7		// state 7
                        ),
                        new ParserStateColumn
                        (
                            16394,	// On POWER
                            null,
                            true,	// reduce by
                            10		// production 10
                        ),
                        new ParserStateColumn
                        (
                            16392,	// On TIMES
                            null,
                            false,	// shift to
                            8		// state 8
                        ),
                        new ParserStateColumn
                        (
                            16392,	// On TIMES
                            null,
                            true,	// reduce by
                            10		// production 10
                        ),
                        new ParserStateColumn
                        (
                            16393,	// On DIVIDE
                            null,
                            false,	// shift to
                            9		// state 9
                        ),
                        new ParserStateColumn
                        (
                            16393,	// On DIVIDE
                            null,
                            true,	// reduce by
                            10		// production 10
                        ),
                        new ParserStateColumn
                        (
                            16390,	// On PLUS
                            null,
                            false,	// shift to
                            10		// state 10
                        ),
                        new ParserStateColumn
                        (
                            16390,	// On PLUS
                            null,
                            true,	// reduce by
                            10		// production 10
                        ),
                        new ParserStateColumn
                        (
                            16391,	// On MINUS
                            null,
                            false,	// shift to
                            11		// state 11
                        ),
                        new ParserStateColumn
                        (
                            16391,	// On MINUS
                            null,
                            true,	// reduce by
                            10		// production 10
                        ),
                        new ParserStateColumn
                        (
                            16385,	// On EOF
                            null,
                            true,	// reduce by
                            10		// production 10
                        ),
                    },

                    NonterminalColumns = new ParserStateColumn[0],
                },

                new ParserState
                {
                    StateString =
                        "State S21 CORE ITEMS:\r\n" +
                        "R11: expression: expression MINUS expression ^\r\n" +
                        "{\r\n" +
                        "    EOF,\r\n" +
                        "    POWER,\r\n" +
                        "    TIMES,\r\n" +
                        "    DIVIDE,\r\n" +
                        "    PLUS,\r\n" +
                        "    MINUS,\r\n" +
                        "    EOF,\r\n" +
                        "    POWER,\r\n" +
                        "    TIMES,\r\n" +
                        "    DIVIDE,\r\n" +
                        "    PLUS,\r\n" +
                        "    MINUS\r\n" +
                        "}\r\n" +
                        "R7: expression: expression ^ POWER expression\r\n" +
                        "R8: expression: expression ^ TIMES expression\r\n" +
                        "R9: expression: expression ^ DIVIDE expression\r\n" +
                        "R10: expression: expression ^ PLUS expression\r\n" +
                        "SHIFTS, REDUCTIONS AND GOTOS\r\n" +
                        "  POWER: SHIFT to state S7\r\n" +
                        "  POWER: REDUCE by rule R11: expression: expression MINUS expression;\r\n" +
                        "  TIMES: SHIFT to state S8\r\n" +
                        "  TIMES: REDUCE by rule R11: expression: expression MINUS expression;\r\n" +
                        "  DIVIDE: SHIFT to state S9\r\n" +
                        "  DIVIDE: REDUCE by rule R11: expression: expression MINUS expression;\r\n" +
                        "  PLUS: SHIFT to state S10\r\n" +
                        "  PLUS: REDUCE by rule R11: expression: expression MINUS expression;\r\n" +
                        "  MINUS: SHIFT to state S11\r\n" +
                        "  MINUS: REDUCE by rule R11: expression: expression MINUS expression;\r\n" +
                        "  EOF: REDUCE by rule R11: expression: expression MINUS expression;\r\n",

                    TerminalColumns = new ParserStateColumn[]
                    {
                        new ParserStateColumn
                        (
                            16394,	// On POWER
                            null,
                            false,	// shift to
                            7		// state 7
                        ),
                        new ParserStateColumn
                        (
                            16394,	// On POWER
                            null,
                            true,	// reduce by
                            11		// production 11
                        ),
                        new ParserStateColumn
                        (
                            16392,	// On TIMES
                            null,
                            false,	// shift to
                            8		// state 8
                        ),
                        new ParserStateColumn
                        (
                            16392,	// On TIMES
                            null,
                            true,	// reduce by
                            11		// production 11
                        ),
                        new ParserStateColumn
                        (
                            16393,	// On DIVIDE
                            null,
                            false,	// shift to
                            9		// state 9
                        ),
                        new ParserStateColumn
                        (
                            16393,	// On DIVIDE
                            null,
                            true,	// reduce by
                            11		// production 11
                        ),
                        new ParserStateColumn
                        (
                            16390,	// On PLUS
                            null,
                            false,	// shift to
                            10		// state 10
                        ),
                        new ParserStateColumn
                        (
                            16390,	// On PLUS
                            null,
                            true,	// reduce by
                            11		// production 11
                        ),
                        new ParserStateColumn
                        (
                            16391,	// On MINUS
                            null,
                            false,	// shift to
                            11		// state 11
                        ),
                        new ParserStateColumn
                        (
                            16391,	// On MINUS
                            null,
                            true,	// reduce by
                            11		// production 11
                        ),
                        new ParserStateColumn
                        (
                            16385,	// On EOF
                            null,
                            true,	// reduce by
                            11		// production 11
                        ),
                    },

                    NonterminalColumns = new ParserStateColumn[0],
                },

                new ParserState
                {
                    StateString =
                        "State S22 CORE ITEMS:\r\n" +
                        "R3: leafExpression: optMinus LPAREN expression ^ RPAREN\r\n" +
                        "R7: expression: expression ^ POWER expression\r\n" +
                        "R8: expression: expression ^ TIMES expression\r\n" +
                        "R9: expression: expression ^ DIVIDE expression\r\n" +
                        "R10: expression: expression ^ PLUS expression\r\n" +
                        "R11: expression: expression ^ MINUS expression\r\n" +
                        "SHIFTS, REDUCTIONS AND GOTOS\r\n" +
                        "  RPAREN: SHIFT to state S30\r\n" +
                        "  POWER: SHIFT to state S31\r\n" +
                        "  TIMES: SHIFT to state S32\r\n" +
                        "  DIVIDE: SHIFT to state S33\r\n" +
                        "  PLUS: SHIFT to state S34\r\n" +
                        "  MINUS: SHIFT to state S35\r\n",

                    TerminalColumns = new ParserStateColumn[]
                    {
                        new ParserStateColumn
                        (
                            16389,	// On RPAREN
                            null,
                            false,	// shift to
                            30		// state 30
                        ),
                        new ParserStateColumn
                        (
                            16394,	// On POWER
                            null,
                            false,	// shift to
                            31		// state 31
                        ),
                        new ParserStateColumn
                        (
                            16392,	// On TIMES
                            null,
                            false,	// shift to
                            32		// state 32
                        ),
                        new ParserStateColumn
                        (
                            16393,	// On DIVIDE
                            null,
                            false,	// shift to
                            33		// state 33
                        ),
                        new ParserStateColumn
                        (
                            16390,	// On PLUS
                            null,
                            false,	// shift to
                            34		// state 34
                        ),
                        new ParserStateColumn
                        (
                            16391,	// On MINUS
                            null,
                            false,	// shift to
                            35		// state 35
                        ),
                    },

                    NonterminalColumns = new ParserStateColumn[0],
                },

                new ParserState
                {
                    StateString =
                        "State S23 CORE ITEMS:\r\n" +
                        "R6: expression: leafExpression ^\r\n" +
                        "{\r\n" +
                        "    RPAREN,\r\n" +
                        "    POWER,\r\n" +
                        "    TIMES,\r\n" +
                        "    DIVIDE,\r\n" +
                        "    PLUS,\r\n" +
                        "    MINUS\r\n" +
                        "}\r\n" +
                        "SHIFTS, REDUCTIONS AND GOTOS\r\n" +
                        "  RPAREN: REDUCE by rule R6: expression: leafExpression;\r\n" +
                        "  POWER: REDUCE by rule R6: expression: leafExpression;\r\n" +
                        "  TIMES: REDUCE by rule R6: expression: leafExpression;\r\n" +
                        "  DIVIDE: REDUCE by rule R6: expression: leafExpression;\r\n" +
                        "  PLUS: REDUCE by rule R6: expression: leafExpression;\r\n" +
                        "  MINUS: REDUCE by rule R6: expression: leafExpression;\r\n",

                    TerminalColumns = new ParserStateColumn[]
                    {
                        new ParserStateColumn
                        (
                            16389,	// On RPAREN
                            null,
                            true,	// reduce by
                            6		// production 6
                        ),
                        new ParserStateColumn
                        (
                            16394,	// On POWER
                            null,
                            true,	// reduce by
                            6		// production 6
                        ),
                        new ParserStateColumn
                        (
                            16392,	// On TIMES
                            null,
                            true,	// reduce by
                            6		// production 6
                        ),
                        new ParserStateColumn
                        (
                            16393,	// On DIVIDE
                            null,
                            true,	// reduce by
                            6		// production 6
                        ),
                        new ParserStateColumn
                        (
                            16390,	// On PLUS
                            null,
                            true,	// reduce by
                            6		// production 6
                        ),
                        new ParserStateColumn
                        (
                            16391,	// On MINUS
                            null,
                            true,	// reduce by
                            6		// production 6
                        ),
                    },

                    NonterminalColumns = new ParserStateColumn[0],
                },

                new ParserState
                {
                    StateString =
                        "State S24 CORE ITEMS:\r\n" +
                        "R2: leafExpression: optMinus ^ number\r\n" +
                        "R3: leafExpression: optMinus ^ LPAREN expression RPAREN\r\n" +
                        "CLOSURE ITEMS:\r\n" +
                        "R12: number: ^ NUMBER exponent\r\n" +
                        "R13: number: ^ NUMBER mantissa exponent\r\n" +
                        "R14: number: ^ mantissa exponent\r\n" +
                        "R15: mantissa: ^ PERIOD NUMBER\r\n" +
                        "SHIFTS, REDUCTIONS AND GOTOS\r\n" +
                        "  LPAREN: SHIFT to state S37\r\n" +
                        "  NUMBER: SHIFT to state S38\r\n" +
                        "  PERIOD: SHIFT to state S40\r\n" +
                        "  number: GOTO state S36\r\n" +
                        "  mantissa: GOTO state S39\r\n",

                    TerminalColumns = new ParserStateColumn[]
                    {
                        new ParserStateColumn
                        (
                            16388,	// On LPAREN
                            null,
                            false,	// shift to
                            37		// state 37
                        ),
                        new ParserStateColumn
                        (
                            16395,	// On NUMBER
                            null,
                            false,	// shift to
                            38		// state 38
                        ),
                        new ParserStateColumn
                        (
                            16396,	// On PERIOD
                            null,
                            false,	// shift to
                            40		// state 40
                        ),
                    },

                    // GOTO non-terminals used to select next state
                    // after a REDUCE operation has taken place

                    NonterminalColumns = new ParserStateColumn[]
                    {
                        new ParserStateColumn
                        (
                            32773,	// On number
                            null,
                            false,	// goto
                            36		// state 36
                        ),
                        new ParserStateColumn
                        (
                            32775,	// On mantissa
                            null,
                            false,	// goto
                            39		// state 39
                        ),
                    },
                },

                new ParserState
                {
                    StateString =
                        "State S25 CORE ITEMS:\r\n" +
                        "R12: number: NUMBER exponent ^\r\n" +
                        "{\r\n" +
                        "    EOF,\r\n" +
                        "    POWER,\r\n" +
                        "    TIMES,\r\n" +
                        "    DIVIDE,\r\n" +
                        "    PLUS,\r\n" +
                        "    MINUS\r\n" +
                        "}\r\n" +
                        "SHIFTS, REDUCTIONS AND GOTOS\r\n" +
                        "  EOF: REDUCE by rule R12: number: NUMBER exponent;\r\n" +
                        "  POWER: REDUCE by rule R12: number: NUMBER exponent;\r\n" +
                        "  TIMES: REDUCE by rule R12: number: NUMBER exponent;\r\n" +
                        "  DIVIDE: REDUCE by rule R12: number: NUMBER exponent;\r\n" +
                        "  PLUS: REDUCE by rule R12: number: NUMBER exponent;\r\n" +
                        "  MINUS: REDUCE by rule R12: number: NUMBER exponent;\r\n",

                    TerminalColumns = new ParserStateColumn[]
                    {
                        new ParserStateColumn
                        (
                            16385,	// On EOF
                            null,
                            true,	// reduce by
                            12		// production 12
                        ),
                        new ParserStateColumn
                        (
                            16394,	// On POWER
                            null,
                            true,	// reduce by
                            12		// production 12
                        ),
                        new ParserStateColumn
                        (
                            16392,	// On TIMES
                            null,
                            true,	// reduce by
                            12		// production 12
                        ),
                        new ParserStateColumn
                        (
                            16393,	// On DIVIDE
                            null,
                            true,	// reduce by
                            12		// production 12
                        ),
                        new ParserStateColumn
                        (
                            16390,	// On PLUS
                            null,
                            true,	// reduce by
                            12		// production 12
                        ),
                        new ParserStateColumn
                        (
                            16391,	// On MINUS
                            null,
                            true,	// reduce by
                            12		// production 12
                        ),
                    },

                    NonterminalColumns = new ParserStateColumn[0],
                },

                new ParserState
                {
                    StateString =
                        "State S26 CORE ITEMS:\r\n" +
                        "R13: number: NUMBER mantissa ^ exponent\r\n" +
                        "CLOSURE ITEMS:\r\n" +
                        "R16: exponent: ^ EXPONENT NUMBER\r\n" +
                        "R17: exponent: ^ EXPONENT MINUS NUMBER\r\n" +
                        "R18: exponent: ^\r\n" +
                        "{\r\n" +
                        "    EOF,\r\n" +
                        "    POWER,\r\n" +
                        "    TIMES,\r\n" +
                        "    DIVIDE,\r\n" +
                        "    PLUS,\r\n" +
                        "    MINUS\r\n" +
                        "}\r\n" +
                        "SHIFTS, REDUCTIONS AND GOTOS\r\n" +
                        "  EXPONENT: SHIFT to state S27\r\n" +
                        "  EOF: REDUCE by rule R18: exponent:;\r\n" +
                        "  POWER: REDUCE by rule R18: exponent:;\r\n" +
                        "  TIMES: REDUCE by rule R18: exponent:;\r\n" +
                        "  DIVIDE: REDUCE by rule R18: exponent:;\r\n" +
                        "  PLUS: REDUCE by rule R18: exponent:;\r\n" +
                        "  MINUS: REDUCE by rule R18: exponent:;\r\n" +
                        "  exponent: GOTO state S41\r\n",

                    TerminalColumns = new ParserStateColumn[]
                    {
                        new ParserStateColumn
                        (
                            16397,	// On EXPONENT
                            null,
                            false,	// shift to
                            27		// state 27
                        ),
                        new ParserStateColumn
                        (
                            16385,	// On EOF
                            null,
                            true,	// reduce by
                            18		// production 18
                        ),
                        new ParserStateColumn
                        (
                            16394,	// On POWER
                            null,
                            true,	// reduce by
                            18		// production 18
                        ),
                        new ParserStateColumn
                        (
                            16392,	// On TIMES
                            null,
                            true,	// reduce by
                            18		// production 18
                        ),
                        new ParserStateColumn
                        (
                            16393,	// On DIVIDE
                            null,
                            true,	// reduce by
                            18		// production 18
                        ),
                        new ParserStateColumn
                        (
                            16390,	// On PLUS
                            null,
                            true,	// reduce by
                            18		// production 18
                        ),
                        new ParserStateColumn
                        (
                            16391,	// On MINUS
                            null,
                            true,	// reduce by
                            18		// production 18
                        ),
                    },

                    // GOTO non-terminals used to select next state
                    // after a REDUCE operation has taken place

                    NonterminalColumns = new ParserStateColumn[]
                    {
                        new ParserStateColumn
                        (
                            32774,	// On exponent
                            null,
                            false,	// goto
                            41		// state 41
                        ),
                    },
                },

                new ParserState
                {
                    StateString =
                        "State S27 CORE ITEMS:\r\n" +
                        "R16: exponent: EXPONENT ^ NUMBER\r\n" +
                        "R17: exponent: EXPONENT ^ MINUS NUMBER\r\n" +
                        "SHIFTS, REDUCTIONS AND GOTOS\r\n" +
                        "  NUMBER: SHIFT to state S42\r\n" +
                        "  MINUS: SHIFT to state S43\r\n",

                    TerminalColumns = new ParserStateColumn[]
                    {
                        new ParserStateColumn
                        (
                            16395,	// On NUMBER
                            null,
                            false,	// shift to
                            42		// state 42
                        ),
                        new ParserStateColumn
                        (
                            16391,	// On MINUS
                            null,
                            false,	// shift to
                            43		// state 43
                        ),
                    },

                    NonterminalColumns = new ParserStateColumn[0],
                },

                new ParserState
                {
                    StateString =
                        "State S28 CORE ITEMS:\r\n" +
                        "R14: number: mantissa exponent ^\r\n" +
                        "{\r\n" +
                        "    EOF,\r\n" +
                        "    POWER,\r\n" +
                        "    TIMES,\r\n" +
                        "    DIVIDE,\r\n" +
                        "    PLUS,\r\n" +
                        "    MINUS\r\n" +
                        "}\r\n" +
                        "SHIFTS, REDUCTIONS AND GOTOS\r\n" +
                        "  EOF: REDUCE by rule R14: number: mantissa exponent;\r\n" +
                        "  POWER: REDUCE by rule R14: number: mantissa exponent;\r\n" +
                        "  TIMES: REDUCE by rule R14: number: mantissa exponent;\r\n" +
                        "  DIVIDE: REDUCE by rule R14: number: mantissa exponent;\r\n" +
                        "  PLUS: REDUCE by rule R14: number: mantissa exponent;\r\n" +
                        "  MINUS: REDUCE by rule R14: number: mantissa exponent;\r\n",

                    TerminalColumns = new ParserStateColumn[]
                    {
                        new ParserStateColumn
                        (
                            16385,	// On EOF
                            null,
                            true,	// reduce by
                            14		// production 14
                        ),
                        new ParserStateColumn
                        (
                            16394,	// On POWER
                            null,
                            true,	// reduce by
                            14		// production 14
                        ),
                        new ParserStateColumn
                        (
                            16392,	// On TIMES
                            null,
                            true,	// reduce by
                            14		// production 14
                        ),
                        new ParserStateColumn
                        (
                            16393,	// On DIVIDE
                            null,
                            true,	// reduce by
                            14		// production 14
                        ),
                        new ParserStateColumn
                        (
                            16390,	// On PLUS
                            null,
                            true,	// reduce by
                            14		// production 14
                        ),
                        new ParserStateColumn
                        (
                            16391,	// On MINUS
                            null,
                            true,	// reduce by
                            14		// production 14
                        ),
                    },

                    NonterminalColumns = new ParserStateColumn[0],
                },

                new ParserState
                {
                    StateString =
                        "State S29 CORE ITEMS:\r\n" +
                        "R15: mantissa: PERIOD NUMBER ^\r\n" +
                        "{\r\n" +
                        "    EXPONENT,\r\n" +
                        "    EOF,\r\n" +
                        "    POWER,\r\n" +
                        "    TIMES,\r\n" +
                        "    DIVIDE,\r\n" +
                        "    PLUS,\r\n" +
                        "    MINUS\r\n" +
                        "}\r\n" +
                        "SHIFTS, REDUCTIONS AND GOTOS\r\n" +
                        "  EXPONENT: REDUCE by rule R15: mantissa: PERIOD NUMBER;\r\n" +
                        "  EOF: REDUCE by rule R15: mantissa: PERIOD NUMBER;\r\n" +
                        "  POWER: REDUCE by rule R15: mantissa: PERIOD NUMBER;\r\n" +
                        "  TIMES: REDUCE by rule R15: mantissa: PERIOD NUMBER;\r\n" +
                        "  DIVIDE: REDUCE by rule R15: mantissa: PERIOD NUMBER;\r\n" +
                        "  PLUS: REDUCE by rule R15: mantissa: PERIOD NUMBER;\r\n" +
                        "  MINUS: REDUCE by rule R15: mantissa: PERIOD NUMBER;\r\n",

                    TerminalColumns = new ParserStateColumn[]
                    {
                        new ParserStateColumn
                        (
                            16397,	// On EXPONENT
                            null,
                            true,	// reduce by
                            15		// production 15
                        ),
                        new ParserStateColumn
                        (
                            16385,	// On EOF
                            null,
                            true,	// reduce by
                            15		// production 15
                        ),
                        new ParserStateColumn
                        (
                            16394,	// On POWER
                            null,
                            true,	// reduce by
                            15		// production 15
                        ),
                        new ParserStateColumn
                        (
                            16392,	// On TIMES
                            null,
                            true,	// reduce by
                            15		// production 15
                        ),
                        new ParserStateColumn
                        (
                            16393,	// On DIVIDE
                            null,
                            true,	// reduce by
                            15		// production 15
                        ),
                        new ParserStateColumn
                        (
                            16390,	// On PLUS
                            null,
                            true,	// reduce by
                            15		// production 15
                        ),
                        new ParserStateColumn
                        (
                            16391,	// On MINUS
                            null,
                            true,	// reduce by
                            15		// production 15
                        ),
                    },

                    NonterminalColumns = new ParserStateColumn[0],
                },

                new ParserState
                {
                    StateString =
                        "State S30 CORE ITEMS:\r\n" +
                        "R3: leafExpression: optMinus LPAREN expression RPAREN ^\r\n" +
                        "{\r\n" +
                        "    EOF,\r\n" +
                        "    POWER,\r\n" +
                        "    TIMES,\r\n" +
                        "    DIVIDE,\r\n" +
                        "    PLUS,\r\n" +
                        "    MINUS\r\n" +
                        "}\r\n" +
                        "SHIFTS, REDUCTIONS AND GOTOS\r\n" +
                        "  EOF: REDUCE by rule R3: leafExpression: optMinus LPAREN expression RPAREN;\r\n" +
                        "  POWER: REDUCE by rule R3: leafExpression: optMinus LPAREN expression RPAREN;\r\n" +
                        "  TIMES: REDUCE by rule R3: leafExpression: optMinus LPAREN expression RPAREN;\r\n" +
                        "  DIVIDE: REDUCE by rule R3: leafExpression: optMinus LPAREN expression RPAREN;\r\n" +
                        "  PLUS: REDUCE by rule R3: leafExpression: optMinus LPAREN expression RPAREN;\r\n" +
                        "  MINUS: REDUCE by rule R3: leafExpression: optMinus LPAREN expression RPAREN;\r\n",

                    TerminalColumns = new ParserStateColumn[]
                    {
                        new ParserStateColumn
                        (
                            16385,	// On EOF
                            null,
                            true,	// reduce by
                            3		// production 3
                        ),
                        new ParserStateColumn
                        (
                            16394,	// On POWER
                            null,
                            true,	// reduce by
                            3		// production 3
                        ),
                        new ParserStateColumn
                        (
                            16392,	// On TIMES
                            null,
                            true,	// reduce by
                            3		// production 3
                        ),
                        new ParserStateColumn
                        (
                            16393,	// On DIVIDE
                            null,
                            true,	// reduce by
                            3		// production 3
                        ),
                        new ParserStateColumn
                        (
                            16390,	// On PLUS
                            null,
                            true,	// reduce by
                            3		// production 3
                        ),
                        new ParserStateColumn
                        (
                            16391,	// On MINUS
                            null,
                            true,	// reduce by
                            3		// production 3
                        ),
                    },

                    NonterminalColumns = new ParserStateColumn[0],
                },

                new ParserState
                {
                    StateString =
                        "State S31 CORE ITEMS:\r\n" +
                        "R7: expression: expression POWER ^ expression\r\n" +
                        "CLOSURE ITEMS:\r\n" +
                        "R6: expression: ^ leafExpression\r\n" +
                        "R7: expression: ^ expression POWER expression\r\n" +
                        "R8: expression: ^ expression TIMES expression\r\n" +
                        "R9: expression: ^ expression DIVIDE expression\r\n" +
                        "R10: expression: ^ expression PLUS expression\r\n" +
                        "R11: expression: ^ expression MINUS expression\r\n" +
                        "R2: leafExpression: ^ optMinus number\r\n" +
                        "R3: leafExpression: ^ optMinus LPAREN expression RPAREN\r\n" +
                        "R4: optMinus: ^ MINUS\r\n" +
                        "R5: optMinus: ^\r\n" +
                        "{\r\n" +
                        "    NUMBER,\r\n" +
                        "    PERIOD,\r\n" +
                        "    LPAREN\r\n" +
                        "}\r\n" +
                        "SHIFTS, REDUCTIONS AND GOTOS\r\n" +
                        "  MINUS: SHIFT to state S6\r\n" +
                        "  NUMBER: REDUCE by rule R5: optMinus:;\r\n" +
                        "  PERIOD: REDUCE by rule R5: optMinus:;\r\n" +
                        "  LPAREN: REDUCE by rule R5: optMinus:;\r\n" +
                        "  expression: GOTO state S44\r\n" +
                        "  leafExpression: GOTO state S23\r\n" +
                        "  optMinus: GOTO state S24\r\n",

                    TerminalColumns = new ParserStateColumn[]
                    {
                        new ParserStateColumn
                        (
                            16391,	// On MINUS
                            null,
                            false,	// shift to
                            6		// state 6
                        ),
                        new ParserStateColumn
                        (
                            16395,	// On NUMBER
                            null,
                            true,	// reduce by
                            5		// production 5
                        ),
                        new ParserStateColumn
                        (
                            16396,	// On PERIOD
                            null,
                            true,	// reduce by
                            5		// production 5
                        ),
                        new ParserStateColumn
                        (
                            16388,	// On LPAREN
                            null,
                            true,	// reduce by
                            5		// production 5
                        ),
                    },

                    // GOTO non-terminals used to select next state
                    // after a REDUCE operation has taken place

                    NonterminalColumns = new ParserStateColumn[]
                    {
                        new ParserStateColumn
                        (
                            32770,	// On expression
                            null,
                            false,	// goto
                            44		// state 44
                        ),
                        new ParserStateColumn
                        (
                            32771,	// On leafExpression
                            null,
                            false,	// goto
                            23		// state 23
                        ),
                        new ParserStateColumn
                        (
                            32772,	// On optMinus
                            null,
                            false,	// goto
                            24		// state 24
                        ),
                    },
                },

                new ParserState
                {
                    StateString =
                        "State S32 CORE ITEMS:\r\n" +
                        "R8: expression: expression TIMES ^ expression\r\n" +
                        "CLOSURE ITEMS:\r\n" +
                        "R6: expression: ^ leafExpression\r\n" +
                        "R7: expression: ^ expression POWER expression\r\n" +
                        "R8: expression: ^ expression TIMES expression\r\n" +
                        "R9: expression: ^ expression DIVIDE expression\r\n" +
                        "R10: expression: ^ expression PLUS expression\r\n" +
                        "R11: expression: ^ expression MINUS expression\r\n" +
                        "R2: leafExpression: ^ optMinus number\r\n" +
                        "R3: leafExpression: ^ optMinus LPAREN expression RPAREN\r\n" +
                        "R4: optMinus: ^ MINUS\r\n" +
                        "R5: optMinus: ^\r\n" +
                        "{\r\n" +
                        "    NUMBER,\r\n" +
                        "    PERIOD,\r\n" +
                        "    LPAREN\r\n" +
                        "}\r\n" +
                        "SHIFTS, REDUCTIONS AND GOTOS\r\n" +
                        "  MINUS: SHIFT to state S6\r\n" +
                        "  NUMBER: REDUCE by rule R5: optMinus:;\r\n" +
                        "  PERIOD: REDUCE by rule R5: optMinus:;\r\n" +
                        "  LPAREN: REDUCE by rule R5: optMinus:;\r\n" +
                        "  expression: GOTO state S45\r\n" +
                        "  leafExpression: GOTO state S23\r\n" +
                        "  optMinus: GOTO state S24\r\n",

                    TerminalColumns = new ParserStateColumn[]
                    {
                        new ParserStateColumn
                        (
                            16391,	// On MINUS
                            null,
                            false,	// shift to
                            6		// state 6
                        ),
                        new ParserStateColumn
                        (
                            16395,	// On NUMBER
                            null,
                            true,	// reduce by
                            5		// production 5
                        ),
                        new ParserStateColumn
                        (
                            16396,	// On PERIOD
                            null,
                            true,	// reduce by
                            5		// production 5
                        ),
                        new ParserStateColumn
                        (
                            16388,	// On LPAREN
                            null,
                            true,	// reduce by
                            5		// production 5
                        ),
                    },

                    // GOTO non-terminals used to select next state
                    // after a REDUCE operation has taken place

                    NonterminalColumns = new ParserStateColumn[]
                    {
                        new ParserStateColumn
                        (
                            32770,	// On expression
                            null,
                            false,	// goto
                            45		// state 45
                        ),
                        new ParserStateColumn
                        (
                            32771,	// On leafExpression
                            null,
                            false,	// goto
                            23		// state 23
                        ),
                        new ParserStateColumn
                        (
                            32772,	// On optMinus
                            null,
                            false,	// goto
                            24		// state 24
                        ),
                    },
                },

                new ParserState
                {
                    StateString =
                        "State S33 CORE ITEMS:\r\n" +
                        "R9: expression: expression DIVIDE ^ expression\r\n" +
                        "CLOSURE ITEMS:\r\n" +
                        "R6: expression: ^ leafExpression\r\n" +
                        "R7: expression: ^ expression POWER expression\r\n" +
                        "R8: expression: ^ expression TIMES expression\r\n" +
                        "R9: expression: ^ expression DIVIDE expression\r\n" +
                        "R10: expression: ^ expression PLUS expression\r\n" +
                        "R11: expression: ^ expression MINUS expression\r\n" +
                        "R2: leafExpression: ^ optMinus number\r\n" +
                        "R3: leafExpression: ^ optMinus LPAREN expression RPAREN\r\n" +
                        "R4: optMinus: ^ MINUS\r\n" +
                        "R5: optMinus: ^\r\n" +
                        "{\r\n" +
                        "    NUMBER,\r\n" +
                        "    PERIOD,\r\n" +
                        "    LPAREN\r\n" +
                        "}\r\n" +
                        "SHIFTS, REDUCTIONS AND GOTOS\r\n" +
                        "  MINUS: SHIFT to state S6\r\n" +
                        "  NUMBER: REDUCE by rule R5: optMinus:;\r\n" +
                        "  PERIOD: REDUCE by rule R5: optMinus:;\r\n" +
                        "  LPAREN: REDUCE by rule R5: optMinus:;\r\n" +
                        "  expression: GOTO state S46\r\n" +
                        "  leafExpression: GOTO state S23\r\n" +
                        "  optMinus: GOTO state S24\r\n",

                    TerminalColumns = new ParserStateColumn[]
                    {
                        new ParserStateColumn
                        (
                            16391,	// On MINUS
                            null,
                            false,	// shift to
                            6		// state 6
                        ),
                        new ParserStateColumn
                        (
                            16395,	// On NUMBER
                            null,
                            true,	// reduce by
                            5		// production 5
                        ),
                        new ParserStateColumn
                        (
                            16396,	// On PERIOD
                            null,
                            true,	// reduce by
                            5		// production 5
                        ),
                        new ParserStateColumn
                        (
                            16388,	// On LPAREN
                            null,
                            true,	// reduce by
                            5		// production 5
                        ),
                    },

                    // GOTO non-terminals used to select next state
                    // after a REDUCE operation has taken place

                    NonterminalColumns = new ParserStateColumn[]
                    {
                        new ParserStateColumn
                        (
                            32770,	// On expression
                            null,
                            false,	// goto
                            46		// state 46
                        ),
                        new ParserStateColumn
                        (
                            32771,	// On leafExpression
                            null,
                            false,	// goto
                            23		// state 23
                        ),
                        new ParserStateColumn
                        (
                            32772,	// On optMinus
                            null,
                            false,	// goto
                            24		// state 24
                        ),
                    },
                },

                new ParserState
                {
                    StateString =
                        "State S34 CORE ITEMS:\r\n" +
                        "R10: expression: expression PLUS ^ expression\r\n" +
                        "CLOSURE ITEMS:\r\n" +
                        "R6: expression: ^ leafExpression\r\n" +
                        "R7: expression: ^ expression POWER expression\r\n" +
                        "R8: expression: ^ expression TIMES expression\r\n" +
                        "R9: expression: ^ expression DIVIDE expression\r\n" +
                        "R10: expression: ^ expression PLUS expression\r\n" +
                        "R11: expression: ^ expression MINUS expression\r\n" +
                        "R2: leafExpression: ^ optMinus number\r\n" +
                        "R3: leafExpression: ^ optMinus LPAREN expression RPAREN\r\n" +
                        "R4: optMinus: ^ MINUS\r\n" +
                        "R5: optMinus: ^\r\n" +
                        "{\r\n" +
                        "    NUMBER,\r\n" +
                        "    PERIOD,\r\n" +
                        "    LPAREN\r\n" +
                        "}\r\n" +
                        "SHIFTS, REDUCTIONS AND GOTOS\r\n" +
                        "  MINUS: SHIFT to state S6\r\n" +
                        "  NUMBER: REDUCE by rule R5: optMinus:;\r\n" +
                        "  PERIOD: REDUCE by rule R5: optMinus:;\r\n" +
                        "  LPAREN: REDUCE by rule R5: optMinus:;\r\n" +
                        "  expression: GOTO state S47\r\n" +
                        "  leafExpression: GOTO state S23\r\n" +
                        "  optMinus: GOTO state S24\r\n",

                    TerminalColumns = new ParserStateColumn[]
                    {
                        new ParserStateColumn
                        (
                            16391,	// On MINUS
                            null,
                            false,	// shift to
                            6		// state 6
                        ),
                        new ParserStateColumn
                        (
                            16395,	// On NUMBER
                            null,
                            true,	// reduce by
                            5		// production 5
                        ),
                        new ParserStateColumn
                        (
                            16396,	// On PERIOD
                            null,
                            true,	// reduce by
                            5		// production 5
                        ),
                        new ParserStateColumn
                        (
                            16388,	// On LPAREN
                            null,
                            true,	// reduce by
                            5		// production 5
                        ),
                    },

                    // GOTO non-terminals used to select next state
                    // after a REDUCE operation has taken place

                    NonterminalColumns = new ParserStateColumn[]
                    {
                        new ParserStateColumn
                        (
                            32770,	// On expression
                            null,
                            false,	// goto
                            47		// state 47
                        ),
                        new ParserStateColumn
                        (
                            32771,	// On leafExpression
                            null,
                            false,	// goto
                            23		// state 23
                        ),
                        new ParserStateColumn
                        (
                            32772,	// On optMinus
                            null,
                            false,	// goto
                            24		// state 24
                        ),
                    },
                },

                new ParserState
                {
                    StateString =
                        "State S35 CORE ITEMS:\r\n" +
                        "R11: expression: expression MINUS ^ expression\r\n" +
                        "CLOSURE ITEMS:\r\n" +
                        "R6: expression: ^ leafExpression\r\n" +
                        "R7: expression: ^ expression POWER expression\r\n" +
                        "R8: expression: ^ expression TIMES expression\r\n" +
                        "R9: expression: ^ expression DIVIDE expression\r\n" +
                        "R10: expression: ^ expression PLUS expression\r\n" +
                        "R11: expression: ^ expression MINUS expression\r\n" +
                        "R2: leafExpression: ^ optMinus number\r\n" +
                        "R3: leafExpression: ^ optMinus LPAREN expression RPAREN\r\n" +
                        "R4: optMinus: ^ MINUS\r\n" +
                        "R5: optMinus: ^\r\n" +
                        "{\r\n" +
                        "    NUMBER,\r\n" +
                        "    PERIOD,\r\n" +
                        "    LPAREN\r\n" +
                        "}\r\n" +
                        "SHIFTS, REDUCTIONS AND GOTOS\r\n" +
                        "  MINUS: SHIFT to state S6\r\n" +
                        "  NUMBER: REDUCE by rule R5: optMinus:;\r\n" +
                        "  PERIOD: REDUCE by rule R5: optMinus:;\r\n" +
                        "  LPAREN: REDUCE by rule R5: optMinus:;\r\n" +
                        "  expression: GOTO state S48\r\n" +
                        "  leafExpression: GOTO state S23\r\n" +
                        "  optMinus: GOTO state S24\r\n",

                    TerminalColumns = new ParserStateColumn[]
                    {
                        new ParserStateColumn
                        (
                            16391,	// On MINUS
                            null,
                            false,	// shift to
                            6		// state 6
                        ),
                        new ParserStateColumn
                        (
                            16395,	// On NUMBER
                            null,
                            true,	// reduce by
                            5		// production 5
                        ),
                        new ParserStateColumn
                        (
                            16396,	// On PERIOD
                            null,
                            true,	// reduce by
                            5		// production 5
                        ),
                        new ParserStateColumn
                        (
                            16388,	// On LPAREN
                            null,
                            true,	// reduce by
                            5		// production 5
                        ),
                    },

                    // GOTO non-terminals used to select next state
                    // after a REDUCE operation has taken place

                    NonterminalColumns = new ParserStateColumn[]
                    {
                        new ParserStateColumn
                        (
                            32770,	// On expression
                            null,
                            false,	// goto
                            48		// state 48
                        ),
                        new ParserStateColumn
                        (
                            32771,	// On leafExpression
                            null,
                            false,	// goto
                            23		// state 23
                        ),
                        new ParserStateColumn
                        (
                            32772,	// On optMinus
                            null,
                            false,	// goto
                            24		// state 24
                        ),
                    },
                },

                new ParserState
                {
                    StateString =
                        "State S36 CORE ITEMS:\r\n" +
                        "R2: leafExpression: optMinus number ^\r\n" +
                        "{\r\n" +
                        "    RPAREN,\r\n" +
                        "    POWER,\r\n" +
                        "    TIMES,\r\n" +
                        "    DIVIDE,\r\n" +
                        "    PLUS,\r\n" +
                        "    MINUS\r\n" +
                        "}\r\n" +
                        "SHIFTS, REDUCTIONS AND GOTOS\r\n" +
                        "  RPAREN: REDUCE by rule R2: leafExpression: optMinus number;\r\n" +
                        "  POWER: REDUCE by rule R2: leafExpression: optMinus number;\r\n" +
                        "  TIMES: REDUCE by rule R2: leafExpression: optMinus number;\r\n" +
                        "  DIVIDE: REDUCE by rule R2: leafExpression: optMinus number;\r\n" +
                        "  PLUS: REDUCE by rule R2: leafExpression: optMinus number;\r\n" +
                        "  MINUS: REDUCE by rule R2: leafExpression: optMinus number;\r\n",

                    TerminalColumns = new ParserStateColumn[]
                    {
                        new ParserStateColumn
                        (
                            16389,	// On RPAREN
                            null,
                            true,	// reduce by
                            2		// production 2
                        ),
                        new ParserStateColumn
                        (
                            16394,	// On POWER
                            null,
                            true,	// reduce by
                            2		// production 2
                        ),
                        new ParserStateColumn
                        (
                            16392,	// On TIMES
                            null,
                            true,	// reduce by
                            2		// production 2
                        ),
                        new ParserStateColumn
                        (
                            16393,	// On DIVIDE
                            null,
                            true,	// reduce by
                            2		// production 2
                        ),
                        new ParserStateColumn
                        (
                            16390,	// On PLUS
                            null,
                            true,	// reduce by
                            2		// production 2
                        ),
                        new ParserStateColumn
                        (
                            16391,	// On MINUS
                            null,
                            true,	// reduce by
                            2		// production 2
                        ),
                    },

                    NonterminalColumns = new ParserStateColumn[0],
                },

                new ParserState
                {
                    StateString =
                        "State S37 CORE ITEMS:\r\n" +
                        "R3: leafExpression: optMinus LPAREN ^ expression RPAREN\r\n" +
                        "CLOSURE ITEMS:\r\n" +
                        "R6: expression: ^ leafExpression\r\n" +
                        "R7: expression: ^ expression POWER expression\r\n" +
                        "R8: expression: ^ expression TIMES expression\r\n" +
                        "R9: expression: ^ expression DIVIDE expression\r\n" +
                        "R10: expression: ^ expression PLUS expression\r\n" +
                        "R11: expression: ^ expression MINUS expression\r\n" +
                        "R2: leafExpression: ^ optMinus number\r\n" +
                        "R3: leafExpression: ^ optMinus LPAREN expression RPAREN\r\n" +
                        "R4: optMinus: ^ MINUS\r\n" +
                        "R5: optMinus: ^\r\n" +
                        "{\r\n" +
                        "    NUMBER,\r\n" +
                        "    PERIOD,\r\n" +
                        "    LPAREN\r\n" +
                        "}\r\n" +
                        "SHIFTS, REDUCTIONS AND GOTOS\r\n" +
                        "  MINUS: SHIFT to state S6\r\n" +
                        "  NUMBER: REDUCE by rule R5: optMinus:;\r\n" +
                        "  PERIOD: REDUCE by rule R5: optMinus:;\r\n" +
                        "  LPAREN: REDUCE by rule R5: optMinus:;\r\n" +
                        "  expression: GOTO state S49\r\n" +
                        "  leafExpression: GOTO state S23\r\n" +
                        "  optMinus: GOTO state S24\r\n",

                    TerminalColumns = new ParserStateColumn[]
                    {
                        new ParserStateColumn
                        (
                            16391,	// On MINUS
                            null,
                            false,	// shift to
                            6		// state 6
                        ),
                        new ParserStateColumn
                        (
                            16395,	// On NUMBER
                            null,
                            true,	// reduce by
                            5		// production 5
                        ),
                        new ParserStateColumn
                        (
                            16396,	// On PERIOD
                            null,
                            true,	// reduce by
                            5		// production 5
                        ),
                        new ParserStateColumn
                        (
                            16388,	// On LPAREN
                            null,
                            true,	// reduce by
                            5		// production 5
                        ),
                    },

                    // GOTO non-terminals used to select next state
                    // after a REDUCE operation has taken place

                    NonterminalColumns = new ParserStateColumn[]
                    {
                        new ParserStateColumn
                        (
                            32770,	// On expression
                            null,
                            false,	// goto
                            49		// state 49
                        ),
                        new ParserStateColumn
                        (
                            32771,	// On leafExpression
                            null,
                            false,	// goto
                            23		// state 23
                        ),
                        new ParserStateColumn
                        (
                            32772,	// On optMinus
                            null,
                            false,	// goto
                            24		// state 24
                        ),
                    },
                },

                new ParserState
                {
                    StateString =
                        "State S38 CORE ITEMS:\r\n" +
                        "R12: number: NUMBER ^ exponent\r\n" +
                        "R13: number: NUMBER ^ mantissa exponent\r\n" +
                        "CLOSURE ITEMS:\r\n" +
                        "R16: exponent: ^ EXPONENT NUMBER\r\n" +
                        "R17: exponent: ^ EXPONENT MINUS NUMBER\r\n" +
                        "R18: exponent: ^\r\n" +
                        "{\r\n" +
                        "    RPAREN,\r\n" +
                        "    POWER,\r\n" +
                        "    TIMES,\r\n" +
                        "    DIVIDE,\r\n" +
                        "    PLUS,\r\n" +
                        "    MINUS\r\n" +
                        "}\r\n" +
                        "R15: mantissa: ^ PERIOD NUMBER\r\n" +
                        "SHIFTS, REDUCTIONS AND GOTOS\r\n" +
                        "  EXPONENT: SHIFT to state S52\r\n" +
                        "  PERIOD: SHIFT to state S40\r\n" +
                        "  RPAREN: REDUCE by rule R18: exponent:;\r\n" +
                        "  POWER: REDUCE by rule R18: exponent:;\r\n" +
                        "  TIMES: REDUCE by rule R18: exponent:;\r\n" +
                        "  DIVIDE: REDUCE by rule R18: exponent:;\r\n" +
                        "  PLUS: REDUCE by rule R18: exponent:;\r\n" +
                        "  MINUS: REDUCE by rule R18: exponent:;\r\n" +
                        "  exponent: GOTO state S50\r\n" +
                        "  mantissa: GOTO state S51\r\n",

                    TerminalColumns = new ParserStateColumn[]
                    {
                        new ParserStateColumn
                        (
                            16397,	// On EXPONENT
                            null,
                            false,	// shift to
                            52		// state 52
                        ),
                        new ParserStateColumn
                        (
                            16396,	// On PERIOD
                            null,
                            false,	// shift to
                            40		// state 40
                        ),
                        new ParserStateColumn
                        (
                            16389,	// On RPAREN
                            null,
                            true,	// reduce by
                            18		// production 18
                        ),
                        new ParserStateColumn
                        (
                            16394,	// On POWER
                            null,
                            true,	// reduce by
                            18		// production 18
                        ),
                        new ParserStateColumn
                        (
                            16392,	// On TIMES
                            null,
                            true,	// reduce by
                            18		// production 18
                        ),
                        new ParserStateColumn
                        (
                            16393,	// On DIVIDE
                            null,
                            true,	// reduce by
                            18		// production 18
                        ),
                        new ParserStateColumn
                        (
                            16390,	// On PLUS
                            null,
                            true,	// reduce by
                            18		// production 18
                        ),
                        new ParserStateColumn
                        (
                            16391,	// On MINUS
                            null,
                            true,	// reduce by
                            18		// production 18
                        ),
                    },

                    // GOTO non-terminals used to select next state
                    // after a REDUCE operation has taken place

                    NonterminalColumns = new ParserStateColumn[]
                    {
                        new ParserStateColumn
                        (
                            32774,	// On exponent
                            null,
                            false,	// goto
                            50		// state 50
                        ),
                        new ParserStateColumn
                        (
                            32775,	// On mantissa
                            null,
                            false,	// goto
                            51		// state 51
                        ),
                    },
                },

                new ParserState
                {
                    StateString =
                        "State S39 CORE ITEMS:\r\n" +
                        "R14: number: mantissa ^ exponent\r\n" +
                        "CLOSURE ITEMS:\r\n" +
                        "R16: exponent: ^ EXPONENT NUMBER\r\n" +
                        "R17: exponent: ^ EXPONENT MINUS NUMBER\r\n" +
                        "R18: exponent: ^\r\n" +
                        "{\r\n" +
                        "    RPAREN,\r\n" +
                        "    POWER,\r\n" +
                        "    TIMES,\r\n" +
                        "    DIVIDE,\r\n" +
                        "    PLUS,\r\n" +
                        "    MINUS\r\n" +
                        "}\r\n" +
                        "SHIFTS, REDUCTIONS AND GOTOS\r\n" +
                        "  EXPONENT: SHIFT to state S52\r\n" +
                        "  RPAREN: REDUCE by rule R18: exponent:;\r\n" +
                        "  POWER: REDUCE by rule R18: exponent:;\r\n" +
                        "  TIMES: REDUCE by rule R18: exponent:;\r\n" +
                        "  DIVIDE: REDUCE by rule R18: exponent:;\r\n" +
                        "  PLUS: REDUCE by rule R18: exponent:;\r\n" +
                        "  MINUS: REDUCE by rule R18: exponent:;\r\n" +
                        "  exponent: GOTO state S53\r\n",

                    TerminalColumns = new ParserStateColumn[]
                    {
                        new ParserStateColumn
                        (
                            16397,	// On EXPONENT
                            null,
                            false,	// shift to
                            52		// state 52
                        ),
                        new ParserStateColumn
                        (
                            16389,	// On RPAREN
                            null,
                            true,	// reduce by
                            18		// production 18
                        ),
                        new ParserStateColumn
                        (
                            16394,	// On POWER
                            null,
                            true,	// reduce by
                            18		// production 18
                        ),
                        new ParserStateColumn
                        (
                            16392,	// On TIMES
                            null,
                            true,	// reduce by
                            18		// production 18
                        ),
                        new ParserStateColumn
                        (
                            16393,	// On DIVIDE
                            null,
                            true,	// reduce by
                            18		// production 18
                        ),
                        new ParserStateColumn
                        (
                            16390,	// On PLUS
                            null,
                            true,	// reduce by
                            18		// production 18
                        ),
                        new ParserStateColumn
                        (
                            16391,	// On MINUS
                            null,
                            true,	// reduce by
                            18		// production 18
                        ),
                    },

                    // GOTO non-terminals used to select next state
                    // after a REDUCE operation has taken place

                    NonterminalColumns = new ParserStateColumn[]
                    {
                        new ParserStateColumn
                        (
                            32774,	// On exponent
                            null,
                            false,	// goto
                            53		// state 53
                        ),
                    },
                },

                new ParserState
                {
                    StateString =
                        "State S40 CORE ITEMS:\r\n" +
                        "R15: mantissa: PERIOD ^ NUMBER\r\n" +
                        "SHIFTS, REDUCTIONS AND GOTOS\r\n" +
                        "  NUMBER: SHIFT to state S54\r\n",

                    TerminalColumns = new ParserStateColumn[]
                    {
                        new ParserStateColumn
                        (
                            16395,	// On NUMBER
                            null,
                            false,	// shift to
                            54		// state 54
                        ),
                    },

                    NonterminalColumns = new ParserStateColumn[0],
                },

                new ParserState
                {
                    StateString =
                        "State S41 CORE ITEMS:\r\n" +
                        "R13: number: NUMBER mantissa exponent ^\r\n" +
                        "{\r\n" +
                        "    EOF,\r\n" +
                        "    POWER,\r\n" +
                        "    TIMES,\r\n" +
                        "    DIVIDE,\r\n" +
                        "    PLUS,\r\n" +
                        "    MINUS\r\n" +
                        "}\r\n" +
                        "SHIFTS, REDUCTIONS AND GOTOS\r\n" +
                        "  EOF: REDUCE by rule R13: number: NUMBER mantissa exponent;\r\n" +
                        "  POWER: REDUCE by rule R13: number: NUMBER mantissa exponent;\r\n" +
                        "  TIMES: REDUCE by rule R13: number: NUMBER mantissa exponent;\r\n" +
                        "  DIVIDE: REDUCE by rule R13: number: NUMBER mantissa exponent;\r\n" +
                        "  PLUS: REDUCE by rule R13: number: NUMBER mantissa exponent;\r\n" +
                        "  MINUS: REDUCE by rule R13: number: NUMBER mantissa exponent;\r\n",

                    TerminalColumns = new ParserStateColumn[]
                    {
                        new ParserStateColumn
                        (
                            16385,	// On EOF
                            null,
                            true,	// reduce by
                            13		// production 13
                        ),
                        new ParserStateColumn
                        (
                            16394,	// On POWER
                            null,
                            true,	// reduce by
                            13		// production 13
                        ),
                        new ParserStateColumn
                        (
                            16392,	// On TIMES
                            null,
                            true,	// reduce by
                            13		// production 13
                        ),
                        new ParserStateColumn
                        (
                            16393,	// On DIVIDE
                            null,
                            true,	// reduce by
                            13		// production 13
                        ),
                        new ParserStateColumn
                        (
                            16390,	// On PLUS
                            null,
                            true,	// reduce by
                            13		// production 13
                        ),
                        new ParserStateColumn
                        (
                            16391,	// On MINUS
                            null,
                            true,	// reduce by
                            13		// production 13
                        ),
                    },

                    NonterminalColumns = new ParserStateColumn[0],
                },

                new ParserState
                {
                    StateString =
                        "State S42 CORE ITEMS:\r\n" +
                        "R16: exponent: EXPONENT NUMBER ^\r\n" +
                        "{\r\n" +
                        "    EOF,\r\n" +
                        "    POWER,\r\n" +
                        "    TIMES,\r\n" +
                        "    DIVIDE,\r\n" +
                        "    PLUS,\r\n" +
                        "    MINUS\r\n" +
                        "}\r\n" +
                        "SHIFTS, REDUCTIONS AND GOTOS\r\n" +
                        "  EOF: REDUCE by rule R16: exponent: EXPONENT NUMBER;\r\n" +
                        "  POWER: REDUCE by rule R16: exponent: EXPONENT NUMBER;\r\n" +
                        "  TIMES: REDUCE by rule R16: exponent: EXPONENT NUMBER;\r\n" +
                        "  DIVIDE: REDUCE by rule R16: exponent: EXPONENT NUMBER;\r\n" +
                        "  PLUS: REDUCE by rule R16: exponent: EXPONENT NUMBER;\r\n" +
                        "  MINUS: REDUCE by rule R16: exponent: EXPONENT NUMBER;\r\n",

                    TerminalColumns = new ParserStateColumn[]
                    {
                        new ParserStateColumn
                        (
                            16385,	// On EOF
                            null,
                            true,	// reduce by
                            16		// production 16
                        ),
                        new ParserStateColumn
                        (
                            16394,	// On POWER
                            null,
                            true,	// reduce by
                            16		// production 16
                        ),
                        new ParserStateColumn
                        (
                            16392,	// On TIMES
                            null,
                            true,	// reduce by
                            16		// production 16
                        ),
                        new ParserStateColumn
                        (
                            16393,	// On DIVIDE
                            null,
                            true,	// reduce by
                            16		// production 16
                        ),
                        new ParserStateColumn
                        (
                            16390,	// On PLUS
                            null,
                            true,	// reduce by
                            16		// production 16
                        ),
                        new ParserStateColumn
                        (
                            16391,	// On MINUS
                            null,
                            true,	// reduce by
                            16		// production 16
                        ),
                    },

                    NonterminalColumns = new ParserStateColumn[0],
                },

                new ParserState
                {
                    StateString =
                        "State S43 CORE ITEMS:\r\n" +
                        "R17: exponent: EXPONENT MINUS ^ NUMBER\r\n" +
                        "SHIFTS, REDUCTIONS AND GOTOS\r\n" +
                        "  NUMBER: SHIFT to state S55\r\n",

                    TerminalColumns = new ParserStateColumn[]
                    {
                        new ParserStateColumn
                        (
                            16395,	// On NUMBER
                            null,
                            false,	// shift to
                            55		// state 55
                        ),
                    },

                    NonterminalColumns = new ParserStateColumn[0],
                },

                new ParserState
                {
                    StateString =
                        "State S44 CORE ITEMS:\r\n" +
                        "R7: expression: expression POWER expression ^\r\n" +
                        "{\r\n" +
                        "    RPAREN,\r\n" +
                        "    POWER,\r\n" +
                        "    TIMES,\r\n" +
                        "    DIVIDE,\r\n" +
                        "    PLUS,\r\n" +
                        "    MINUS,\r\n" +
                        "    RPAREN,\r\n" +
                        "    POWER,\r\n" +
                        "    TIMES,\r\n" +
                        "    DIVIDE,\r\n" +
                        "    PLUS,\r\n" +
                        "    MINUS\r\n" +
                        "}\r\n" +
                        "R8: expression: expression ^ TIMES expression\r\n" +
                        "R9: expression: expression ^ DIVIDE expression\r\n" +
                        "R10: expression: expression ^ PLUS expression\r\n" +
                        "R11: expression: expression ^ MINUS expression\r\n" +
                        "SHIFTS, REDUCTIONS AND GOTOS\r\n" +
                        "  POWER: SHIFT to state S31\r\n" +
                        "  POWER: REDUCE by rule R7: expression: expression POWER expression;\r\n" +
                        "  TIMES: SHIFT to state S32\r\n" +
                        "  TIMES: REDUCE by rule R7: expression: expression POWER expression;\r\n" +
                        "  DIVIDE: SHIFT to state S33\r\n" +
                        "  DIVIDE: REDUCE by rule R7: expression: expression POWER expression;\r\n" +
                        "  PLUS: SHIFT to state S34\r\n" +
                        "  PLUS: REDUCE by rule R7: expression: expression POWER expression;\r\n" +
                        "  MINUS: SHIFT to state S35\r\n" +
                        "  MINUS: REDUCE by rule R7: expression: expression POWER expression;\r\n" +
                        "  RPAREN: REDUCE by rule R7: expression: expression POWER expression;\r\n",

                    TerminalColumns = new ParserStateColumn[]
                    {
                        new ParserStateColumn
                        (
                            16394,	// On POWER
                            null,
                            false,	// shift to
                            31		// state 31
                        ),
                        new ParserStateColumn
                        (
                            16394,	// On POWER
                            null,
                            true,	// reduce by
                            7		// production 7
                        ),
                        new ParserStateColumn
                        (
                            16392,	// On TIMES
                            null,
                            false,	// shift to
                            32		// state 32
                        ),
                        new ParserStateColumn
                        (
                            16392,	// On TIMES
                            null,
                            true,	// reduce by
                            7		// production 7
                        ),
                        new ParserStateColumn
                        (
                            16393,	// On DIVIDE
                            null,
                            false,	// shift to
                            33		// state 33
                        ),
                        new ParserStateColumn
                        (
                            16393,	// On DIVIDE
                            null,
                            true,	// reduce by
                            7		// production 7
                        ),
                        new ParserStateColumn
                        (
                            16390,	// On PLUS
                            null,
                            false,	// shift to
                            34		// state 34
                        ),
                        new ParserStateColumn
                        (
                            16390,	// On PLUS
                            null,
                            true,	// reduce by
                            7		// production 7
                        ),
                        new ParserStateColumn
                        (
                            16391,	// On MINUS
                            null,
                            false,	// shift to
                            35		// state 35
                        ),
                        new ParserStateColumn
                        (
                            16391,	// On MINUS
                            null,
                            true,	// reduce by
                            7		// production 7
                        ),
                        new ParserStateColumn
                        (
                            16389,	// On RPAREN
                            null,
                            true,	// reduce by
                            7		// production 7
                        ),
                    },

                    NonterminalColumns = new ParserStateColumn[0],
                },

                new ParserState
                {
                    StateString =
                        "State S45 CORE ITEMS:\r\n" +
                        "R8: expression: expression TIMES expression ^\r\n" +
                        "{\r\n" +
                        "    RPAREN,\r\n" +
                        "    POWER,\r\n" +
                        "    TIMES,\r\n" +
                        "    DIVIDE,\r\n" +
                        "    PLUS,\r\n" +
                        "    MINUS,\r\n" +
                        "    RPAREN,\r\n" +
                        "    POWER,\r\n" +
                        "    TIMES,\r\n" +
                        "    DIVIDE,\r\n" +
                        "    PLUS,\r\n" +
                        "    MINUS\r\n" +
                        "}\r\n" +
                        "R7: expression: expression ^ POWER expression\r\n" +
                        "R9: expression: expression ^ DIVIDE expression\r\n" +
                        "R10: expression: expression ^ PLUS expression\r\n" +
                        "R11: expression: expression ^ MINUS expression\r\n" +
                        "SHIFTS, REDUCTIONS AND GOTOS\r\n" +
                        "  POWER: SHIFT to state S31\r\n" +
                        "  POWER: REDUCE by rule R8: expression: expression TIMES expression;\r\n" +
                        "  TIMES: SHIFT to state S32\r\n" +
                        "  TIMES: REDUCE by rule R8: expression: expression TIMES expression;\r\n" +
                        "  DIVIDE: SHIFT to state S33\r\n" +
                        "  DIVIDE: REDUCE by rule R8: expression: expression TIMES expression;\r\n" +
                        "  PLUS: SHIFT to state S34\r\n" +
                        "  PLUS: REDUCE by rule R8: expression: expression TIMES expression;\r\n" +
                        "  MINUS: SHIFT to state S35\r\n" +
                        "  MINUS: REDUCE by rule R8: expression: expression TIMES expression;\r\n" +
                        "  RPAREN: REDUCE by rule R8: expression: expression TIMES expression;\r\n",

                    TerminalColumns = new ParserStateColumn[]
                    {
                        new ParserStateColumn
                        (
                            16394,	// On POWER
                            null,
                            false,	// shift to
                            31		// state 31
                        ),
                        new ParserStateColumn
                        (
                            16394,	// On POWER
                            null,
                            true,	// reduce by
                            8		// production 8
                        ),
                        new ParserStateColumn
                        (
                            16392,	// On TIMES
                            null,
                            false,	// shift to
                            32		// state 32
                        ),
                        new ParserStateColumn
                        (
                            16392,	// On TIMES
                            null,
                            true,	// reduce by
                            8		// production 8
                        ),
                        new ParserStateColumn
                        (
                            16393,	// On DIVIDE
                            null,
                            false,	// shift to
                            33		// state 33
                        ),
                        new ParserStateColumn
                        (
                            16393,	// On DIVIDE
                            null,
                            true,	// reduce by
                            8		// production 8
                        ),
                        new ParserStateColumn
                        (
                            16390,	// On PLUS
                            null,
                            false,	// shift to
                            34		// state 34
                        ),
                        new ParserStateColumn
                        (
                            16390,	// On PLUS
                            null,
                            true,	// reduce by
                            8		// production 8
                        ),
                        new ParserStateColumn
                        (
                            16391,	// On MINUS
                            null,
                            false,	// shift to
                            35		// state 35
                        ),
                        new ParserStateColumn
                        (
                            16391,	// On MINUS
                            null,
                            true,	// reduce by
                            8		// production 8
                        ),
                        new ParserStateColumn
                        (
                            16389,	// On RPAREN
                            null,
                            true,	// reduce by
                            8		// production 8
                        ),
                    },

                    NonterminalColumns = new ParserStateColumn[0],
                },

                new ParserState
                {
                    StateString =
                        "State S46 CORE ITEMS:\r\n" +
                        "R9: expression: expression DIVIDE expression ^\r\n" +
                        "{\r\n" +
                        "    RPAREN,\r\n" +
                        "    POWER,\r\n" +
                        "    TIMES,\r\n" +
                        "    DIVIDE,\r\n" +
                        "    PLUS,\r\n" +
                        "    MINUS,\r\n" +
                        "    RPAREN,\r\n" +
                        "    POWER,\r\n" +
                        "    TIMES,\r\n" +
                        "    DIVIDE,\r\n" +
                        "    PLUS,\r\n" +
                        "    MINUS\r\n" +
                        "}\r\n" +
                        "R7: expression: expression ^ POWER expression\r\n" +
                        "R8: expression: expression ^ TIMES expression\r\n" +
                        "R10: expression: expression ^ PLUS expression\r\n" +
                        "R11: expression: expression ^ MINUS expression\r\n" +
                        "SHIFTS, REDUCTIONS AND GOTOS\r\n" +
                        "  POWER: SHIFT to state S31\r\n" +
                        "  POWER: REDUCE by rule R9: expression: expression DIVIDE expression;\r\n" +
                        "  TIMES: SHIFT to state S32\r\n" +
                        "  TIMES: REDUCE by rule R9: expression: expression DIVIDE expression;\r\n" +
                        "  DIVIDE: SHIFT to state S33\r\n" +
                        "  DIVIDE: REDUCE by rule R9: expression: expression DIVIDE expression;\r\n" +
                        "  PLUS: SHIFT to state S34\r\n" +
                        "  PLUS: REDUCE by rule R9: expression: expression DIVIDE expression;\r\n" +
                        "  MINUS: SHIFT to state S35\r\n" +
                        "  MINUS: REDUCE by rule R9: expression: expression DIVIDE expression;\r\n" +
                        "  RPAREN: REDUCE by rule R9: expression: expression DIVIDE expression;\r\n",

                    TerminalColumns = new ParserStateColumn[]
                    {
                        new ParserStateColumn
                        (
                            16394,	// On POWER
                            null,
                            false,	// shift to
                            31		// state 31
                        ),
                        new ParserStateColumn
                        (
                            16394,	// On POWER
                            null,
                            true,	// reduce by
                            9		// production 9
                        ),
                        new ParserStateColumn
                        (
                            16392,	// On TIMES
                            null,
                            false,	// shift to
                            32		// state 32
                        ),
                        new ParserStateColumn
                        (
                            16392,	// On TIMES
                            null,
                            true,	// reduce by
                            9		// production 9
                        ),
                        new ParserStateColumn
                        (
                            16393,	// On DIVIDE
                            null,
                            false,	// shift to
                            33		// state 33
                        ),
                        new ParserStateColumn
                        (
                            16393,	// On DIVIDE
                            null,
                            true,	// reduce by
                            9		// production 9
                        ),
                        new ParserStateColumn
                        (
                            16390,	// On PLUS
                            null,
                            false,	// shift to
                            34		// state 34
                        ),
                        new ParserStateColumn
                        (
                            16390,	// On PLUS
                            null,
                            true,	// reduce by
                            9		// production 9
                        ),
                        new ParserStateColumn
                        (
                            16391,	// On MINUS
                            null,
                            false,	// shift to
                            35		// state 35
                        ),
                        new ParserStateColumn
                        (
                            16391,	// On MINUS
                            null,
                            true,	// reduce by
                            9		// production 9
                        ),
                        new ParserStateColumn
                        (
                            16389,	// On RPAREN
                            null,
                            true,	// reduce by
                            9		// production 9
                        ),
                    },

                    NonterminalColumns = new ParserStateColumn[0],
                },

                new ParserState
                {
                    StateString =
                        "State S47 CORE ITEMS:\r\n" +
                        "R10: expression: expression PLUS expression ^\r\n" +
                        "{\r\n" +
                        "    RPAREN,\r\n" +
                        "    POWER,\r\n" +
                        "    TIMES,\r\n" +
                        "    DIVIDE,\r\n" +
                        "    PLUS,\r\n" +
                        "    MINUS,\r\n" +
                        "    RPAREN,\r\n" +
                        "    POWER,\r\n" +
                        "    TIMES,\r\n" +
                        "    DIVIDE,\r\n" +
                        "    PLUS,\r\n" +
                        "    MINUS\r\n" +
                        "}\r\n" +
                        "R7: expression: expression ^ POWER expression\r\n" +
                        "R8: expression: expression ^ TIMES expression\r\n" +
                        "R9: expression: expression ^ DIVIDE expression\r\n" +
                        "R11: expression: expression ^ MINUS expression\r\n" +
                        "SHIFTS, REDUCTIONS AND GOTOS\r\n" +
                        "  POWER: SHIFT to state S31\r\n" +
                        "  POWER: REDUCE by rule R10: expression: expression PLUS expression;\r\n" +
                        "  TIMES: SHIFT to state S32\r\n" +
                        "  TIMES: REDUCE by rule R10: expression: expression PLUS expression;\r\n" +
                        "  DIVIDE: SHIFT to state S33\r\n" +
                        "  DIVIDE: REDUCE by rule R10: expression: expression PLUS expression;\r\n" +
                        "  PLUS: SHIFT to state S34\r\n" +
                        "  PLUS: REDUCE by rule R10: expression: expression PLUS expression;\r\n" +
                        "  MINUS: SHIFT to state S35\r\n" +
                        "  MINUS: REDUCE by rule R10: expression: expression PLUS expression;\r\n" +
                        "  RPAREN: REDUCE by rule R10: expression: expression PLUS expression;\r\n",

                    TerminalColumns = new ParserStateColumn[]
                    {
                        new ParserStateColumn
                        (
                            16394,	// On POWER
                            null,
                            false,	// shift to
                            31		// state 31
                        ),
                        new ParserStateColumn
                        (
                            16394,	// On POWER
                            null,
                            true,	// reduce by
                            10		// production 10
                        ),
                        new ParserStateColumn
                        (
                            16392,	// On TIMES
                            null,
                            false,	// shift to
                            32		// state 32
                        ),
                        new ParserStateColumn
                        (
                            16392,	// On TIMES
                            null,
                            true,	// reduce by
                            10		// production 10
                        ),
                        new ParserStateColumn
                        (
                            16393,	// On DIVIDE
                            null,
                            false,	// shift to
                            33		// state 33
                        ),
                        new ParserStateColumn
                        (
                            16393,	// On DIVIDE
                            null,
                            true,	// reduce by
                            10		// production 10
                        ),
                        new ParserStateColumn
                        (
                            16390,	// On PLUS
                            null,
                            false,	// shift to
                            34		// state 34
                        ),
                        new ParserStateColumn
                        (
                            16390,	// On PLUS
                            null,
                            true,	// reduce by
                            10		// production 10
                        ),
                        new ParserStateColumn
                        (
                            16391,	// On MINUS
                            null,
                            false,	// shift to
                            35		// state 35
                        ),
                        new ParserStateColumn
                        (
                            16391,	// On MINUS
                            null,
                            true,	// reduce by
                            10		// production 10
                        ),
                        new ParserStateColumn
                        (
                            16389,	// On RPAREN
                            null,
                            true,	// reduce by
                            10		// production 10
                        ),
                    },

                    NonterminalColumns = new ParserStateColumn[0],
                },

                new ParserState
                {
                    StateString =
                        "State S48 CORE ITEMS:\r\n" +
                        "R11: expression: expression MINUS expression ^\r\n" +
                        "{\r\n" +
                        "    RPAREN,\r\n" +
                        "    POWER,\r\n" +
                        "    TIMES,\r\n" +
                        "    DIVIDE,\r\n" +
                        "    PLUS,\r\n" +
                        "    MINUS,\r\n" +
                        "    RPAREN,\r\n" +
                        "    POWER,\r\n" +
                        "    TIMES,\r\n" +
                        "    DIVIDE,\r\n" +
                        "    PLUS,\r\n" +
                        "    MINUS\r\n" +
                        "}\r\n" +
                        "R7: expression: expression ^ POWER expression\r\n" +
                        "R8: expression: expression ^ TIMES expression\r\n" +
                        "R9: expression: expression ^ DIVIDE expression\r\n" +
                        "R10: expression: expression ^ PLUS expression\r\n" +
                        "SHIFTS, REDUCTIONS AND GOTOS\r\n" +
                        "  POWER: SHIFT to state S31\r\n" +
                        "  POWER: REDUCE by rule R11: expression: expression MINUS expression;\r\n" +
                        "  TIMES: SHIFT to state S32\r\n" +
                        "  TIMES: REDUCE by rule R11: expression: expression MINUS expression;\r\n" +
                        "  DIVIDE: SHIFT to state S33\r\n" +
                        "  DIVIDE: REDUCE by rule R11: expression: expression MINUS expression;\r\n" +
                        "  PLUS: SHIFT to state S34\r\n" +
                        "  PLUS: REDUCE by rule R11: expression: expression MINUS expression;\r\n" +
                        "  MINUS: SHIFT to state S35\r\n" +
                        "  MINUS: REDUCE by rule R11: expression: expression MINUS expression;\r\n" +
                        "  RPAREN: REDUCE by rule R11: expression: expression MINUS expression;\r\n",

                    TerminalColumns = new ParserStateColumn[]
                    {
                        new ParserStateColumn
                        (
                            16394,	// On POWER
                            null,
                            false,	// shift to
                            31		// state 31
                        ),
                        new ParserStateColumn
                        (
                            16394,	// On POWER
                            null,
                            true,	// reduce by
                            11		// production 11
                        ),
                        new ParserStateColumn
                        (
                            16392,	// On TIMES
                            null,
                            false,	// shift to
                            32		// state 32
                        ),
                        new ParserStateColumn
                        (
                            16392,	// On TIMES
                            null,
                            true,	// reduce by
                            11		// production 11
                        ),
                        new ParserStateColumn
                        (
                            16393,	// On DIVIDE
                            null,
                            false,	// shift to
                            33		// state 33
                        ),
                        new ParserStateColumn
                        (
                            16393,	// On DIVIDE
                            null,
                            true,	// reduce by
                            11		// production 11
                        ),
                        new ParserStateColumn
                        (
                            16390,	// On PLUS
                            null,
                            false,	// shift to
                            34		// state 34
                        ),
                        new ParserStateColumn
                        (
                            16390,	// On PLUS
                            null,
                            true,	// reduce by
                            11		// production 11
                        ),
                        new ParserStateColumn
                        (
                            16391,	// On MINUS
                            null,
                            false,	// shift to
                            35		// state 35
                        ),
                        new ParserStateColumn
                        (
                            16391,	// On MINUS
                            null,
                            true,	// reduce by
                            11		// production 11
                        ),
                        new ParserStateColumn
                        (
                            16389,	// On RPAREN
                            null,
                            true,	// reduce by
                            11		// production 11
                        ),
                    },

                    NonterminalColumns = new ParserStateColumn[0],
                },

                new ParserState
                {
                    StateString =
                        "State S49 CORE ITEMS:\r\n" +
                        "R3: leafExpression: optMinus LPAREN expression ^ RPAREN\r\n" +
                        "R7: expression: expression ^ POWER expression\r\n" +
                        "R8: expression: expression ^ TIMES expression\r\n" +
                        "R9: expression: expression ^ DIVIDE expression\r\n" +
                        "R10: expression: expression ^ PLUS expression\r\n" +
                        "R11: expression: expression ^ MINUS expression\r\n" +
                        "SHIFTS, REDUCTIONS AND GOTOS\r\n" +
                        "  RPAREN: SHIFT to state S56\r\n" +
                        "  POWER: SHIFT to state S31\r\n" +
                        "  TIMES: SHIFT to state S32\r\n" +
                        "  DIVIDE: SHIFT to state S33\r\n" +
                        "  PLUS: SHIFT to state S34\r\n" +
                        "  MINUS: SHIFT to state S35\r\n",

                    TerminalColumns = new ParserStateColumn[]
                    {
                        new ParserStateColumn
                        (
                            16389,	// On RPAREN
                            null,
                            false,	// shift to
                            56		// state 56
                        ),
                        new ParserStateColumn
                        (
                            16394,	// On POWER
                            null,
                            false,	// shift to
                            31		// state 31
                        ),
                        new ParserStateColumn
                        (
                            16392,	// On TIMES
                            null,
                            false,	// shift to
                            32		// state 32
                        ),
                        new ParserStateColumn
                        (
                            16393,	// On DIVIDE
                            null,
                            false,	// shift to
                            33		// state 33
                        ),
                        new ParserStateColumn
                        (
                            16390,	// On PLUS
                            null,
                            false,	// shift to
                            34		// state 34
                        ),
                        new ParserStateColumn
                        (
                            16391,	// On MINUS
                            null,
                            false,	// shift to
                            35		// state 35
                        ),
                    },

                    NonterminalColumns = new ParserStateColumn[0],
                },

                new ParserState
                {
                    StateString =
                        "State S50 CORE ITEMS:\r\n" +
                        "R12: number: NUMBER exponent ^\r\n" +
                        "{\r\n" +
                        "    RPAREN,\r\n" +
                        "    POWER,\r\n" +
                        "    TIMES,\r\n" +
                        "    DIVIDE,\r\n" +
                        "    PLUS,\r\n" +
                        "    MINUS\r\n" +
                        "}\r\n" +
                        "SHIFTS, REDUCTIONS AND GOTOS\r\n" +
                        "  RPAREN: REDUCE by rule R12: number: NUMBER exponent;\r\n" +
                        "  POWER: REDUCE by rule R12: number: NUMBER exponent;\r\n" +
                        "  TIMES: REDUCE by rule R12: number: NUMBER exponent;\r\n" +
                        "  DIVIDE: REDUCE by rule R12: number: NUMBER exponent;\r\n" +
                        "  PLUS: REDUCE by rule R12: number: NUMBER exponent;\r\n" +
                        "  MINUS: REDUCE by rule R12: number: NUMBER exponent;\r\n",

                    TerminalColumns = new ParserStateColumn[]
                    {
                        new ParserStateColumn
                        (
                            16389,	// On RPAREN
                            null,
                            true,	// reduce by
                            12		// production 12
                        ),
                        new ParserStateColumn
                        (
                            16394,	// On POWER
                            null,
                            true,	// reduce by
                            12		// production 12
                        ),
                        new ParserStateColumn
                        (
                            16392,	// On TIMES
                            null,
                            true,	// reduce by
                            12		// production 12
                        ),
                        new ParserStateColumn
                        (
                            16393,	// On DIVIDE
                            null,
                            true,	// reduce by
                            12		// production 12
                        ),
                        new ParserStateColumn
                        (
                            16390,	// On PLUS
                            null,
                            true,	// reduce by
                            12		// production 12
                        ),
                        new ParserStateColumn
                        (
                            16391,	// On MINUS
                            null,
                            true,	// reduce by
                            12		// production 12
                        ),
                    },

                    NonterminalColumns = new ParserStateColumn[0],
                },

                new ParserState
                {
                    StateString =
                        "State S51 CORE ITEMS:\r\n" +
                        "R13: number: NUMBER mantissa ^ exponent\r\n" +
                        "CLOSURE ITEMS:\r\n" +
                        "R16: exponent: ^ EXPONENT NUMBER\r\n" +
                        "R17: exponent: ^ EXPONENT MINUS NUMBER\r\n" +
                        "R18: exponent: ^\r\n" +
                        "{\r\n" +
                        "    RPAREN,\r\n" +
                        "    POWER,\r\n" +
                        "    TIMES,\r\n" +
                        "    DIVIDE,\r\n" +
                        "    PLUS,\r\n" +
                        "    MINUS\r\n" +
                        "}\r\n" +
                        "SHIFTS, REDUCTIONS AND GOTOS\r\n" +
                        "  EXPONENT: SHIFT to state S52\r\n" +
                        "  RPAREN: REDUCE by rule R18: exponent:;\r\n" +
                        "  POWER: REDUCE by rule R18: exponent:;\r\n" +
                        "  TIMES: REDUCE by rule R18: exponent:;\r\n" +
                        "  DIVIDE: REDUCE by rule R18: exponent:;\r\n" +
                        "  PLUS: REDUCE by rule R18: exponent:;\r\n" +
                        "  MINUS: REDUCE by rule R18: exponent:;\r\n" +
                        "  exponent: GOTO state S57\r\n",

                    TerminalColumns = new ParserStateColumn[]
                    {
                        new ParserStateColumn
                        (
                            16397,	// On EXPONENT
                            null,
                            false,	// shift to
                            52		// state 52
                        ),
                        new ParserStateColumn
                        (
                            16389,	// On RPAREN
                            null,
                            true,	// reduce by
                            18		// production 18
                        ),
                        new ParserStateColumn
                        (
                            16394,	// On POWER
                            null,
                            true,	// reduce by
                            18		// production 18
                        ),
                        new ParserStateColumn
                        (
                            16392,	// On TIMES
                            null,
                            true,	// reduce by
                            18		// production 18
                        ),
                        new ParserStateColumn
                        (
                            16393,	// On DIVIDE
                            null,
                            true,	// reduce by
                            18		// production 18
                        ),
                        new ParserStateColumn
                        (
                            16390,	// On PLUS
                            null,
                            true,	// reduce by
                            18		// production 18
                        ),
                        new ParserStateColumn
                        (
                            16391,	// On MINUS
                            null,
                            true,	// reduce by
                            18		// production 18
                        ),
                    },

                    // GOTO non-terminals used to select next state
                    // after a REDUCE operation has taken place

                    NonterminalColumns = new ParserStateColumn[]
                    {
                        new ParserStateColumn
                        (
                            32774,	// On exponent
                            null,
                            false,	// goto
                            57		// state 57
                        ),
                    },
                },

                new ParserState
                {
                    StateString =
                        "State S52 CORE ITEMS:\r\n" +
                        "R16: exponent: EXPONENT ^ NUMBER\r\n" +
                        "R17: exponent: EXPONENT ^ MINUS NUMBER\r\n" +
                        "SHIFTS, REDUCTIONS AND GOTOS\r\n" +
                        "  NUMBER: SHIFT to state S58\r\n" +
                        "  MINUS: SHIFT to state S59\r\n",

                    TerminalColumns = new ParserStateColumn[]
                    {
                        new ParserStateColumn
                        (
                            16395,	// On NUMBER
                            null,
                            false,	// shift to
                            58		// state 58
                        ),
                        new ParserStateColumn
                        (
                            16391,	// On MINUS
                            null,
                            false,	// shift to
                            59		// state 59
                        ),
                    },

                    NonterminalColumns = new ParserStateColumn[0],
                },

                new ParserState
                {
                    StateString =
                        "State S53 CORE ITEMS:\r\n" +
                        "R14: number: mantissa exponent ^\r\n" +
                        "{\r\n" +
                        "    RPAREN,\r\n" +
                        "    POWER,\r\n" +
                        "    TIMES,\r\n" +
                        "    DIVIDE,\r\n" +
                        "    PLUS,\r\n" +
                        "    MINUS\r\n" +
                        "}\r\n" +
                        "SHIFTS, REDUCTIONS AND GOTOS\r\n" +
                        "  RPAREN: REDUCE by rule R14: number: mantissa exponent;\r\n" +
                        "  POWER: REDUCE by rule R14: number: mantissa exponent;\r\n" +
                        "  TIMES: REDUCE by rule R14: number: mantissa exponent;\r\n" +
                        "  DIVIDE: REDUCE by rule R14: number: mantissa exponent;\r\n" +
                        "  PLUS: REDUCE by rule R14: number: mantissa exponent;\r\n" +
                        "  MINUS: REDUCE by rule R14: number: mantissa exponent;\r\n",

                    TerminalColumns = new ParserStateColumn[]
                    {
                        new ParserStateColumn
                        (
                            16389,	// On RPAREN
                            null,
                            true,	// reduce by
                            14		// production 14
                        ),
                        new ParserStateColumn
                        (
                            16394,	// On POWER
                            null,
                            true,	// reduce by
                            14		// production 14
                        ),
                        new ParserStateColumn
                        (
                            16392,	// On TIMES
                            null,
                            true,	// reduce by
                            14		// production 14
                        ),
                        new ParserStateColumn
                        (
                            16393,	// On DIVIDE
                            null,
                            true,	// reduce by
                            14		// production 14
                        ),
                        new ParserStateColumn
                        (
                            16390,	// On PLUS
                            null,
                            true,	// reduce by
                            14		// production 14
                        ),
                        new ParserStateColumn
                        (
                            16391,	// On MINUS
                            null,
                            true,	// reduce by
                            14		// production 14
                        ),
                    },

                    NonterminalColumns = new ParserStateColumn[0],
                },

                new ParserState
                {
                    StateString =
                        "State S54 CORE ITEMS:\r\n" +
                        "R15: mantissa: PERIOD NUMBER ^\r\n" +
                        "{\r\n" +
                        "    EXPONENT,\r\n" +
                        "    RPAREN,\r\n" +
                        "    POWER,\r\n" +
                        "    TIMES,\r\n" +
                        "    DIVIDE,\r\n" +
                        "    PLUS,\r\n" +
                        "    MINUS\r\n" +
                        "}\r\n" +
                        "SHIFTS, REDUCTIONS AND GOTOS\r\n" +
                        "  EXPONENT: REDUCE by rule R15: mantissa: PERIOD NUMBER;\r\n" +
                        "  RPAREN: REDUCE by rule R15: mantissa: PERIOD NUMBER;\r\n" +
                        "  POWER: REDUCE by rule R15: mantissa: PERIOD NUMBER;\r\n" +
                        "  TIMES: REDUCE by rule R15: mantissa: PERIOD NUMBER;\r\n" +
                        "  DIVIDE: REDUCE by rule R15: mantissa: PERIOD NUMBER;\r\n" +
                        "  PLUS: REDUCE by rule R15: mantissa: PERIOD NUMBER;\r\n" +
                        "  MINUS: REDUCE by rule R15: mantissa: PERIOD NUMBER;\r\n",

                    TerminalColumns = new ParserStateColumn[]
                    {
                        new ParserStateColumn
                        (
                            16397,	// On EXPONENT
                            null,
                            true,	// reduce by
                            15		// production 15
                        ),
                        new ParserStateColumn
                        (
                            16389,	// On RPAREN
                            null,
                            true,	// reduce by
                            15		// production 15
                        ),
                        new ParserStateColumn
                        (
                            16394,	// On POWER
                            null,
                            true,	// reduce by
                            15		// production 15
                        ),
                        new ParserStateColumn
                        (
                            16392,	// On TIMES
                            null,
                            true,	// reduce by
                            15		// production 15
                        ),
                        new ParserStateColumn
                        (
                            16393,	// On DIVIDE
                            null,
                            true,	// reduce by
                            15		// production 15
                        ),
                        new ParserStateColumn
                        (
                            16390,	// On PLUS
                            null,
                            true,	// reduce by
                            15		// production 15
                        ),
                        new ParserStateColumn
                        (
                            16391,	// On MINUS
                            null,
                            true,	// reduce by
                            15		// production 15
                        ),
                    },

                    NonterminalColumns = new ParserStateColumn[0],
                },

                new ParserState
                {
                    StateString =
                        "State S55 CORE ITEMS:\r\n" +
                        "R17: exponent: EXPONENT MINUS NUMBER ^\r\n" +
                        "{\r\n" +
                        "    EOF,\r\n" +
                        "    POWER,\r\n" +
                        "    TIMES,\r\n" +
                        "    DIVIDE,\r\n" +
                        "    PLUS,\r\n" +
                        "    MINUS\r\n" +
                        "}\r\n" +
                        "SHIFTS, REDUCTIONS AND GOTOS\r\n" +
                        "  EOF: REDUCE by rule R17: exponent: EXPONENT MINUS NUMBER;\r\n" +
                        "  POWER: REDUCE by rule R17: exponent: EXPONENT MINUS NUMBER;\r\n" +
                        "  TIMES: REDUCE by rule R17: exponent: EXPONENT MINUS NUMBER;\r\n" +
                        "  DIVIDE: REDUCE by rule R17: exponent: EXPONENT MINUS NUMBER;\r\n" +
                        "  PLUS: REDUCE by rule R17: exponent: EXPONENT MINUS NUMBER;\r\n" +
                        "  MINUS: REDUCE by rule R17: exponent: EXPONENT MINUS NUMBER;\r\n",

                    TerminalColumns = new ParserStateColumn[]
                    {
                        new ParserStateColumn
                        (
                            16385,	// On EOF
                            null,
                            true,	// reduce by
                            17		// production 17
                        ),
                        new ParserStateColumn
                        (
                            16394,	// On POWER
                            null,
                            true,	// reduce by
                            17		// production 17
                        ),
                        new ParserStateColumn
                        (
                            16392,	// On TIMES
                            null,
                            true,	// reduce by
                            17		// production 17
                        ),
                        new ParserStateColumn
                        (
                            16393,	// On DIVIDE
                            null,
                            true,	// reduce by
                            17		// production 17
                        ),
                        new ParserStateColumn
                        (
                            16390,	// On PLUS
                            null,
                            true,	// reduce by
                            17		// production 17
                        ),
                        new ParserStateColumn
                        (
                            16391,	// On MINUS
                            null,
                            true,	// reduce by
                            17		// production 17
                        ),
                    },

                    NonterminalColumns = new ParserStateColumn[0],
                },

                new ParserState
                {
                    StateString =
                        "State S56 CORE ITEMS:\r\n" +
                        "R3: leafExpression: optMinus LPAREN expression RPAREN ^\r\n" +
                        "{\r\n" +
                        "    RPAREN,\r\n" +
                        "    POWER,\r\n" +
                        "    TIMES,\r\n" +
                        "    DIVIDE,\r\n" +
                        "    PLUS,\r\n" +
                        "    MINUS\r\n" +
                        "}\r\n" +
                        "SHIFTS, REDUCTIONS AND GOTOS\r\n" +
                        "  RPAREN: REDUCE by rule R3: leafExpression: optMinus LPAREN expression RPAREN;\r\n" +
                        "  POWER: REDUCE by rule R3: leafExpression: optMinus LPAREN expression RPAREN;\r\n" +
                        "  TIMES: REDUCE by rule R3: leafExpression: optMinus LPAREN expression RPAREN;\r\n" +
                        "  DIVIDE: REDUCE by rule R3: leafExpression: optMinus LPAREN expression RPAREN;\r\n" +
                        "  PLUS: REDUCE by rule R3: leafExpression: optMinus LPAREN expression RPAREN;\r\n" +
                        "  MINUS: REDUCE by rule R3: leafExpression: optMinus LPAREN expression RPAREN;\r\n",

                    TerminalColumns = new ParserStateColumn[]
                    {
                        new ParserStateColumn
                        (
                            16389,	// On RPAREN
                            null,
                            true,	// reduce by
                            3		// production 3
                        ),
                        new ParserStateColumn
                        (
                            16394,	// On POWER
                            null,
                            true,	// reduce by
                            3		// production 3
                        ),
                        new ParserStateColumn
                        (
                            16392,	// On TIMES
                            null,
                            true,	// reduce by
                            3		// production 3
                        ),
                        new ParserStateColumn
                        (
                            16393,	// On DIVIDE
                            null,
                            true,	// reduce by
                            3		// production 3
                        ),
                        new ParserStateColumn
                        (
                            16390,	// On PLUS
                            null,
                            true,	// reduce by
                            3		// production 3
                        ),
                        new ParserStateColumn
                        (
                            16391,	// On MINUS
                            null,
                            true,	// reduce by
                            3		// production 3
                        ),
                    },

                    NonterminalColumns = new ParserStateColumn[0],
                },

                new ParserState
                {
                    StateString =
                        "State S57 CORE ITEMS:\r\n" +
                        "R13: number: NUMBER mantissa exponent ^\r\n" +
                        "{\r\n" +
                        "    RPAREN,\r\n" +
                        "    POWER,\r\n" +
                        "    TIMES,\r\n" +
                        "    DIVIDE,\r\n" +
                        "    PLUS,\r\n" +
                        "    MINUS\r\n" +
                        "}\r\n" +
                        "SHIFTS, REDUCTIONS AND GOTOS\r\n" +
                        "  RPAREN: REDUCE by rule R13: number: NUMBER mantissa exponent;\r\n" +
                        "  POWER: REDUCE by rule R13: number: NUMBER mantissa exponent;\r\n" +
                        "  TIMES: REDUCE by rule R13: number: NUMBER mantissa exponent;\r\n" +
                        "  DIVIDE: REDUCE by rule R13: number: NUMBER mantissa exponent;\r\n" +
                        "  PLUS: REDUCE by rule R13: number: NUMBER mantissa exponent;\r\n" +
                        "  MINUS: REDUCE by rule R13: number: NUMBER mantissa exponent;\r\n",

                    TerminalColumns = new ParserStateColumn[]
                    {
                        new ParserStateColumn
                        (
                            16389,	// On RPAREN
                            null,
                            true,	// reduce by
                            13		// production 13
                        ),
                        new ParserStateColumn
                        (
                            16394,	// On POWER
                            null,
                            true,	// reduce by
                            13		// production 13
                        ),
                        new ParserStateColumn
                        (
                            16392,	// On TIMES
                            null,
                            true,	// reduce by
                            13		// production 13
                        ),
                        new ParserStateColumn
                        (
                            16393,	// On DIVIDE
                            null,
                            true,	// reduce by
                            13		// production 13
                        ),
                        new ParserStateColumn
                        (
                            16390,	// On PLUS
                            null,
                            true,	// reduce by
                            13		// production 13
                        ),
                        new ParserStateColumn
                        (
                            16391,	// On MINUS
                            null,
                            true,	// reduce by
                            13		// production 13
                        ),
                    },

                    NonterminalColumns = new ParserStateColumn[0],
                },

                new ParserState
                {
                    StateString =
                        "State S58 CORE ITEMS:\r\n" +
                        "R16: exponent: EXPONENT NUMBER ^\r\n" +
                        "{\r\n" +
                        "    RPAREN,\r\n" +
                        "    POWER,\r\n" +
                        "    TIMES,\r\n" +
                        "    DIVIDE,\r\n" +
                        "    PLUS,\r\n" +
                        "    MINUS\r\n" +
                        "}\r\n" +
                        "SHIFTS, REDUCTIONS AND GOTOS\r\n" +
                        "  RPAREN: REDUCE by rule R16: exponent: EXPONENT NUMBER;\r\n" +
                        "  POWER: REDUCE by rule R16: exponent: EXPONENT NUMBER;\r\n" +
                        "  TIMES: REDUCE by rule R16: exponent: EXPONENT NUMBER;\r\n" +
                        "  DIVIDE: REDUCE by rule R16: exponent: EXPONENT NUMBER;\r\n" +
                        "  PLUS: REDUCE by rule R16: exponent: EXPONENT NUMBER;\r\n" +
                        "  MINUS: REDUCE by rule R16: exponent: EXPONENT NUMBER;\r\n",

                    TerminalColumns = new ParserStateColumn[]
                    {
                        new ParserStateColumn
                        (
                            16389,	// On RPAREN
                            null,
                            true,	// reduce by
                            16		// production 16
                        ),
                        new ParserStateColumn
                        (
                            16394,	// On POWER
                            null,
                            true,	// reduce by
                            16		// production 16
                        ),
                        new ParserStateColumn
                        (
                            16392,	// On TIMES
                            null,
                            true,	// reduce by
                            16		// production 16
                        ),
                        new ParserStateColumn
                        (
                            16393,	// On DIVIDE
                            null,
                            true,	// reduce by
                            16		// production 16
                        ),
                        new ParserStateColumn
                        (
                            16390,	// On PLUS
                            null,
                            true,	// reduce by
                            16		// production 16
                        ),
                        new ParserStateColumn
                        (
                            16391,	// On MINUS
                            null,
                            true,	// reduce by
                            16		// production 16
                        ),
                    },

                    NonterminalColumns = new ParserStateColumn[0],
                },

                new ParserState
                {
                    StateString =
                        "State S59 CORE ITEMS:\r\n" +
                        "R17: exponent: EXPONENT MINUS ^ NUMBER\r\n" +
                        "SHIFTS, REDUCTIONS AND GOTOS\r\n" +
                        "  NUMBER: SHIFT to state S60\r\n",

                    TerminalColumns = new ParserStateColumn[]
                    {
                        new ParserStateColumn
                        (
                            16395,	// On NUMBER
                            null,
                            false,	// shift to
                            60		// state 60
                        ),
                    },

                    NonterminalColumns = new ParserStateColumn[0],
                },

                new ParserState
                {
                    StateString =
                        "State S60 CORE ITEMS:\r\n" +
                        "R17: exponent: EXPONENT MINUS NUMBER ^\r\n" +
                        "{\r\n" +
                        "    RPAREN,\r\n" +
                        "    POWER,\r\n" +
                        "    TIMES,\r\n" +
                        "    DIVIDE,\r\n" +
                        "    PLUS,\r\n" +
                        "    MINUS\r\n" +
                        "}\r\n" +
                        "SHIFTS, REDUCTIONS AND GOTOS\r\n" +
                        "  RPAREN: REDUCE by rule R17: exponent: EXPONENT MINUS NUMBER;\r\n" +
                        "  POWER: REDUCE by rule R17: exponent: EXPONENT MINUS NUMBER;\r\n" +
                        "  TIMES: REDUCE by rule R17: exponent: EXPONENT MINUS NUMBER;\r\n" +
                        "  DIVIDE: REDUCE by rule R17: exponent: EXPONENT MINUS NUMBER;\r\n" +
                        "  PLUS: REDUCE by rule R17: exponent: EXPONENT MINUS NUMBER;\r\n" +
                        "  MINUS: REDUCE by rule R17: exponent: EXPONENT MINUS NUMBER;\r\n",

                    TerminalColumns = new ParserStateColumn[]
                    {
                        new ParserStateColumn
                        (
                            16389,	// On RPAREN
                            null,
                            true,	// reduce by
                            17		// production 17
                        ),
                        new ParserStateColumn
                        (
                            16394,	// On POWER
                            null,
                            true,	// reduce by
                            17		// production 17
                        ),
                        new ParserStateColumn
                        (
                            16392,	// On TIMES
                            null,
                            true,	// reduce by
                            17		// production 17
                        ),
                        new ParserStateColumn
                        (
                            16393,	// On DIVIDE
                            null,
                            true,	// reduce by
                            17		// production 17
                        ),
                        new ParserStateColumn
                        (
                            16390,	// On PLUS
                            null,
                            true,	// reduce by
                            17		// production 17
                        ),
                        new ParserStateColumn
                        (
                            16391,	// On MINUS
                            null,
                            true,	// reduce by
                            17		// production 17
                        ),
                    },

                    NonterminalColumns = new ParserStateColumn[0],
                },

            };

            // Initialize the GLR Parser merge table

            table.MergeActions = new Dictionary<int, ParserMergeAction>();
            table.MergeActions.Add(32770, new ParserMergeAction("Mergeexpression"));  // Merge action for expression

            return table;
        }

        // GLR merge function for rules reducing to expression

        public void Mergeexpression(NonterminalToken[] args)
        {
            // Merge only needs to deal with situations
            // where we have expression OP expression
            // in which one of the children is also an
            // expression OP expression. In this case,
            // the job of the GLR merge is to choose
            // the interpretation that gives correct
            // operator precedence.

            if(IsExprOpExpr(args[1]))
            {
                var r = args[1].Children[2] as NonterminalToken;
                var l = args[1].Children[0] as NonterminalToken;

                if(IsExprOpExpr(r))
                {
                    // Example where swap must take place:
                    // args[1]
                    //  |
                    // Expr TIMES Expr
                    //             |
                    //            Expr PLUS Expr
                    //
                    // Which should be replaced by the other parse of the
                    // same sequence of input tokens which will look like:
                    // args[2]
                    //  |
                    // Expr PLUS Expr
                    //  |
                    // Expr TIMES Expr

                    if(HigherPrecedence(args[1].Children[1], r.Children[1]))
                        args[0] = args[2];
                    else
                        args[0] = args[1];
                }
                else if(IsExprOpExpr(l))
                {
                    // Example where the following swap must take place:
                    // args[1]
                    //  |
                    // Expr TIMES Expr
                    //  |
                    // Expr PLUS Expr
                    //
                    // Which should be replaced by the other parse of the
                    // same sequence of input tokens which will look like:
                    // args[2]
                    //  |
                    // Expr PLUS Expr
                    //            |
                    //           Expr TIMES Expr

                    if(HigherPrecedence(args[1].Children[1], l.Children[1]))
                        args[0] = args[2];
                    else
                        args[0] = args[1];
                }
            }
        }

        // Initialize the guard condition evaluator functions

        private static IGuardEvaluator[] InitGuards()
        {
            return new IGuardEvaluator[]
            {
            };
        }

        // The action functions taken from the inline code fragments
        // after the grammar rules, and used when rules are reduced.

        // result: expression

        public void Action_result_0(object[] args)
        {
            double arg1 = (double)args[1];
            // The result is extracted from the token tree
            // generated by the parsing process. Ideally
            // because we have written a merge function, when
            // the parse is over, there should be a single
            // non terminal token in the ParserResults
            // property, whose Value property should hold
            // the result of the computation.

            (args[0]) = arg1;
        }

        // leafExpression: optMinus number

        public void Action_leafExpression_0(object[] args)
        {
            double arg0 = default(double);
            double arg1 = (double)args[1];
            double arg2 = (double)args[2];
            try
            {
                arg0 = arg1 * arg2;
            }
            finally
            {
                args[0] = arg0;
            }
        }

        // leafExpression: optMinus LPAREN expression RPAREN

        public void Action_leafExpression_1(object[] args)
        {
            double arg0 = default(double);
            double arg1 = (double)args[1];
            double arg3 = (double)args[3];
            try
            {
                arg0 = arg1 * arg3;
            }
            finally
            {
                args[0] = arg0;
            }
        }

        // optMinus: MINUS

        public void Action_optMinus_0(object[] args)
        {
            double arg0 = default(double);
            try
            {
                arg0 = -1.0;
            }
            finally
            {
                args[0] = arg0;
            }
        }

        // optMinus:

        public void Action_optMinus_1(object[] args)
        {
            double arg0 = default(double);
            try
            {
                arg0 = 1.0;
            }
            finally
            {
                args[0] = arg0;
            }
        }

        // expression: leafExpression

        public void Action_expression_0(object[] args)
        {
            double arg0 = default(double);
            double arg1 = (double)args[1];
            try
            {
                arg0 = arg1;	
            }
            finally
            {
                args[0] = arg0;
            }
        }

        // expression: expression POWER expression

        public void Action_expression_1(object[] args)
        {
            double arg0 = default(double);
            double arg1 = (double)args[1];
            double arg3 = (double)args[3];
            try
            {
                arg0 = Math.Pow(arg1, arg3);	
            }
            finally
            {
                args[0] = arg0;
            }
        }

        // expression: expression TIMES expression

        public void Action_expression_2(object[] args)
        {
            double arg0 = default(double);
            double arg1 = (double)args[1];
            double arg3 = (double)args[3];
            try
            {
                arg0 = arg1 * arg3;  
            }
            finally
            {
                args[0] = arg0;
            }
        }

        // expression: expression DIVIDE expression

        public void Action_expression_3(object[] args)
        {
            double arg0 = default(double);
            double arg1 = (double)args[1];
            double arg3 = (double)args[3];
            try
            {
                arg0 = arg1 / arg3;  
            }
            finally
            {
                args[0] = arg0;
            }
        }

        // expression: expression PLUS expression

        public void Action_expression_4(object[] args)
        {
            double arg0 = default(double);
            double arg1 = (double)args[1];
            double arg3 = (double)args[3];
            try
            {
                arg0 = arg1 + arg3;  
            }
            finally
            {
                args[0] = arg0;
            }
        }

        // expression: expression MINUS expression

        public void Action_expression_5(object[] args)
        {
            double arg0 = default(double);
            double arg1 = (double)args[1];
            double arg3 = (double)args[3];
            try
            {
                arg0 = arg1 - arg3;  
            }
            finally
            {
                args[0] = arg0;
            }
        }

        // number: NUMBER exponent

        public void Action_number_0(object[] args)
        {
            double arg0 = default(double);
            string arg1 = (string)args[1];
            double arg2 = (double)args[2];
            try
            {
                arg0 = double.Parse(arg1) * Math.Pow(10.0, arg2);
            }
            finally
            {
                args[0] = arg0;
            }
        }

        // number: NUMBER mantissa exponent

        public void Action_number_1(object[] args)
        {
            double arg0 = default(double);
            string arg1 = (string)args[1];
            double arg2 = (double)args[2];
            double arg3 = (double)args[3];
            try
            {
                arg0 = (double.Parse(arg1) + arg2) 
                	* Math.Pow(10.0, arg3);
            }
            finally
            {
                args[0] = arg0;
            }
        }

        // number: mantissa exponent

        public void Action_number_2(object[] args)
        {
            double arg0 = default(double);
            double arg1 = (double)args[1];
            double arg2 = (double)args[2];
            try
            {
                arg0 = arg1 * Math.Pow(10.0, arg2);
            }
            finally
            {
                args[0] = arg0;
            }
        }

        // mantissa: PERIOD NUMBER

        public void Action_mantissa_0(object[] args)
        {
            double arg0 = default(double);
            string arg2 = (string)args[2];
            try
            {
                int digitCount = arg2.Length;
                double mantissa = double.Parse(arg2);
                while(--digitCount >= 0)
                    mantissa *= 0.1;
                arg0 = mantissa;
            }
            finally
            {
                args[0] = arg0;
            }
        }

        // exponent: EXPONENT NUMBER

        public void Action_exponent_0(object[] args)
        {
            double arg0 = default(double);
            string arg2 = (string)args[2];
            try
            {
                arg0 = double.Parse(arg2);
            }
            finally
            {
                args[0] = arg0;
            }
        }

        // exponent: EXPONENT MINUS NUMBER

        public void Action_exponent_1(object[] args)
        {
            double arg0 = default(double);
            string arg3 = (string)args[3];
            try
            {
                arg0 = - double.Parse(arg3);
            }
            finally
            {
                args[0] = arg0;
            }
        }

        // exponent:

        public void Action_exponent_2(object[] args)
        {
            double arg0 = default(double);
            try
            {
                arg0 = 0.0;
            }
            finally
            {
                args[0] = arg0;
            }
        }
    }
}
