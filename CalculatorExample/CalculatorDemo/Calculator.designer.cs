// AUTOGENERATED CODE FROM PARSELR PARSER-GENERATOR. DO NOT EDIT.
//
// Date generated: Mon, 31 Aug 2020 12:38:02 GMT
// This code represents the hidden derived class from the
// application-specific parser class, itself derived from
// Parsing.Parser. There should be no need to edit this file.

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.IO;
using Parsing;

namespace CalculatorDemo.AutoGenerated
{
    /// <summary>
    /// Implements the auto-generated part of the user-specific
    /// parser class. This gives the action functions and guards
    /// in-class access to the contents of the user-specific parser.
    /// </summary>

    public class Calculator_AutoGenerated : Calculator
    {
        /// <summary>
        /// Initialiser for source-code parser
        /// generator that is subsequently compiled to
        /// obtain the new run-time code.
        /// </summary>

        public static ParserTable InitParserTable()
        {
            ParserTable table = new ParserTable();

            // Initialize the parser factory delegate

            table.InitializeParserConstructor(typeof(Calculator_AutoGenerated));

            table.Tokens = new TwoWayMap<string, int>();
            table.ErrorRecoveryEnabled = true;

            // Terminal token names and values

            table.Tokens.Add("EOF", 16385);
            table.Tokens.Add("SOF", 16386);
            table.Tokens.Add("ERR", 16387);
            table.Tokens.Add("LPAREN", 16388);
            table.Tokens.Add("RPAREN", 16389);
            table.Tokens.Add("PLUS", 16390);
            table.Tokens.Add("MINUS", 16391);
            table.Tokens.Add("TIMES", 16392);
            table.Tokens.Add("DIVIDE", 16393);
            table.Tokens.Add("POWER", 16394);
            table.Tokens.Add("NUMBER", 16395);
            table.Tokens.Add("PERIOD", 16396);
            table.Tokens.Add("EXPONENT", 16397);

            // Non-terminal token names and values

            table.Tokens.Add("_Start", 32768);
            table.Tokens.Add("result", 32769);
            table.Tokens.Add("addExpression", 32770);
            table.Tokens.Add("leafExpression", 32771);
            table.Tokens.Add("number", 32772);
            table.Tokens.Add("powExpression", 32773);
            table.Tokens.Add("mulExpression", 32774);
            table.Tokens.Add("exponent", 32775);
            table.Tokens.Add("mantissa", 32776);

            table.Guards = InitGuards();

            table.Productions = new ParserProduction[]
            {
                new ParserProduction
                (
                    0, 0, "_Start: SOF result",
                    2, 32768 	// _Start
                ),

                new ParserProduction
                (
                    1, 0, "result: addExpression",
                    1, 32769,	// result
                    new ParserInlineAction("Action_result_0")
                ),

                new ParserProduction
                (
                    2, 0, "leafExpression: number",
                    1, 32771,	// leafExpression
                    new ParserInlineAction("Action_leafExpression_0")
                ),

                new ParserProduction
                (
                    3, 1, "leafExpression: LPAREN addExpression RPAREN",
                    3, 32771,	// leafExpression
                    new ParserInlineAction("Action_leafExpression_1")
                ),

                new ParserProduction
                (
                    4, 2, "leafExpression: MINUS leafExpression",
                    2, 32771,	// leafExpression
                    new ParserInlineAction("Action_leafExpression_2")
                ),

                new ParserProduction
                (
                    5, 0, "powExpression: powExpression POWER leafExpression",
                    3, 32773,	// powExpression
                    new ParserInlineAction("Action_powExpression_0")
                ),

                new ParserProduction
                (
                    6, 1, "powExpression: leafExpression",
                    1, 32773,	// powExpression
                    new ParserInlineAction("Action_powExpression_1")
                ),

                new ParserProduction
                (
                    7, 0, "mulExpression: mulExpression TIMES powExpression",
                    3, 32774,	// mulExpression
                    new ParserInlineAction("Action_mulExpression_0")
                ),

                new ParserProduction
                (
                    8, 1, "mulExpression: mulExpression DIVIDE powExpression",
                    3, 32774,	// mulExpression
                    new ParserInlineAction("Action_mulExpression_1")
                ),

                new ParserProduction
                (
                    9, 2, "mulExpression: powExpression",
                    1, 32774,	// mulExpression
                    new ParserInlineAction("Action_mulExpression_2")
                ),

                new ParserProduction
                (
                    10, 0, "addExpression: addExpression PLUS mulExpression",
                    3, 32770,	// addExpression
                    new ParserInlineAction("Action_addExpression_0")
                ),

                new ParserProduction
                (
                    11, 1, "addExpression: addExpression MINUS mulExpression",
                    3, 32770,	// addExpression
                    new ParserInlineAction("Action_addExpression_1")
                ),

                new ParserProduction
                (
                    12, 2, "addExpression: mulExpression",
                    1, 32770,	// addExpression
                    new ParserInlineAction("Action_addExpression_2")
                ),

                new ParserProduction
                (
                    13, 0, "number: NUMBER exponent",
                    2, 32772,	// number
                    new ParserInlineAction("Action_number_0")
                ),

                new ParserProduction
                (
                    14, 1, "number: NUMBER mantissa exponent",
                    3, 32772,	// number
                    new ParserInlineAction("Action_number_1")
                ),

                new ParserProduction
                (
                    15, 2, "number: mantissa exponent",
                    2, 32772,	// number
                    new ParserInlineAction("Action_number_2")
                ),

                new ParserProduction
                (
                    16, 0, "mantissa: PERIOD NUMBER",
                    2, 32776,	// mantissa
                    new ParserInlineAction("Action_mantissa_0")
                ),

                new ParserProduction
                (
                    17, 0, "exponent: EXPONENT NUMBER",
                    2, 32775,	// exponent
                    new ParserInlineAction("Action_exponent_0")
                ),

                new ParserProduction
                (
                    18, 1, "exponent: EXPONENT MINUS NUMBER",
                    3, 32775,	// exponent
                    new ParserInlineAction("Action_exponent_1")
                ),

                new ParserProduction
                (
                    19, 2, "exponent:",
                    0, 32775,	// exponent
                    new ParserInlineAction("Action_exponent_2")
                ),

            };

            table.States = new ParserState[]
            {
                new ParserState
                {
                    StateString =
                        "State S0 CORE ITEMS:\r\n" +
                        "R0: _Start: ^ SOF result\r\n" +
                        "SHIFTS, REDUCTIONS AND GOTOS\r\n" +
                        "  SOF: SHIFT to state S1\r\n",

                    TerminalColumns = new ParserStateColumn[]
                    {
                        new ParserStateColumn
                        (
                            16386,	// On SOF
                            null,
                            false,	// shift to
                            1		// state 1
                        ),
                    },

                    NonterminalColumns = new ParserStateColumn[0],
                },

                new ParserState
                {
                    StateString =
                        "State S1 CORE ITEMS:\r\n" +
                        "R0: _Start: SOF ^ result\r\n" +
                        "CLOSURE ITEMS:\r\n" +
                        "R1: result: ^ addExpression\r\n" +
                        "R10: addExpression: ^ addExpression PLUS mulExpression\r\n" +
                        "R11: addExpression: ^ addExpression MINUS mulExpression\r\n" +
                        "R12: addExpression: ^ mulExpression\r\n" +
                        "R7: mulExpression: ^ mulExpression TIMES powExpression\r\n" +
                        "R8: mulExpression: ^ mulExpression DIVIDE powExpression\r\n" +
                        "R9: mulExpression: ^ powExpression\r\n" +
                        "R5: powExpression: ^ powExpression POWER leafExpression\r\n" +
                        "R6: powExpression: ^ leafExpression\r\n" +
                        "R2: leafExpression: ^ number\r\n" +
                        "R3: leafExpression: ^ LPAREN addExpression RPAREN\r\n" +
                        "R4: leafExpression: ^ MINUS leafExpression\r\n" +
                        "R13: number: ^ NUMBER exponent\r\n" +
                        "R14: number: ^ NUMBER mantissa exponent\r\n" +
                        "R15: number: ^ mantissa exponent\r\n" +
                        "R16: mantissa: ^ PERIOD NUMBER\r\n" +
                        "SHIFTS, REDUCTIONS AND GOTOS\r\n" +
                        "  LPAREN: SHIFT to state S8\r\n" +
                        "  MINUS: SHIFT to state S9\r\n" +
                        "  NUMBER: SHIFT to state S10\r\n" +
                        "  PERIOD: SHIFT to state S12\r\n" +
                        "  result: GOTO state S2\r\n" +
                        "  addExpression: GOTO state S3\r\n" +
                        "  mulExpression: GOTO state S4\r\n" +
                        "  powExpression: GOTO state S5\r\n" +
                        "  leafExpression: GOTO state S6\r\n" +
                        "  number: GOTO state S7\r\n" +
                        "  mantissa: GOTO state S11\r\n",

                    TerminalColumns = new ParserStateColumn[]
                    {
                        new ParserStateColumn
                        (
                            16388,	// On LPAREN
                            null,
                            false,	// shift to
                            8		// state 8
                        ),
                        new ParserStateColumn
                        (
                            16391,	// On MINUS
                            null,
                            false,	// shift to
                            9		// state 9
                        ),
                        new ParserStateColumn
                        (
                            16395,	// On NUMBER
                            null,
                            false,	// shift to
                            10		// state 10
                        ),
                        new ParserStateColumn
                        (
                            16396,	// On PERIOD
                            null,
                            false,	// shift to
                            12		// state 12
                        ),
                    },

                    // GOTO non-terminals used to select next state
                    // after a REDUCE operation has taken place

                    NonterminalColumns = new ParserStateColumn[]
                    {
                        new ParserStateColumn
                        (
                            32769,	// On result
                            null,
                            false,	// goto
                            2		// state 2
                        ),
                        new ParserStateColumn
                        (
                            32770,	// On addExpression
                            null,
                            false,	// goto
                            3		// state 3
                        ),
                        new ParserStateColumn
                        (
                            32774,	// On mulExpression
                            null,
                            false,	// goto
                            4		// state 4
                        ),
                        new ParserStateColumn
                        (
                            32773,	// On powExpression
                            null,
                            false,	// goto
                            5		// state 5
                        ),
                        new ParserStateColumn
                        (
                            32771,	// On leafExpression
                            null,
                            false,	// goto
                            6		// state 6
                        ),
                        new ParserStateColumn
                        (
                            32772,	// On number
                            null,
                            false,	// goto
                            7		// state 7
                        ),
                        new ParserStateColumn
                        (
                            32776,	// On mantissa
                            null,
                            false,	// goto
                            11		// state 11
                        ),
                    },
                },

                new ParserState
                {
                    StateString =
                        "State S2 CORE ITEMS:\r\n" +
                        "R0: _Start: SOF result ^\r\n" +
                        "{\r\n" +
                        "    EOF\r\n" +
                        "}\r\n" +
                        "SHIFTS, REDUCTIONS AND GOTOS\r\n" +
                        "  EOF: REDUCE by rule R0: _Start: SOF result;\r\n",

                    TerminalColumns = new ParserStateColumn[]
                    {
                        new ParserStateColumn
                        (
                            16385,	// On EOF
                            null,
                            true,	// reduce by
                            0		// production 0
                        ),
                    },

                    NonterminalColumns = new ParserStateColumn[0],
                },

                new ParserState
                {
                    StateString =
                        "State S3 CORE ITEMS:\r\n" +
                        "R1: result: addExpression ^\r\n" +
                        "{\r\n" +
                        "    EOF\r\n" +
                        "}\r\n" +
                        "R10: addExpression: addExpression ^ PLUS mulExpression\r\n" +
                        "R11: addExpression: addExpression ^ MINUS mulExpression\r\n" +
                        "SHIFTS, REDUCTIONS AND GOTOS\r\n" +
                        "  PLUS: SHIFT to state S13\r\n" +
                        "  MINUS: SHIFT to state S14\r\n" +
                        "  EOF: REDUCE by rule R1: result: addExpression;\r\n",

                    TerminalColumns = new ParserStateColumn[]
                    {
                        new ParserStateColumn
                        (
                            16390,	// On PLUS
                            null,
                            false,	// shift to
                            13		// state 13
                        ),
                        new ParserStateColumn
                        (
                            16391,	// On MINUS
                            null,
                            false,	// shift to
                            14		// state 14
                        ),
                        new ParserStateColumn
                        (
                            16385,	// On EOF
                            null,
                            true,	// reduce by
                            1		// production 1
                        ),
                    },

                    NonterminalColumns = new ParserStateColumn[0],
                },

                new ParserState
                {
                    StateString =
                        "State S4 CORE ITEMS:\r\n" +
                        "R12: addExpression: mulExpression ^\r\n" +
                        "{\r\n" +
                        "    EOF,\r\n" +
                        "    PLUS,\r\n" +
                        "    MINUS,\r\n" +
                        "    RPAREN\r\n" +
                        "}\r\n" +
                        "R7: mulExpression: mulExpression ^ TIMES powExpression\r\n" +
                        "R8: mulExpression: mulExpression ^ DIVIDE powExpression\r\n" +
                        "SHIFTS, REDUCTIONS AND GOTOS\r\n" +
                        "  TIMES: SHIFT to state S15\r\n" +
                        "  DIVIDE: SHIFT to state S16\r\n" +
                        "  EOF: REDUCE by rule R12: addExpression: mulExpression;\r\n" +
                        "  PLUS: REDUCE by rule R12: addExpression: mulExpression;\r\n" +
                        "  MINUS: REDUCE by rule R12: addExpression: mulExpression;\r\n" +
                        "  RPAREN: REDUCE by rule R12: addExpression: mulExpression;\r\n",

                    TerminalColumns = new ParserStateColumn[]
                    {
                        new ParserStateColumn
                        (
                            16392,	// On TIMES
                            null,
                            false,	// shift to
                            15		// state 15
                        ),
                        new ParserStateColumn
                        (
                            16393,	// On DIVIDE
                            null,
                            false,	// shift to
                            16		// state 16
                        ),
                        new ParserStateColumn
                        (
                            16385,	// On EOF
                            null,
                            true,	// reduce by
                            12		// production 12
                        ),
                        new ParserStateColumn
                        (
                            16390,	// On PLUS
                            null,
                            true,	// reduce by
                            12		// production 12
                        ),
                        new ParserStateColumn
                        (
                            16391,	// On MINUS
                            null,
                            true,	// reduce by
                            12		// production 12
                        ),
                        new ParserStateColumn
                        (
                            16389,	// On RPAREN
                            null,
                            true,	// reduce by
                            12		// production 12
                        ),
                    },

                    NonterminalColumns = new ParserStateColumn[0],
                },

                new ParserState
                {
                    StateString =
                        "State S5 CORE ITEMS:\r\n" +
                        "R9: mulExpression: powExpression ^\r\n" +
                        "{\r\n" +
                        "    EOF,\r\n" +
                        "    PLUS,\r\n" +
                        "    MINUS,\r\n" +
                        "    TIMES,\r\n" +
                        "    DIVIDE,\r\n" +
                        "    RPAREN\r\n" +
                        "}\r\n" +
                        "R5: powExpression: powExpression ^ POWER leafExpression\r\n" +
                        "SHIFTS, REDUCTIONS AND GOTOS\r\n" +
                        "  POWER: SHIFT to state S17\r\n" +
                        "  EOF: REDUCE by rule R9: mulExpression: powExpression;\r\n" +
                        "  PLUS: REDUCE by rule R9: mulExpression: powExpression;\r\n" +
                        "  MINUS: REDUCE by rule R9: mulExpression: powExpression;\r\n" +
                        "  TIMES: REDUCE by rule R9: mulExpression: powExpression;\r\n" +
                        "  DIVIDE: REDUCE by rule R9: mulExpression: powExpression;\r\n" +
                        "  RPAREN: REDUCE by rule R9: mulExpression: powExpression;\r\n",

                    TerminalColumns = new ParserStateColumn[]
                    {
                        new ParserStateColumn
                        (
                            16394,	// On POWER
                            null,
                            false,	// shift to
                            17		// state 17
                        ),
                        new ParserStateColumn
                        (
                            16385,	// On EOF
                            null,
                            true,	// reduce by
                            9		// production 9
                        ),
                        new ParserStateColumn
                        (
                            16390,	// On PLUS
                            null,
                            true,	// reduce by
                            9		// production 9
                        ),
                        new ParserStateColumn
                        (
                            16391,	// On MINUS
                            null,
                            true,	// reduce by
                            9		// production 9
                        ),
                        new ParserStateColumn
                        (
                            16392,	// On TIMES
                            null,
                            true,	// reduce by
                            9		// production 9
                        ),
                        new ParserStateColumn
                        (
                            16393,	// On DIVIDE
                            null,
                            true,	// reduce by
                            9		// production 9
                        ),
                        new ParserStateColumn
                        (
                            16389,	// On RPAREN
                            null,
                            true,	// reduce by
                            9		// production 9
                        ),
                    },

                    NonterminalColumns = new ParserStateColumn[0],
                },

                new ParserState
                {
                    StateString =
                        "State S6 CORE ITEMS:\r\n" +
                        "R6: powExpression: leafExpression ^\r\n" +
                        "{\r\n" +
                        "    EOF,\r\n" +
                        "    PLUS,\r\n" +
                        "    MINUS,\r\n" +
                        "    TIMES,\r\n" +
                        "    DIVIDE,\r\n" +
                        "    POWER,\r\n" +
                        "    RPAREN\r\n" +
                        "}\r\n" +
                        "SHIFTS, REDUCTIONS AND GOTOS\r\n" +
                        "  EOF: REDUCE by rule R6: powExpression: leafExpression;\r\n" +
                        "  PLUS: REDUCE by rule R6: powExpression: leafExpression;\r\n" +
                        "  MINUS: REDUCE by rule R6: powExpression: leafExpression;\r\n" +
                        "  TIMES: REDUCE by rule R6: powExpression: leafExpression;\r\n" +
                        "  DIVIDE: REDUCE by rule R6: powExpression: leafExpression;\r\n" +
                        "  POWER: REDUCE by rule R6: powExpression: leafExpression;\r\n" +
                        "  RPAREN: REDUCE by rule R6: powExpression: leafExpression;\r\n",

                    TerminalColumns = new ParserStateColumn[]
                    {
                        new ParserStateColumn
                        (
                            16385,	// On EOF
                            null,
                            true,	// reduce by
                            6		// production 6
                        ),
                        new ParserStateColumn
                        (
                            16390,	// On PLUS
                            null,
                            true,	// reduce by
                            6		// production 6
                        ),
                        new ParserStateColumn
                        (
                            16391,	// On MINUS
                            null,
                            true,	// reduce by
                            6		// production 6
                        ),
                        new ParserStateColumn
                        (
                            16392,	// On TIMES
                            null,
                            true,	// reduce by
                            6		// production 6
                        ),
                        new ParserStateColumn
                        (
                            16393,	// On DIVIDE
                            null,
                            true,	// reduce by
                            6		// production 6
                        ),
                        new ParserStateColumn
                        (
                            16394,	// On POWER
                            null,
                            true,	// reduce by
                            6		// production 6
                        ),
                        new ParserStateColumn
                        (
                            16389,	// On RPAREN
                            null,
                            true,	// reduce by
                            6		// production 6
                        ),
                    },

                    NonterminalColumns = new ParserStateColumn[0],
                },

                new ParserState
                {
                    StateString =
                        "State S7 CORE ITEMS:\r\n" +
                        "R2: leafExpression: number ^\r\n" +
                        "{\r\n" +
                        "    EOF,\r\n" +
                        "    PLUS,\r\n" +
                        "    MINUS,\r\n" +
                        "    TIMES,\r\n" +
                        "    DIVIDE,\r\n" +
                        "    POWER,\r\n" +
                        "    RPAREN\r\n" +
                        "}\r\n" +
                        "SHIFTS, REDUCTIONS AND GOTOS\r\n" +
                        "  EOF: REDUCE by rule R2: leafExpression: number;\r\n" +
                        "  PLUS: REDUCE by rule R2: leafExpression: number;\r\n" +
                        "  MINUS: REDUCE by rule R2: leafExpression: number;\r\n" +
                        "  TIMES: REDUCE by rule R2: leafExpression: number;\r\n" +
                        "  DIVIDE: REDUCE by rule R2: leafExpression: number;\r\n" +
                        "  POWER: REDUCE by rule R2: leafExpression: number;\r\n" +
                        "  RPAREN: REDUCE by rule R2: leafExpression: number;\r\n",

                    TerminalColumns = new ParserStateColumn[]
                    {
                        new ParserStateColumn
                        (
                            16385,	// On EOF
                            null,
                            true,	// reduce by
                            2		// production 2
                        ),
                        new ParserStateColumn
                        (
                            16390,	// On PLUS
                            null,
                            true,	// reduce by
                            2		// production 2
                        ),
                        new ParserStateColumn
                        (
                            16391,	// On MINUS
                            null,
                            true,	// reduce by
                            2		// production 2
                        ),
                        new ParserStateColumn
                        (
                            16392,	// On TIMES
                            null,
                            true,	// reduce by
                            2		// production 2
                        ),
                        new ParserStateColumn
                        (
                            16393,	// On DIVIDE
                            null,
                            true,	// reduce by
                            2		// production 2
                        ),
                        new ParserStateColumn
                        (
                            16394,	// On POWER
                            null,
                            true,	// reduce by
                            2		// production 2
                        ),
                        new ParserStateColumn
                        (
                            16389,	// On RPAREN
                            null,
                            true,	// reduce by
                            2		// production 2
                        ),
                    },

                    NonterminalColumns = new ParserStateColumn[0],
                },

                new ParserState
                {
                    StateString =
                        "State S8 CORE ITEMS:\r\n" +
                        "R3: leafExpression: LPAREN ^ addExpression RPAREN\r\n" +
                        "CLOSURE ITEMS:\r\n" +
                        "R10: addExpression: ^ addExpression PLUS mulExpression\r\n" +
                        "R11: addExpression: ^ addExpression MINUS mulExpression\r\n" +
                        "R12: addExpression: ^ mulExpression\r\n" +
                        "R7: mulExpression: ^ mulExpression TIMES powExpression\r\n" +
                        "R8: mulExpression: ^ mulExpression DIVIDE powExpression\r\n" +
                        "R9: mulExpression: ^ powExpression\r\n" +
                        "R5: powExpression: ^ powExpression POWER leafExpression\r\n" +
                        "R6: powExpression: ^ leafExpression\r\n" +
                        "R2: leafExpression: ^ number\r\n" +
                        "R3: leafExpression: ^ LPAREN addExpression RPAREN\r\n" +
                        "R4: leafExpression: ^ MINUS leafExpression\r\n" +
                        "R13: number: ^ NUMBER exponent\r\n" +
                        "R14: number: ^ NUMBER mantissa exponent\r\n" +
                        "R15: number: ^ mantissa exponent\r\n" +
                        "R16: mantissa: ^ PERIOD NUMBER\r\n" +
                        "SHIFTS, REDUCTIONS AND GOTOS\r\n" +
                        "  LPAREN: SHIFT to state S8\r\n" +
                        "  MINUS: SHIFT to state S9\r\n" +
                        "  NUMBER: SHIFT to state S10\r\n" +
                        "  PERIOD: SHIFT to state S12\r\n" +
                        "  addExpression: GOTO state S18\r\n" +
                        "  mulExpression: GOTO state S4\r\n" +
                        "  powExpression: GOTO state S5\r\n" +
                        "  leafExpression: GOTO state S6\r\n" +
                        "  number: GOTO state S7\r\n" +
                        "  mantissa: GOTO state S11\r\n",

                    TerminalColumns = new ParserStateColumn[]
                    {
                        new ParserStateColumn
                        (
                            16388,	// On LPAREN
                            null,
                            false,	// shift to
                            8		// state 8
                        ),
                        new ParserStateColumn
                        (
                            16391,	// On MINUS
                            null,
                            false,	// shift to
                            9		// state 9
                        ),
                        new ParserStateColumn
                        (
                            16395,	// On NUMBER
                            null,
                            false,	// shift to
                            10		// state 10
                        ),
                        new ParserStateColumn
                        (
                            16396,	// On PERIOD
                            null,
                            false,	// shift to
                            12		// state 12
                        ),
                    },

                    // GOTO non-terminals used to select next state
                    // after a REDUCE operation has taken place

                    NonterminalColumns = new ParserStateColumn[]
                    {
                        new ParserStateColumn
                        (
                            32770,	// On addExpression
                            null,
                            false,	// goto
                            18		// state 18
                        ),
                        new ParserStateColumn
                        (
                            32774,	// On mulExpression
                            null,
                            false,	// goto
                            4		// state 4
                        ),
                        new ParserStateColumn
                        (
                            32773,	// On powExpression
                            null,
                            false,	// goto
                            5		// state 5
                        ),
                        new ParserStateColumn
                        (
                            32771,	// On leafExpression
                            null,
                            false,	// goto
                            6		// state 6
                        ),
                        new ParserStateColumn
                        (
                            32772,	// On number
                            null,
                            false,	// goto
                            7		// state 7
                        ),
                        new ParserStateColumn
                        (
                            32776,	// On mantissa
                            null,
                            false,	// goto
                            11		// state 11
                        ),
                    },
                },

                new ParserState
                {
                    StateString =
                        "State S9 CORE ITEMS:\r\n" +
                        "R4: leafExpression: MINUS ^ leafExpression\r\n" +
                        "CLOSURE ITEMS:\r\n" +
                        "R2: leafExpression: ^ number\r\n" +
                        "R3: leafExpression: ^ LPAREN addExpression RPAREN\r\n" +
                        "R4: leafExpression: ^ MINUS leafExpression\r\n" +
                        "R13: number: ^ NUMBER exponent\r\n" +
                        "R14: number: ^ NUMBER mantissa exponent\r\n" +
                        "R15: number: ^ mantissa exponent\r\n" +
                        "R16: mantissa: ^ PERIOD NUMBER\r\n" +
                        "SHIFTS, REDUCTIONS AND GOTOS\r\n" +
                        "  LPAREN: SHIFT to state S8\r\n" +
                        "  MINUS: SHIFT to state S9\r\n" +
                        "  NUMBER: SHIFT to state S10\r\n" +
                        "  PERIOD: SHIFT to state S12\r\n" +
                        "  leafExpression: GOTO state S19\r\n" +
                        "  number: GOTO state S7\r\n" +
                        "  mantissa: GOTO state S11\r\n",

                    TerminalColumns = new ParserStateColumn[]
                    {
                        new ParserStateColumn
                        (
                            16388,	// On LPAREN
                            null,
                            false,	// shift to
                            8		// state 8
                        ),
                        new ParserStateColumn
                        (
                            16391,	// On MINUS
                            null,
                            false,	// shift to
                            9		// state 9
                        ),
                        new ParserStateColumn
                        (
                            16395,	// On NUMBER
                            null,
                            false,	// shift to
                            10		// state 10
                        ),
                        new ParserStateColumn
                        (
                            16396,	// On PERIOD
                            null,
                            false,	// shift to
                            12		// state 12
                        ),
                    },

                    // GOTO non-terminals used to select next state
                    // after a REDUCE operation has taken place

                    NonterminalColumns = new ParserStateColumn[]
                    {
                        new ParserStateColumn
                        (
                            32771,	// On leafExpression
                            null,
                            false,	// goto
                            19		// state 19
                        ),
                        new ParserStateColumn
                        (
                            32772,	// On number
                            null,
                            false,	// goto
                            7		// state 7
                        ),
                        new ParserStateColumn
                        (
                            32776,	// On mantissa
                            null,
                            false,	// goto
                            11		// state 11
                        ),
                    },
                },

                new ParserState
                {
                    StateString =
                        "State S10 CORE ITEMS:\r\n" +
                        "R13: number: NUMBER ^ exponent\r\n" +
                        "R14: number: NUMBER ^ mantissa exponent\r\n" +
                        "CLOSURE ITEMS:\r\n" +
                        "R17: exponent: ^ EXPONENT NUMBER\r\n" +
                        "R18: exponent: ^ EXPONENT MINUS NUMBER\r\n" +
                        "R19: exponent: ^\r\n" +
                        "{\r\n" +
                        "    EOF,\r\n" +
                        "    PLUS,\r\n" +
                        "    MINUS,\r\n" +
                        "    TIMES,\r\n" +
                        "    DIVIDE,\r\n" +
                        "    POWER,\r\n" +
                        "    RPAREN\r\n" +
                        "}\r\n" +
                        "R16: mantissa: ^ PERIOD NUMBER\r\n" +
                        "SHIFTS, REDUCTIONS AND GOTOS\r\n" +
                        "  EXPONENT: SHIFT to state S22\r\n" +
                        "  PERIOD: SHIFT to state S12\r\n" +
                        "  EOF: REDUCE by rule R19: exponent:;\r\n" +
                        "  PLUS: REDUCE by rule R19: exponent:;\r\n" +
                        "  MINUS: REDUCE by rule R19: exponent:;\r\n" +
                        "  TIMES: REDUCE by rule R19: exponent:;\r\n" +
                        "  DIVIDE: REDUCE by rule R19: exponent:;\r\n" +
                        "  POWER: REDUCE by rule R19: exponent:;\r\n" +
                        "  RPAREN: REDUCE by rule R19: exponent:;\r\n" +
                        "  exponent: GOTO state S20\r\n" +
                        "  mantissa: GOTO state S21\r\n",

                    TerminalColumns = new ParserStateColumn[]
                    {
                        new ParserStateColumn
                        (
                            16397,	// On EXPONENT
                            null,
                            false,	// shift to
                            22		// state 22
                        ),
                        new ParserStateColumn
                        (
                            16396,	// On PERIOD
                            null,
                            false,	// shift to
                            12		// state 12
                        ),
                        new ParserStateColumn
                        (
                            16385,	// On EOF
                            null,
                            true,	// reduce by
                            19		// production 19
                        ),
                        new ParserStateColumn
                        (
                            16390,	// On PLUS
                            null,
                            true,	// reduce by
                            19		// production 19
                        ),
                        new ParserStateColumn
                        (
                            16391,	// On MINUS
                            null,
                            true,	// reduce by
                            19		// production 19
                        ),
                        new ParserStateColumn
                        (
                            16392,	// On TIMES
                            null,
                            true,	// reduce by
                            19		// production 19
                        ),
                        new ParserStateColumn
                        (
                            16393,	// On DIVIDE
                            null,
                            true,	// reduce by
                            19		// production 19
                        ),
                        new ParserStateColumn
                        (
                            16394,	// On POWER
                            null,
                            true,	// reduce by
                            19		// production 19
                        ),
                        new ParserStateColumn
                        (
                            16389,	// On RPAREN
                            null,
                            true,	// reduce by
                            19		// production 19
                        ),
                    },

                    // GOTO non-terminals used to select next state
                    // after a REDUCE operation has taken place

                    NonterminalColumns = new ParserStateColumn[]
                    {
                        new ParserStateColumn
                        (
                            32775,	// On exponent
                            null,
                            false,	// goto
                            20		// state 20
                        ),
                        new ParserStateColumn
                        (
                            32776,	// On mantissa
                            null,
                            false,	// goto
                            21		// state 21
                        ),
                    },
                },

                new ParserState
                {
                    StateString =
                        "State S11 CORE ITEMS:\r\n" +
                        "R15: number: mantissa ^ exponent\r\n" +
                        "CLOSURE ITEMS:\r\n" +
                        "R17: exponent: ^ EXPONENT NUMBER\r\n" +
                        "R18: exponent: ^ EXPONENT MINUS NUMBER\r\n" +
                        "R19: exponent: ^\r\n" +
                        "{\r\n" +
                        "    EOF,\r\n" +
                        "    PLUS,\r\n" +
                        "    MINUS,\r\n" +
                        "    TIMES,\r\n" +
                        "    DIVIDE,\r\n" +
                        "    POWER,\r\n" +
                        "    RPAREN\r\n" +
                        "}\r\n" +
                        "SHIFTS, REDUCTIONS AND GOTOS\r\n" +
                        "  EXPONENT: SHIFT to state S22\r\n" +
                        "  EOF: REDUCE by rule R19: exponent:;\r\n" +
                        "  PLUS: REDUCE by rule R19: exponent:;\r\n" +
                        "  MINUS: REDUCE by rule R19: exponent:;\r\n" +
                        "  TIMES: REDUCE by rule R19: exponent:;\r\n" +
                        "  DIVIDE: REDUCE by rule R19: exponent:;\r\n" +
                        "  POWER: REDUCE by rule R19: exponent:;\r\n" +
                        "  RPAREN: REDUCE by rule R19: exponent:;\r\n" +
                        "  exponent: GOTO state S23\r\n",

                    TerminalColumns = new ParserStateColumn[]
                    {
                        new ParserStateColumn
                        (
                            16397,	// On EXPONENT
                            null,
                            false,	// shift to
                            22		// state 22
                        ),
                        new ParserStateColumn
                        (
                            16385,	// On EOF
                            null,
                            true,	// reduce by
                            19		// production 19
                        ),
                        new ParserStateColumn
                        (
                            16390,	// On PLUS
                            null,
                            true,	// reduce by
                            19		// production 19
                        ),
                        new ParserStateColumn
                        (
                            16391,	// On MINUS
                            null,
                            true,	// reduce by
                            19		// production 19
                        ),
                        new ParserStateColumn
                        (
                            16392,	// On TIMES
                            null,
                            true,	// reduce by
                            19		// production 19
                        ),
                        new ParserStateColumn
                        (
                            16393,	// On DIVIDE
                            null,
                            true,	// reduce by
                            19		// production 19
                        ),
                        new ParserStateColumn
                        (
                            16394,	// On POWER
                            null,
                            true,	// reduce by
                            19		// production 19
                        ),
                        new ParserStateColumn
                        (
                            16389,	// On RPAREN
                            null,
                            true,	// reduce by
                            19		// production 19
                        ),
                    },

                    // GOTO non-terminals used to select next state
                    // after a REDUCE operation has taken place

                    NonterminalColumns = new ParserStateColumn[]
                    {
                        new ParserStateColumn
                        (
                            32775,	// On exponent
                            null,
                            false,	// goto
                            23		// state 23
                        ),
                    },
                },

                new ParserState
                {
                    StateString =
                        "State S12 CORE ITEMS:\r\n" +
                        "R16: mantissa: PERIOD ^ NUMBER\r\n" +
                        "SHIFTS, REDUCTIONS AND GOTOS\r\n" +
                        "  NUMBER: SHIFT to state S24\r\n",

                    TerminalColumns = new ParserStateColumn[]
                    {
                        new ParserStateColumn
                        (
                            16395,	// On NUMBER
                            null,
                            false,	// shift to
                            24		// state 24
                        ),
                    },

                    NonterminalColumns = new ParserStateColumn[0],
                },

                new ParserState
                {
                    StateString =
                        "State S13 CORE ITEMS:\r\n" +
                        "R10: addExpression: addExpression PLUS ^ mulExpression\r\n" +
                        "CLOSURE ITEMS:\r\n" +
                        "R7: mulExpression: ^ mulExpression TIMES powExpression\r\n" +
                        "R8: mulExpression: ^ mulExpression DIVIDE powExpression\r\n" +
                        "R9: mulExpression: ^ powExpression\r\n" +
                        "R5: powExpression: ^ powExpression POWER leafExpression\r\n" +
                        "R6: powExpression: ^ leafExpression\r\n" +
                        "R2: leafExpression: ^ number\r\n" +
                        "R3: leafExpression: ^ LPAREN addExpression RPAREN\r\n" +
                        "R4: leafExpression: ^ MINUS leafExpression\r\n" +
                        "R13: number: ^ NUMBER exponent\r\n" +
                        "R14: number: ^ NUMBER mantissa exponent\r\n" +
                        "R15: number: ^ mantissa exponent\r\n" +
                        "R16: mantissa: ^ PERIOD NUMBER\r\n" +
                        "SHIFTS, REDUCTIONS AND GOTOS\r\n" +
                        "  LPAREN: SHIFT to state S8\r\n" +
                        "  MINUS: SHIFT to state S9\r\n" +
                        "  NUMBER: SHIFT to state S10\r\n" +
                        "  PERIOD: SHIFT to state S12\r\n" +
                        "  mulExpression: GOTO state S25\r\n" +
                        "  powExpression: GOTO state S5\r\n" +
                        "  leafExpression: GOTO state S6\r\n" +
                        "  number: GOTO state S7\r\n" +
                        "  mantissa: GOTO state S11\r\n",

                    TerminalColumns = new ParserStateColumn[]
                    {
                        new ParserStateColumn
                        (
                            16388,	// On LPAREN
                            null,
                            false,	// shift to
                            8		// state 8
                        ),
                        new ParserStateColumn
                        (
                            16391,	// On MINUS
                            null,
                            false,	// shift to
                            9		// state 9
                        ),
                        new ParserStateColumn
                        (
                            16395,	// On NUMBER
                            null,
                            false,	// shift to
                            10		// state 10
                        ),
                        new ParserStateColumn
                        (
                            16396,	// On PERIOD
                            null,
                            false,	// shift to
                            12		// state 12
                        ),
                    },

                    // GOTO non-terminals used to select next state
                    // after a REDUCE operation has taken place

                    NonterminalColumns = new ParserStateColumn[]
                    {
                        new ParserStateColumn
                        (
                            32774,	// On mulExpression
                            null,
                            false,	// goto
                            25		// state 25
                        ),
                        new ParserStateColumn
                        (
                            32773,	// On powExpression
                            null,
                            false,	// goto
                            5		// state 5
                        ),
                        new ParserStateColumn
                        (
                            32771,	// On leafExpression
                            null,
                            false,	// goto
                            6		// state 6
                        ),
                        new ParserStateColumn
                        (
                            32772,	// On number
                            null,
                            false,	// goto
                            7		// state 7
                        ),
                        new ParserStateColumn
                        (
                            32776,	// On mantissa
                            null,
                            false,	// goto
                            11		// state 11
                        ),
                    },
                },

                new ParserState
                {
                    StateString =
                        "State S14 CORE ITEMS:\r\n" +
                        "R11: addExpression: addExpression MINUS ^ mulExpression\r\n" +
                        "CLOSURE ITEMS:\r\n" +
                        "R7: mulExpression: ^ mulExpression TIMES powExpression\r\n" +
                        "R8: mulExpression: ^ mulExpression DIVIDE powExpression\r\n" +
                        "R9: mulExpression: ^ powExpression\r\n" +
                        "R5: powExpression: ^ powExpression POWER leafExpression\r\n" +
                        "R6: powExpression: ^ leafExpression\r\n" +
                        "R2: leafExpression: ^ number\r\n" +
                        "R3: leafExpression: ^ LPAREN addExpression RPAREN\r\n" +
                        "R4: leafExpression: ^ MINUS leafExpression\r\n" +
                        "R13: number: ^ NUMBER exponent\r\n" +
                        "R14: number: ^ NUMBER mantissa exponent\r\n" +
                        "R15: number: ^ mantissa exponent\r\n" +
                        "R16: mantissa: ^ PERIOD NUMBER\r\n" +
                        "SHIFTS, REDUCTIONS AND GOTOS\r\n" +
                        "  LPAREN: SHIFT to state S8\r\n" +
                        "  MINUS: SHIFT to state S9\r\n" +
                        "  NUMBER: SHIFT to state S10\r\n" +
                        "  PERIOD: SHIFT to state S12\r\n" +
                        "  mulExpression: GOTO state S26\r\n" +
                        "  powExpression: GOTO state S5\r\n" +
                        "  leafExpression: GOTO state S6\r\n" +
                        "  number: GOTO state S7\r\n" +
                        "  mantissa: GOTO state S11\r\n",

                    TerminalColumns = new ParserStateColumn[]
                    {
                        new ParserStateColumn
                        (
                            16388,	// On LPAREN
                            null,
                            false,	// shift to
                            8		// state 8
                        ),
                        new ParserStateColumn
                        (
                            16391,	// On MINUS
                            null,
                            false,	// shift to
                            9		// state 9
                        ),
                        new ParserStateColumn
                        (
                            16395,	// On NUMBER
                            null,
                            false,	// shift to
                            10		// state 10
                        ),
                        new ParserStateColumn
                        (
                            16396,	// On PERIOD
                            null,
                            false,	// shift to
                            12		// state 12
                        ),
                    },

                    // GOTO non-terminals used to select next state
                    // after a REDUCE operation has taken place

                    NonterminalColumns = new ParserStateColumn[]
                    {
                        new ParserStateColumn
                        (
                            32774,	// On mulExpression
                            null,
                            false,	// goto
                            26		// state 26
                        ),
                        new ParserStateColumn
                        (
                            32773,	// On powExpression
                            null,
                            false,	// goto
                            5		// state 5
                        ),
                        new ParserStateColumn
                        (
                            32771,	// On leafExpression
                            null,
                            false,	// goto
                            6		// state 6
                        ),
                        new ParserStateColumn
                        (
                            32772,	// On number
                            null,
                            false,	// goto
                            7		// state 7
                        ),
                        new ParserStateColumn
                        (
                            32776,	// On mantissa
                            null,
                            false,	// goto
                            11		// state 11
                        ),
                    },
                },

                new ParserState
                {
                    StateString =
                        "State S15 CORE ITEMS:\r\n" +
                        "R7: mulExpression: mulExpression TIMES ^ powExpression\r\n" +
                        "CLOSURE ITEMS:\r\n" +
                        "R5: powExpression: ^ powExpression POWER leafExpression\r\n" +
                        "R6: powExpression: ^ leafExpression\r\n" +
                        "R2: leafExpression: ^ number\r\n" +
                        "R3: leafExpression: ^ LPAREN addExpression RPAREN\r\n" +
                        "R4: leafExpression: ^ MINUS leafExpression\r\n" +
                        "R13: number: ^ NUMBER exponent\r\n" +
                        "R14: number: ^ NUMBER mantissa exponent\r\n" +
                        "R15: number: ^ mantissa exponent\r\n" +
                        "R16: mantissa: ^ PERIOD NUMBER\r\n" +
                        "SHIFTS, REDUCTIONS AND GOTOS\r\n" +
                        "  LPAREN: SHIFT to state S8\r\n" +
                        "  MINUS: SHIFT to state S9\r\n" +
                        "  NUMBER: SHIFT to state S10\r\n" +
                        "  PERIOD: SHIFT to state S12\r\n" +
                        "  powExpression: GOTO state S27\r\n" +
                        "  leafExpression: GOTO state S6\r\n" +
                        "  number: GOTO state S7\r\n" +
                        "  mantissa: GOTO state S11\r\n",

                    TerminalColumns = new ParserStateColumn[]
                    {
                        new ParserStateColumn
                        (
                            16388,	// On LPAREN
                            null,
                            false,	// shift to
                            8		// state 8
                        ),
                        new ParserStateColumn
                        (
                            16391,	// On MINUS
                            null,
                            false,	// shift to
                            9		// state 9
                        ),
                        new ParserStateColumn
                        (
                            16395,	// On NUMBER
                            null,
                            false,	// shift to
                            10		// state 10
                        ),
                        new ParserStateColumn
                        (
                            16396,	// On PERIOD
                            null,
                            false,	// shift to
                            12		// state 12
                        ),
                    },

                    // GOTO non-terminals used to select next state
                    // after a REDUCE operation has taken place

                    NonterminalColumns = new ParserStateColumn[]
                    {
                        new ParserStateColumn
                        (
                            32773,	// On powExpression
                            null,
                            false,	// goto
                            27		// state 27
                        ),
                        new ParserStateColumn
                        (
                            32771,	// On leafExpression
                            null,
                            false,	// goto
                            6		// state 6
                        ),
                        new ParserStateColumn
                        (
                            32772,	// On number
                            null,
                            false,	// goto
                            7		// state 7
                        ),
                        new ParserStateColumn
                        (
                            32776,	// On mantissa
                            null,
                            false,	// goto
                            11		// state 11
                        ),
                    },
                },

                new ParserState
                {
                    StateString =
                        "State S16 CORE ITEMS:\r\n" +
                        "R8: mulExpression: mulExpression DIVIDE ^ powExpression\r\n" +
                        "CLOSURE ITEMS:\r\n" +
                        "R5: powExpression: ^ powExpression POWER leafExpression\r\n" +
                        "R6: powExpression: ^ leafExpression\r\n" +
                        "R2: leafExpression: ^ number\r\n" +
                        "R3: leafExpression: ^ LPAREN addExpression RPAREN\r\n" +
                        "R4: leafExpression: ^ MINUS leafExpression\r\n" +
                        "R13: number: ^ NUMBER exponent\r\n" +
                        "R14: number: ^ NUMBER mantissa exponent\r\n" +
                        "R15: number: ^ mantissa exponent\r\n" +
                        "R16: mantissa: ^ PERIOD NUMBER\r\n" +
                        "SHIFTS, REDUCTIONS AND GOTOS\r\n" +
                        "  LPAREN: SHIFT to state S8\r\n" +
                        "  MINUS: SHIFT to state S9\r\n" +
                        "  NUMBER: SHIFT to state S10\r\n" +
                        "  PERIOD: SHIFT to state S12\r\n" +
                        "  powExpression: GOTO state S28\r\n" +
                        "  leafExpression: GOTO state S6\r\n" +
                        "  number: GOTO state S7\r\n" +
                        "  mantissa: GOTO state S11\r\n",

                    TerminalColumns = new ParserStateColumn[]
                    {
                        new ParserStateColumn
                        (
                            16388,	// On LPAREN
                            null,
                            false,	// shift to
                            8		// state 8
                        ),
                        new ParserStateColumn
                        (
                            16391,	// On MINUS
                            null,
                            false,	// shift to
                            9		// state 9
                        ),
                        new ParserStateColumn
                        (
                            16395,	// On NUMBER
                            null,
                            false,	// shift to
                            10		// state 10
                        ),
                        new ParserStateColumn
                        (
                            16396,	// On PERIOD
                            null,
                            false,	// shift to
                            12		// state 12
                        ),
                    },

                    // GOTO non-terminals used to select next state
                    // after a REDUCE operation has taken place

                    NonterminalColumns = new ParserStateColumn[]
                    {
                        new ParserStateColumn
                        (
                            32773,	// On powExpression
                            null,
                            false,	// goto
                            28		// state 28
                        ),
                        new ParserStateColumn
                        (
                            32771,	// On leafExpression
                            null,
                            false,	// goto
                            6		// state 6
                        ),
                        new ParserStateColumn
                        (
                            32772,	// On number
                            null,
                            false,	// goto
                            7		// state 7
                        ),
                        new ParserStateColumn
                        (
                            32776,	// On mantissa
                            null,
                            false,	// goto
                            11		// state 11
                        ),
                    },
                },

                new ParserState
                {
                    StateString =
                        "State S17 CORE ITEMS:\r\n" +
                        "R5: powExpression: powExpression POWER ^ leafExpression\r\n" +
                        "CLOSURE ITEMS:\r\n" +
                        "R2: leafExpression: ^ number\r\n" +
                        "R3: leafExpression: ^ LPAREN addExpression RPAREN\r\n" +
                        "R4: leafExpression: ^ MINUS leafExpression\r\n" +
                        "R13: number: ^ NUMBER exponent\r\n" +
                        "R14: number: ^ NUMBER mantissa exponent\r\n" +
                        "R15: number: ^ mantissa exponent\r\n" +
                        "R16: mantissa: ^ PERIOD NUMBER\r\n" +
                        "SHIFTS, REDUCTIONS AND GOTOS\r\n" +
                        "  LPAREN: SHIFT to state S8\r\n" +
                        "  MINUS: SHIFT to state S9\r\n" +
                        "  NUMBER: SHIFT to state S10\r\n" +
                        "  PERIOD: SHIFT to state S12\r\n" +
                        "  leafExpression: GOTO state S29\r\n" +
                        "  number: GOTO state S7\r\n" +
                        "  mantissa: GOTO state S11\r\n",

                    TerminalColumns = new ParserStateColumn[]
                    {
                        new ParserStateColumn
                        (
                            16388,	// On LPAREN
                            null,
                            false,	// shift to
                            8		// state 8
                        ),
                        new ParserStateColumn
                        (
                            16391,	// On MINUS
                            null,
                            false,	// shift to
                            9		// state 9
                        ),
                        new ParserStateColumn
                        (
                            16395,	// On NUMBER
                            null,
                            false,	// shift to
                            10		// state 10
                        ),
                        new ParserStateColumn
                        (
                            16396,	// On PERIOD
                            null,
                            false,	// shift to
                            12		// state 12
                        ),
                    },

                    // GOTO non-terminals used to select next state
                    // after a REDUCE operation has taken place

                    NonterminalColumns = new ParserStateColumn[]
                    {
                        new ParserStateColumn
                        (
                            32771,	// On leafExpression
                            null,
                            false,	// goto
                            29		// state 29
                        ),
                        new ParserStateColumn
                        (
                            32772,	// On number
                            null,
                            false,	// goto
                            7		// state 7
                        ),
                        new ParserStateColumn
                        (
                            32776,	// On mantissa
                            null,
                            false,	// goto
                            11		// state 11
                        ),
                    },
                },

                new ParserState
                {
                    StateString =
                        "State S18 CORE ITEMS:\r\n" +
                        "R3: leafExpression: LPAREN addExpression ^ RPAREN\r\n" +
                        "R10: addExpression: addExpression ^ PLUS mulExpression\r\n" +
                        "R11: addExpression: addExpression ^ MINUS mulExpression\r\n" +
                        "SHIFTS, REDUCTIONS AND GOTOS\r\n" +
                        "  RPAREN: SHIFT to state S30\r\n" +
                        "  PLUS: SHIFT to state S13\r\n" +
                        "  MINUS: SHIFT to state S14\r\n",

                    TerminalColumns = new ParserStateColumn[]
                    {
                        new ParserStateColumn
                        (
                            16389,	// On RPAREN
                            null,
                            false,	// shift to
                            30		// state 30
                        ),
                        new ParserStateColumn
                        (
                            16390,	// On PLUS
                            null,
                            false,	// shift to
                            13		// state 13
                        ),
                        new ParserStateColumn
                        (
                            16391,	// On MINUS
                            null,
                            false,	// shift to
                            14		// state 14
                        ),
                    },

                    NonterminalColumns = new ParserStateColumn[0],
                },

                new ParserState
                {
                    StateString =
                        "State S19 CORE ITEMS:\r\n" +
                        "R4: leafExpression: MINUS leafExpression ^\r\n" +
                        "{\r\n" +
                        "    EOF,\r\n" +
                        "    PLUS,\r\n" +
                        "    MINUS,\r\n" +
                        "    TIMES,\r\n" +
                        "    DIVIDE,\r\n" +
                        "    POWER,\r\n" +
                        "    RPAREN\r\n" +
                        "}\r\n" +
                        "SHIFTS, REDUCTIONS AND GOTOS\r\n" +
                        "  EOF: REDUCE by rule R4: leafExpression: MINUS leafExpression;\r\n" +
                        "  PLUS: REDUCE by rule R4: leafExpression: MINUS leafExpression;\r\n" +
                        "  MINUS: REDUCE by rule R4: leafExpression: MINUS leafExpression;\r\n" +
                        "  TIMES: REDUCE by rule R4: leafExpression: MINUS leafExpression;\r\n" +
                        "  DIVIDE: REDUCE by rule R4: leafExpression: MINUS leafExpression;\r\n" +
                        "  POWER: REDUCE by rule R4: leafExpression: MINUS leafExpression;\r\n" +
                        "  RPAREN: REDUCE by rule R4: leafExpression: MINUS leafExpression;\r\n",

                    TerminalColumns = new ParserStateColumn[]
                    {
                        new ParserStateColumn
                        (
                            16385,	// On EOF
                            null,
                            true,	// reduce by
                            4		// production 4
                        ),
                        new ParserStateColumn
                        (
                            16390,	// On PLUS
                            null,
                            true,	// reduce by
                            4		// production 4
                        ),
                        new ParserStateColumn
                        (
                            16391,	// On MINUS
                            null,
                            true,	// reduce by
                            4		// production 4
                        ),
                        new ParserStateColumn
                        (
                            16392,	// On TIMES
                            null,
                            true,	// reduce by
                            4		// production 4
                        ),
                        new ParserStateColumn
                        (
                            16393,	// On DIVIDE
                            null,
                            true,	// reduce by
                            4		// production 4
                        ),
                        new ParserStateColumn
                        (
                            16394,	// On POWER
                            null,
                            true,	// reduce by
                            4		// production 4
                        ),
                        new ParserStateColumn
                        (
                            16389,	// On RPAREN
                            null,
                            true,	// reduce by
                            4		// production 4
                        ),
                    },

                    NonterminalColumns = new ParserStateColumn[0],
                },

                new ParserState
                {
                    StateString =
                        "State S20 CORE ITEMS:\r\n" +
                        "R13: number: NUMBER exponent ^\r\n" +
                        "{\r\n" +
                        "    EOF,\r\n" +
                        "    PLUS,\r\n" +
                        "    MINUS,\r\n" +
                        "    TIMES,\r\n" +
                        "    DIVIDE,\r\n" +
                        "    POWER,\r\n" +
                        "    RPAREN\r\n" +
                        "}\r\n" +
                        "SHIFTS, REDUCTIONS AND GOTOS\r\n" +
                        "  EOF: REDUCE by rule R13: number: NUMBER exponent;\r\n" +
                        "  PLUS: REDUCE by rule R13: number: NUMBER exponent;\r\n" +
                        "  MINUS: REDUCE by rule R13: number: NUMBER exponent;\r\n" +
                        "  TIMES: REDUCE by rule R13: number: NUMBER exponent;\r\n" +
                        "  DIVIDE: REDUCE by rule R13: number: NUMBER exponent;\r\n" +
                        "  POWER: REDUCE by rule R13: number: NUMBER exponent;\r\n" +
                        "  RPAREN: REDUCE by rule R13: number: NUMBER exponent;\r\n",

                    TerminalColumns = new ParserStateColumn[]
                    {
                        new ParserStateColumn
                        (
                            16385,	// On EOF
                            null,
                            true,	// reduce by
                            13		// production 13
                        ),
                        new ParserStateColumn
                        (
                            16390,	// On PLUS
                            null,
                            true,	// reduce by
                            13		// production 13
                        ),
                        new ParserStateColumn
                        (
                            16391,	// On MINUS
                            null,
                            true,	// reduce by
                            13		// production 13
                        ),
                        new ParserStateColumn
                        (
                            16392,	// On TIMES
                            null,
                            true,	// reduce by
                            13		// production 13
                        ),
                        new ParserStateColumn
                        (
                            16393,	// On DIVIDE
                            null,
                            true,	// reduce by
                            13		// production 13
                        ),
                        new ParserStateColumn
                        (
                            16394,	// On POWER
                            null,
                            true,	// reduce by
                            13		// production 13
                        ),
                        new ParserStateColumn
                        (
                            16389,	// On RPAREN
                            null,
                            true,	// reduce by
                            13		// production 13
                        ),
                    },

                    NonterminalColumns = new ParserStateColumn[0],
                },

                new ParserState
                {
                    StateString =
                        "State S21 CORE ITEMS:\r\n" +
                        "R14: number: NUMBER mantissa ^ exponent\r\n" +
                        "CLOSURE ITEMS:\r\n" +
                        "R17: exponent: ^ EXPONENT NUMBER\r\n" +
                        "R18: exponent: ^ EXPONENT MINUS NUMBER\r\n" +
                        "R19: exponent: ^\r\n" +
                        "{\r\n" +
                        "    EOF,\r\n" +
                        "    PLUS,\r\n" +
                        "    MINUS,\r\n" +
                        "    TIMES,\r\n" +
                        "    DIVIDE,\r\n" +
                        "    POWER,\r\n" +
                        "    RPAREN\r\n" +
                        "}\r\n" +
                        "SHIFTS, REDUCTIONS AND GOTOS\r\n" +
                        "  EXPONENT: SHIFT to state S22\r\n" +
                        "  EOF: REDUCE by rule R19: exponent:;\r\n" +
                        "  PLUS: REDUCE by rule R19: exponent:;\r\n" +
                        "  MINUS: REDUCE by rule R19: exponent:;\r\n" +
                        "  TIMES: REDUCE by rule R19: exponent:;\r\n" +
                        "  DIVIDE: REDUCE by rule R19: exponent:;\r\n" +
                        "  POWER: REDUCE by rule R19: exponent:;\r\n" +
                        "  RPAREN: REDUCE by rule R19: exponent:;\r\n" +
                        "  exponent: GOTO state S31\r\n",

                    TerminalColumns = new ParserStateColumn[]
                    {
                        new ParserStateColumn
                        (
                            16397,	// On EXPONENT
                            null,
                            false,	// shift to
                            22		// state 22
                        ),
                        new ParserStateColumn
                        (
                            16385,	// On EOF
                            null,
                            true,	// reduce by
                            19		// production 19
                        ),
                        new ParserStateColumn
                        (
                            16390,	// On PLUS
                            null,
                            true,	// reduce by
                            19		// production 19
                        ),
                        new ParserStateColumn
                        (
                            16391,	// On MINUS
                            null,
                            true,	// reduce by
                            19		// production 19
                        ),
                        new ParserStateColumn
                        (
                            16392,	// On TIMES
                            null,
                            true,	// reduce by
                            19		// production 19
                        ),
                        new ParserStateColumn
                        (
                            16393,	// On DIVIDE
                            null,
                            true,	// reduce by
                            19		// production 19
                        ),
                        new ParserStateColumn
                        (
                            16394,	// On POWER
                            null,
                            true,	// reduce by
                            19		// production 19
                        ),
                        new ParserStateColumn
                        (
                            16389,	// On RPAREN
                            null,
                            true,	// reduce by
                            19		// production 19
                        ),
                    },

                    // GOTO non-terminals used to select next state
                    // after a REDUCE operation has taken place

                    NonterminalColumns = new ParserStateColumn[]
                    {
                        new ParserStateColumn
                        (
                            32775,	// On exponent
                            null,
                            false,	// goto
                            31		// state 31
                        ),
                    },
                },

                new ParserState
                {
                    StateString =
                        "State S22 CORE ITEMS:\r\n" +
                        "R17: exponent: EXPONENT ^ NUMBER\r\n" +
                        "R18: exponent: EXPONENT ^ MINUS NUMBER\r\n" +
                        "SHIFTS, REDUCTIONS AND GOTOS\r\n" +
                        "  NUMBER: SHIFT to state S32\r\n" +
                        "  MINUS: SHIFT to state S33\r\n",

                    TerminalColumns = new ParserStateColumn[]
                    {
                        new ParserStateColumn
                        (
                            16395,	// On NUMBER
                            null,
                            false,	// shift to
                            32		// state 32
                        ),
                        new ParserStateColumn
                        (
                            16391,	// On MINUS
                            null,
                            false,	// shift to
                            33		// state 33
                        ),
                    },

                    NonterminalColumns = new ParserStateColumn[0],
                },

                new ParserState
                {
                    StateString =
                        "State S23 CORE ITEMS:\r\n" +
                        "R15: number: mantissa exponent ^\r\n" +
                        "{\r\n" +
                        "    EOF,\r\n" +
                        "    PLUS,\r\n" +
                        "    MINUS,\r\n" +
                        "    TIMES,\r\n" +
                        "    DIVIDE,\r\n" +
                        "    POWER,\r\n" +
                        "    RPAREN\r\n" +
                        "}\r\n" +
                        "SHIFTS, REDUCTIONS AND GOTOS\r\n" +
                        "  EOF: REDUCE by rule R15: number: mantissa exponent;\r\n" +
                        "  PLUS: REDUCE by rule R15: number: mantissa exponent;\r\n" +
                        "  MINUS: REDUCE by rule R15: number: mantissa exponent;\r\n" +
                        "  TIMES: REDUCE by rule R15: number: mantissa exponent;\r\n" +
                        "  DIVIDE: REDUCE by rule R15: number: mantissa exponent;\r\n" +
                        "  POWER: REDUCE by rule R15: number: mantissa exponent;\r\n" +
                        "  RPAREN: REDUCE by rule R15: number: mantissa exponent;\r\n",

                    TerminalColumns = new ParserStateColumn[]
                    {
                        new ParserStateColumn
                        (
                            16385,	// On EOF
                            null,
                            true,	// reduce by
                            15		// production 15
                        ),
                        new ParserStateColumn
                        (
                            16390,	// On PLUS
                            null,
                            true,	// reduce by
                            15		// production 15
                        ),
                        new ParserStateColumn
                        (
                            16391,	// On MINUS
                            null,
                            true,	// reduce by
                            15		// production 15
                        ),
                        new ParserStateColumn
                        (
                            16392,	// On TIMES
                            null,
                            true,	// reduce by
                            15		// production 15
                        ),
                        new ParserStateColumn
                        (
                            16393,	// On DIVIDE
                            null,
                            true,	// reduce by
                            15		// production 15
                        ),
                        new ParserStateColumn
                        (
                            16394,	// On POWER
                            null,
                            true,	// reduce by
                            15		// production 15
                        ),
                        new ParserStateColumn
                        (
                            16389,	// On RPAREN
                            null,
                            true,	// reduce by
                            15		// production 15
                        ),
                    },

                    NonterminalColumns = new ParserStateColumn[0],
                },

                new ParserState
                {
                    StateString =
                        "State S24 CORE ITEMS:\r\n" +
                        "R16: mantissa: PERIOD NUMBER ^\r\n" +
                        "{\r\n" +
                        "    EXPONENT,\r\n" +
                        "    EOF,\r\n" +
                        "    PLUS,\r\n" +
                        "    MINUS,\r\n" +
                        "    TIMES,\r\n" +
                        "    DIVIDE,\r\n" +
                        "    POWER,\r\n" +
                        "    RPAREN\r\n" +
                        "}\r\n" +
                        "SHIFTS, REDUCTIONS AND GOTOS\r\n" +
                        "  EXPONENT: REDUCE by rule R16: mantissa: PERIOD NUMBER;\r\n" +
                        "  EOF: REDUCE by rule R16: mantissa: PERIOD NUMBER;\r\n" +
                        "  PLUS: REDUCE by rule R16: mantissa: PERIOD NUMBER;\r\n" +
                        "  MINUS: REDUCE by rule R16: mantissa: PERIOD NUMBER;\r\n" +
                        "  TIMES: REDUCE by rule R16: mantissa: PERIOD NUMBER;\r\n" +
                        "  DIVIDE: REDUCE by rule R16: mantissa: PERIOD NUMBER;\r\n" +
                        "  POWER: REDUCE by rule R16: mantissa: PERIOD NUMBER;\r\n" +
                        "  RPAREN: REDUCE by rule R16: mantissa: PERIOD NUMBER;\r\n",

                    TerminalColumns = new ParserStateColumn[]
                    {
                        new ParserStateColumn
                        (
                            16397,	// On EXPONENT
                            null,
                            true,	// reduce by
                            16		// production 16
                        ),
                        new ParserStateColumn
                        (
                            16385,	// On EOF
                            null,
                            true,	// reduce by
                            16		// production 16
                        ),
                        new ParserStateColumn
                        (
                            16390,	// On PLUS
                            null,
                            true,	// reduce by
                            16		// production 16
                        ),
                        new ParserStateColumn
                        (
                            16391,	// On MINUS
                            null,
                            true,	// reduce by
                            16		// production 16
                        ),
                        new ParserStateColumn
                        (
                            16392,	// On TIMES
                            null,
                            true,	// reduce by
                            16		// production 16
                        ),
                        new ParserStateColumn
                        (
                            16393,	// On DIVIDE
                            null,
                            true,	// reduce by
                            16		// production 16
                        ),
                        new ParserStateColumn
                        (
                            16394,	// On POWER
                            null,
                            true,	// reduce by
                            16		// production 16
                        ),
                        new ParserStateColumn
                        (
                            16389,	// On RPAREN
                            null,
                            true,	// reduce by
                            16		// production 16
                        ),
                    },

                    NonterminalColumns = new ParserStateColumn[0],
                },

                new ParserState
                {
                    StateString =
                        "State S25 CORE ITEMS:\r\n" +
                        "R10: addExpression: addExpression PLUS mulExpression ^\r\n" +
                        "{\r\n" +
                        "    EOF,\r\n" +
                        "    PLUS,\r\n" +
                        "    MINUS,\r\n" +
                        "    RPAREN\r\n" +
                        "}\r\n" +
                        "R7: mulExpression: mulExpression ^ TIMES powExpression\r\n" +
                        "R8: mulExpression: mulExpression ^ DIVIDE powExpression\r\n" +
                        "SHIFTS, REDUCTIONS AND GOTOS\r\n" +
                        "  TIMES: SHIFT to state S15\r\n" +
                        "  DIVIDE: SHIFT to state S16\r\n" +
                        "  EOF: REDUCE by rule R10: addExpression: addExpression PLUS mulExpression;\r\n" +
                        "  PLUS: REDUCE by rule R10: addExpression: addExpression PLUS mulExpression;\r\n" +
                        "  MINUS: REDUCE by rule R10: addExpression: addExpression PLUS mulExpression;\r\n" +
                        "  RPAREN: REDUCE by rule R10: addExpression: addExpression PLUS mulExpression;\r\n",

                    TerminalColumns = new ParserStateColumn[]
                    {
                        new ParserStateColumn
                        (
                            16392,	// On TIMES
                            null,
                            false,	// shift to
                            15		// state 15
                        ),
                        new ParserStateColumn
                        (
                            16393,	// On DIVIDE
                            null,
                            false,	// shift to
                            16		// state 16
                        ),
                        new ParserStateColumn
                        (
                            16385,	// On EOF
                            null,
                            true,	// reduce by
                            10		// production 10
                        ),
                        new ParserStateColumn
                        (
                            16390,	// On PLUS
                            null,
                            true,	// reduce by
                            10		// production 10
                        ),
                        new ParserStateColumn
                        (
                            16391,	// On MINUS
                            null,
                            true,	// reduce by
                            10		// production 10
                        ),
                        new ParserStateColumn
                        (
                            16389,	// On RPAREN
                            null,
                            true,	// reduce by
                            10		// production 10
                        ),
                    },

                    NonterminalColumns = new ParserStateColumn[0],
                },

                new ParserState
                {
                    StateString =
                        "State S26 CORE ITEMS:\r\n" +
                        "R11: addExpression: addExpression MINUS mulExpression ^\r\n" +
                        "{\r\n" +
                        "    EOF,\r\n" +
                        "    PLUS,\r\n" +
                        "    MINUS,\r\n" +
                        "    RPAREN\r\n" +
                        "}\r\n" +
                        "R7: mulExpression: mulExpression ^ TIMES powExpression\r\n" +
                        "R8: mulExpression: mulExpression ^ DIVIDE powExpression\r\n" +
                        "SHIFTS, REDUCTIONS AND GOTOS\r\n" +
                        "  TIMES: SHIFT to state S15\r\n" +
                        "  DIVIDE: SHIFT to state S16\r\n" +
                        "  EOF: REDUCE by rule R11: addExpression: addExpression MINUS mulExpression;\r\n" +
                        "  PLUS: REDUCE by rule R11: addExpression: addExpression MINUS mulExpression;\r\n" +
                        "  MINUS: REDUCE by rule R11: addExpression: addExpression MINUS mulExpression;\r\n" +
                        "  RPAREN: REDUCE by rule R11: addExpression: addExpression MINUS mulExpression;\r\n",

                    TerminalColumns = new ParserStateColumn[]
                    {
                        new ParserStateColumn
                        (
                            16392,	// On TIMES
                            null,
                            false,	// shift to
                            15		// state 15
                        ),
                        new ParserStateColumn
                        (
                            16393,	// On DIVIDE
                            null,
                            false,	// shift to
                            16		// state 16
                        ),
                        new ParserStateColumn
                        (
                            16385,	// On EOF
                            null,
                            true,	// reduce by
                            11		// production 11
                        ),
                        new ParserStateColumn
                        (
                            16390,	// On PLUS
                            null,
                            true,	// reduce by
                            11		// production 11
                        ),
                        new ParserStateColumn
                        (
                            16391,	// On MINUS
                            null,
                            true,	// reduce by
                            11		// production 11
                        ),
                        new ParserStateColumn
                        (
                            16389,	// On RPAREN
                            null,
                            true,	// reduce by
                            11		// production 11
                        ),
                    },

                    NonterminalColumns = new ParserStateColumn[0],
                },

                new ParserState
                {
                    StateString =
                        "State S27 CORE ITEMS:\r\n" +
                        "R7: mulExpression: mulExpression TIMES powExpression ^\r\n" +
                        "{\r\n" +
                        "    EOF,\r\n" +
                        "    PLUS,\r\n" +
                        "    MINUS,\r\n" +
                        "    TIMES,\r\n" +
                        "    DIVIDE,\r\n" +
                        "    RPAREN\r\n" +
                        "}\r\n" +
                        "R5: powExpression: powExpression ^ POWER leafExpression\r\n" +
                        "SHIFTS, REDUCTIONS AND GOTOS\r\n" +
                        "  POWER: SHIFT to state S17\r\n" +
                        "  EOF: REDUCE by rule R7: mulExpression: mulExpression TIMES powExpression;\r\n" +
                        "  PLUS: REDUCE by rule R7: mulExpression: mulExpression TIMES powExpression;\r\n" +
                        "  MINUS: REDUCE by rule R7: mulExpression: mulExpression TIMES powExpression;\r\n" +
                        "  TIMES: REDUCE by rule R7: mulExpression: mulExpression TIMES powExpression;\r\n" +
                        "  DIVIDE: REDUCE by rule R7: mulExpression: mulExpression TIMES powExpression;\r\n" +
                        "  RPAREN: REDUCE by rule R7: mulExpression: mulExpression TIMES powExpression;\r\n",

                    TerminalColumns = new ParserStateColumn[]
                    {
                        new ParserStateColumn
                        (
                            16394,	// On POWER
                            null,
                            false,	// shift to
                            17		// state 17
                        ),
                        new ParserStateColumn
                        (
                            16385,	// On EOF
                            null,
                            true,	// reduce by
                            7		// production 7
                        ),
                        new ParserStateColumn
                        (
                            16390,	// On PLUS
                            null,
                            true,	// reduce by
                            7		// production 7
                        ),
                        new ParserStateColumn
                        (
                            16391,	// On MINUS
                            null,
                            true,	// reduce by
                            7		// production 7
                        ),
                        new ParserStateColumn
                        (
                            16392,	// On TIMES
                            null,
                            true,	// reduce by
                            7		// production 7
                        ),
                        new ParserStateColumn
                        (
                            16393,	// On DIVIDE
                            null,
                            true,	// reduce by
                            7		// production 7
                        ),
                        new ParserStateColumn
                        (
                            16389,	// On RPAREN
                            null,
                            true,	// reduce by
                            7		// production 7
                        ),
                    },

                    NonterminalColumns = new ParserStateColumn[0],
                },

                new ParserState
                {
                    StateString =
                        "State S28 CORE ITEMS:\r\n" +
                        "R8: mulExpression: mulExpression DIVIDE powExpression ^\r\n" +
                        "{\r\n" +
                        "    EOF,\r\n" +
                        "    PLUS,\r\n" +
                        "    MINUS,\r\n" +
                        "    TIMES,\r\n" +
                        "    DIVIDE,\r\n" +
                        "    RPAREN\r\n" +
                        "}\r\n" +
                        "R5: powExpression: powExpression ^ POWER leafExpression\r\n" +
                        "SHIFTS, REDUCTIONS AND GOTOS\r\n" +
                        "  POWER: SHIFT to state S17\r\n" +
                        "  EOF: REDUCE by rule R8: mulExpression: mulExpression DIVIDE powExpression;\r\n" +
                        "  PLUS: REDUCE by rule R8: mulExpression: mulExpression DIVIDE powExpression;\r\n" +
                        "  MINUS: REDUCE by rule R8: mulExpression: mulExpression DIVIDE powExpression;\r\n" +
                        "  TIMES: REDUCE by rule R8: mulExpression: mulExpression DIVIDE powExpression;\r\n" +
                        "  DIVIDE: REDUCE by rule R8: mulExpression: mulExpression DIVIDE powExpression;\r\n" +
                        "  RPAREN: REDUCE by rule R8: mulExpression: mulExpression DIVIDE powExpression;\r\n",

                    TerminalColumns = new ParserStateColumn[]
                    {
                        new ParserStateColumn
                        (
                            16394,	// On POWER
                            null,
                            false,	// shift to
                            17		// state 17
                        ),
                        new ParserStateColumn
                        (
                            16385,	// On EOF
                            null,
                            true,	// reduce by
                            8		// production 8
                        ),
                        new ParserStateColumn
                        (
                            16390,	// On PLUS
                            null,
                            true,	// reduce by
                            8		// production 8
                        ),
                        new ParserStateColumn
                        (
                            16391,	// On MINUS
                            null,
                            true,	// reduce by
                            8		// production 8
                        ),
                        new ParserStateColumn
                        (
                            16392,	// On TIMES
                            null,
                            true,	// reduce by
                            8		// production 8
                        ),
                        new ParserStateColumn
                        (
                            16393,	// On DIVIDE
                            null,
                            true,	// reduce by
                            8		// production 8
                        ),
                        new ParserStateColumn
                        (
                            16389,	// On RPAREN
                            null,
                            true,	// reduce by
                            8		// production 8
                        ),
                    },

                    NonterminalColumns = new ParserStateColumn[0],
                },

                new ParserState
                {
                    StateString =
                        "State S29 CORE ITEMS:\r\n" +
                        "R5: powExpression: powExpression POWER leafExpression ^\r\n" +
                        "{\r\n" +
                        "    EOF,\r\n" +
                        "    PLUS,\r\n" +
                        "    MINUS,\r\n" +
                        "    TIMES,\r\n" +
                        "    DIVIDE,\r\n" +
                        "    POWER,\r\n" +
                        "    RPAREN\r\n" +
                        "}\r\n" +
                        "SHIFTS, REDUCTIONS AND GOTOS\r\n" +
                        "  EOF: REDUCE by rule R5: powExpression: powExpression POWER leafExpression;\r\n" +
                        "  PLUS: REDUCE by rule R5: powExpression: powExpression POWER leafExpression;\r\n" +
                        "  MINUS: REDUCE by rule R5: powExpression: powExpression POWER leafExpression;\r\n" +
                        "  TIMES: REDUCE by rule R5: powExpression: powExpression POWER leafExpression;\r\n" +
                        "  DIVIDE: REDUCE by rule R5: powExpression: powExpression POWER leafExpression;\r\n" +
                        "  POWER: REDUCE by rule R5: powExpression: powExpression POWER leafExpression;\r\n" +
                        "  RPAREN: REDUCE by rule R5: powExpression: powExpression POWER leafExpression;\r\n",

                    TerminalColumns = new ParserStateColumn[]
                    {
                        new ParserStateColumn
                        (
                            16385,	// On EOF
                            null,
                            true,	// reduce by
                            5		// production 5
                        ),
                        new ParserStateColumn
                        (
                            16390,	// On PLUS
                            null,
                            true,	// reduce by
                            5		// production 5
                        ),
                        new ParserStateColumn
                        (
                            16391,	// On MINUS
                            null,
                            true,	// reduce by
                            5		// production 5
                        ),
                        new ParserStateColumn
                        (
                            16392,	// On TIMES
                            null,
                            true,	// reduce by
                            5		// production 5
                        ),
                        new ParserStateColumn
                        (
                            16393,	// On DIVIDE
                            null,
                            true,	// reduce by
                            5		// production 5
                        ),
                        new ParserStateColumn
                        (
                            16394,	// On POWER
                            null,
                            true,	// reduce by
                            5		// production 5
                        ),
                        new ParserStateColumn
                        (
                            16389,	// On RPAREN
                            null,
                            true,	// reduce by
                            5		// production 5
                        ),
                    },

                    NonterminalColumns = new ParserStateColumn[0],
                },

                new ParserState
                {
                    StateString =
                        "State S30 CORE ITEMS:\r\n" +
                        "R3: leafExpression: LPAREN addExpression RPAREN ^\r\n" +
                        "{\r\n" +
                        "    EOF,\r\n" +
                        "    PLUS,\r\n" +
                        "    MINUS,\r\n" +
                        "    TIMES,\r\n" +
                        "    DIVIDE,\r\n" +
                        "    POWER,\r\n" +
                        "    RPAREN\r\n" +
                        "}\r\n" +
                        "SHIFTS, REDUCTIONS AND GOTOS\r\n" +
                        "  EOF: REDUCE by rule R3: leafExpression: LPAREN addExpression RPAREN;\r\n" +
                        "  PLUS: REDUCE by rule R3: leafExpression: LPAREN addExpression RPAREN;\r\n" +
                        "  MINUS: REDUCE by rule R3: leafExpression: LPAREN addExpression RPAREN;\r\n" +
                        "  TIMES: REDUCE by rule R3: leafExpression: LPAREN addExpression RPAREN;\r\n" +
                        "  DIVIDE: REDUCE by rule R3: leafExpression: LPAREN addExpression RPAREN;\r\n" +
                        "  POWER: REDUCE by rule R3: leafExpression: LPAREN addExpression RPAREN;\r\n" +
                        "  RPAREN: REDUCE by rule R3: leafExpression: LPAREN addExpression RPAREN;\r\n",

                    TerminalColumns = new ParserStateColumn[]
                    {
                        new ParserStateColumn
                        (
                            16385,	// On EOF
                            null,
                            true,	// reduce by
                            3		// production 3
                        ),
                        new ParserStateColumn
                        (
                            16390,	// On PLUS
                            null,
                            true,	// reduce by
                            3		// production 3
                        ),
                        new ParserStateColumn
                        (
                            16391,	// On MINUS
                            null,
                            true,	// reduce by
                            3		// production 3
                        ),
                        new ParserStateColumn
                        (
                            16392,	// On TIMES
                            null,
                            true,	// reduce by
                            3		// production 3
                        ),
                        new ParserStateColumn
                        (
                            16393,	// On DIVIDE
                            null,
                            true,	// reduce by
                            3		// production 3
                        ),
                        new ParserStateColumn
                        (
                            16394,	// On POWER
                            null,
                            true,	// reduce by
                            3		// production 3
                        ),
                        new ParserStateColumn
                        (
                            16389,	// On RPAREN
                            null,
                            true,	// reduce by
                            3		// production 3
                        ),
                    },

                    NonterminalColumns = new ParserStateColumn[0],
                },

                new ParserState
                {
                    StateString =
                        "State S31 CORE ITEMS:\r\n" +
                        "R14: number: NUMBER mantissa exponent ^\r\n" +
                        "{\r\n" +
                        "    EOF,\r\n" +
                        "    PLUS,\r\n" +
                        "    MINUS,\r\n" +
                        "    TIMES,\r\n" +
                        "    DIVIDE,\r\n" +
                        "    POWER,\r\n" +
                        "    RPAREN\r\n" +
                        "}\r\n" +
                        "SHIFTS, REDUCTIONS AND GOTOS\r\n" +
                        "  EOF: REDUCE by rule R14: number: NUMBER mantissa exponent;\r\n" +
                        "  PLUS: REDUCE by rule R14: number: NUMBER mantissa exponent;\r\n" +
                        "  MINUS: REDUCE by rule R14: number: NUMBER mantissa exponent;\r\n" +
                        "  TIMES: REDUCE by rule R14: number: NUMBER mantissa exponent;\r\n" +
                        "  DIVIDE: REDUCE by rule R14: number: NUMBER mantissa exponent;\r\n" +
                        "  POWER: REDUCE by rule R14: number: NUMBER mantissa exponent;\r\n" +
                        "  RPAREN: REDUCE by rule R14: number: NUMBER mantissa exponent;\r\n",

                    TerminalColumns = new ParserStateColumn[]
                    {
                        new ParserStateColumn
                        (
                            16385,	// On EOF
                            null,
                            true,	// reduce by
                            14		// production 14
                        ),
                        new ParserStateColumn
                        (
                            16390,	// On PLUS
                            null,
                            true,	// reduce by
                            14		// production 14
                        ),
                        new ParserStateColumn
                        (
                            16391,	// On MINUS
                            null,
                            true,	// reduce by
                            14		// production 14
                        ),
                        new ParserStateColumn
                        (
                            16392,	// On TIMES
                            null,
                            true,	// reduce by
                            14		// production 14
                        ),
                        new ParserStateColumn
                        (
                            16393,	// On DIVIDE
                            null,
                            true,	// reduce by
                            14		// production 14
                        ),
                        new ParserStateColumn
                        (
                            16394,	// On POWER
                            null,
                            true,	// reduce by
                            14		// production 14
                        ),
                        new ParserStateColumn
                        (
                            16389,	// On RPAREN
                            null,
                            true,	// reduce by
                            14		// production 14
                        ),
                    },

                    NonterminalColumns = new ParserStateColumn[0],
                },

                new ParserState
                {
                    StateString =
                        "State S32 CORE ITEMS:\r\n" +
                        "R17: exponent: EXPONENT NUMBER ^\r\n" +
                        "{\r\n" +
                        "    EOF,\r\n" +
                        "    PLUS,\r\n" +
                        "    MINUS,\r\n" +
                        "    TIMES,\r\n" +
                        "    DIVIDE,\r\n" +
                        "    POWER,\r\n" +
                        "    RPAREN\r\n" +
                        "}\r\n" +
                        "SHIFTS, REDUCTIONS AND GOTOS\r\n" +
                        "  EOF: REDUCE by rule R17: exponent: EXPONENT NUMBER;\r\n" +
                        "  PLUS: REDUCE by rule R17: exponent: EXPONENT NUMBER;\r\n" +
                        "  MINUS: REDUCE by rule R17: exponent: EXPONENT NUMBER;\r\n" +
                        "  TIMES: REDUCE by rule R17: exponent: EXPONENT NUMBER;\r\n" +
                        "  DIVIDE: REDUCE by rule R17: exponent: EXPONENT NUMBER;\r\n" +
                        "  POWER: REDUCE by rule R17: exponent: EXPONENT NUMBER;\r\n" +
                        "  RPAREN: REDUCE by rule R17: exponent: EXPONENT NUMBER;\r\n",

                    TerminalColumns = new ParserStateColumn[]
                    {
                        new ParserStateColumn
                        (
                            16385,	// On EOF
                            null,
                            true,	// reduce by
                            17		// production 17
                        ),
                        new ParserStateColumn
                        (
                            16390,	// On PLUS
                            null,
                            true,	// reduce by
                            17		// production 17
                        ),
                        new ParserStateColumn
                        (
                            16391,	// On MINUS
                            null,
                            true,	// reduce by
                            17		// production 17
                        ),
                        new ParserStateColumn
                        (
                            16392,	// On TIMES
                            null,
                            true,	// reduce by
                            17		// production 17
                        ),
                        new ParserStateColumn
                        (
                            16393,	// On DIVIDE
                            null,
                            true,	// reduce by
                            17		// production 17
                        ),
                        new ParserStateColumn
                        (
                            16394,	// On POWER
                            null,
                            true,	// reduce by
                            17		// production 17
                        ),
                        new ParserStateColumn
                        (
                            16389,	// On RPAREN
                            null,
                            true,	// reduce by
                            17		// production 17
                        ),
                    },

                    NonterminalColumns = new ParserStateColumn[0],
                },

                new ParserState
                {
                    StateString =
                        "State S33 CORE ITEMS:\r\n" +
                        "R18: exponent: EXPONENT MINUS ^ NUMBER\r\n" +
                        "SHIFTS, REDUCTIONS AND GOTOS\r\n" +
                        "  NUMBER: SHIFT to state S34\r\n",

                    TerminalColumns = new ParserStateColumn[]
                    {
                        new ParserStateColumn
                        (
                            16395,	// On NUMBER
                            null,
                            false,	// shift to
                            34		// state 34
                        ),
                    },

                    NonterminalColumns = new ParserStateColumn[0],
                },

                new ParserState
                {
                    StateString =
                        "State S34 CORE ITEMS:\r\n" +
                        "R18: exponent: EXPONENT MINUS NUMBER ^\r\n" +
                        "{\r\n" +
                        "    EOF,\r\n" +
                        "    PLUS,\r\n" +
                        "    MINUS,\r\n" +
                        "    TIMES,\r\n" +
                        "    DIVIDE,\r\n" +
                        "    POWER,\r\n" +
                        "    RPAREN\r\n" +
                        "}\r\n" +
                        "SHIFTS, REDUCTIONS AND GOTOS\r\n" +
                        "  EOF: REDUCE by rule R18: exponent: EXPONENT MINUS NUMBER;\r\n" +
                        "  PLUS: REDUCE by rule R18: exponent: EXPONENT MINUS NUMBER;\r\n" +
                        "  MINUS: REDUCE by rule R18: exponent: EXPONENT MINUS NUMBER;\r\n" +
                        "  TIMES: REDUCE by rule R18: exponent: EXPONENT MINUS NUMBER;\r\n" +
                        "  DIVIDE: REDUCE by rule R18: exponent: EXPONENT MINUS NUMBER;\r\n" +
                        "  POWER: REDUCE by rule R18: exponent: EXPONENT MINUS NUMBER;\r\n" +
                        "  RPAREN: REDUCE by rule R18: exponent: EXPONENT MINUS NUMBER;\r\n",

                    TerminalColumns = new ParserStateColumn[]
                    {
                        new ParserStateColumn
                        (
                            16385,	// On EOF
                            null,
                            true,	// reduce by
                            18		// production 18
                        ),
                        new ParserStateColumn
                        (
                            16390,	// On PLUS
                            null,
                            true,	// reduce by
                            18		// production 18
                        ),
                        new ParserStateColumn
                        (
                            16391,	// On MINUS
                            null,
                            true,	// reduce by
                            18		// production 18
                        ),
                        new ParserStateColumn
                        (
                            16392,	// On TIMES
                            null,
                            true,	// reduce by
                            18		// production 18
                        ),
                        new ParserStateColumn
                        (
                            16393,	// On DIVIDE
                            null,
                            true,	// reduce by
                            18		// production 18
                        ),
                        new ParserStateColumn
                        (
                            16394,	// On POWER
                            null,
                            true,	// reduce by
                            18		// production 18
                        ),
                        new ParserStateColumn
                        (
                            16389,	// On RPAREN
                            null,
                            true,	// reduce by
                            18		// production 18
                        ),
                    },

                    NonterminalColumns = new ParserStateColumn[0],
                },

            };

            return table;
        }

        // Initialize the guard condition evaluator functions

        private static IGuardEvaluator[] InitGuards()
        {
            return new IGuardEvaluator[]
            {
            };
        }

        // The action functions taken from the inline code fragments
        // after the grammar rules, and used when rules are reduced.

        // result: addExpression

        public void Action_result_0(object[] args)
        {
            double arg1 = (double)args[1];
            // Result is a property of the
            // Calculator parser class,
            // used to extract the result
            // of the calculation after the
            // parser has run.

            Result = arg1.ToString();
        }

        // leafExpression: number

        public void Action_leafExpression_0(object[] args)
        {
            double arg0 = default(double);
            double arg1 = (double)args[1];
            try
            {
                arg0 = arg1;
            }
            finally
            {
                args[0] = arg0;
            }
        }

        // leafExpression: LPAREN addExpression RPAREN

        public void Action_leafExpression_1(object[] args)
        {
            double arg0 = default(double);
            double arg2 = (double)args[2];
            try
            {
                arg0 = arg2;
            }
            finally
            {
                args[0] = arg0;
            }
        }

        // leafExpression: MINUS leafExpression

        public void Action_leafExpression_2(object[] args)
        {
            double arg0 = default(double);
            double arg2 = (double)args[2];
            try
            {
                arg0 = -arg2;
            }
            finally
            {
                args[0] = arg0;
            }
        }

        // powExpression: powExpression POWER leafExpression

        public void Action_powExpression_0(object[] args)
        {
            double arg0 = default(double);
            double arg1 = (double)args[1];
            double arg3 = (double)args[3];
            try
            {
                arg0 = Math.Pow(arg1, arg3);
            }
            finally
            {
                args[0] = arg0;
            }
        }

        // powExpression: leafExpression

        public void Action_powExpression_1(object[] args)
        {
            double arg0 = default(double);
            double arg1 = (double)args[1];
            try
            {
                arg0 = arg1;
            }
            finally
            {
                args[0] = arg0;
            }
        }

        // mulExpression: mulExpression TIMES powExpression

        public void Action_mulExpression_0(object[] args)
        {
            double arg0 = default(double);
            double arg1 = (double)args[1];
            double arg3 = (double)args[3];
            try
            {
                arg0 = arg1 * arg3;
            }
            finally
            {
                args[0] = arg0;
            }
        }

        // mulExpression: mulExpression DIVIDE powExpression

        public void Action_mulExpression_1(object[] args)
        {
            double arg0 = default(double);
            double arg1 = (double)args[1];
            double arg3 = (double)args[3];
            try
            {
                arg0 = arg1 / arg3;
            }
            finally
            {
                args[0] = arg0;
            }
        }

        // mulExpression: powExpression

        public void Action_mulExpression_2(object[] args)
        {
            double arg0 = default(double);
            double arg1 = (double)args[1];
            try
            {
                arg0 = arg1;
            }
            finally
            {
                args[0] = arg0;
            }
        }

        // addExpression: addExpression PLUS mulExpression

        public void Action_addExpression_0(object[] args)
        {
            double arg0 = default(double);
            double arg1 = (double)args[1];
            double arg3 = (double)args[3];
            try
            {
                arg0 = arg1 + arg3;
            }
            finally
            {
                args[0] = arg0;
            }
        }

        // addExpression: addExpression MINUS mulExpression

        public void Action_addExpression_1(object[] args)
        {
            double arg0 = default(double);
            double arg1 = (double)args[1];
            double arg3 = (double)args[3];
            try
            {
                arg0 = arg1 - arg3;
            }
            finally
            {
                args[0] = arg0;
            }
        }

        // addExpression: mulExpression

        public void Action_addExpression_2(object[] args)
        {
            double arg0 = default(double);
            double arg1 = (double)args[1];
            try
            {
                arg0 = arg1;
            }
            finally
            {
                args[0] = arg0;
            }
        }

        // number: NUMBER exponent

        public void Action_number_0(object[] args)
        {
            double arg0 = default(double);
            string arg1 = (string)args[1];
            double arg2 = (double)args[2];
            try
            {
                arg0 = double.Parse(arg1) * Math.Pow(10.0, arg2);
            }
            finally
            {
                args[0] = arg0;
            }
        }

        // number: NUMBER mantissa exponent

        public void Action_number_1(object[] args)
        {
            double arg0 = default(double);
            string arg1 = (string)args[1];
            double arg2 = (double)args[2];
            double arg3 = (double)args[3];
            try
            {
                arg0 = (double.Parse(arg1) + arg2) 
                	* Math.Pow(10.0, arg3);
            }
            finally
            {
                args[0] = arg0;
            }
        }

        // number: mantissa exponent

        public void Action_number_2(object[] args)
        {
            double arg0 = default(double);
            double arg1 = (double)args[1];
            double arg2 = (double)args[2];
            try
            {
                arg0 = arg1 * Math.Pow(10.0, arg2);
            }
            finally
            {
                args[0] = arg0;
            }
        }

        // mantissa: PERIOD NUMBER

        public void Action_mantissa_0(object[] args)
        {
            double arg0 = default(double);
            string arg2 = (string)args[2];
            try
            {
                int digitCount = arg2.Length;
                double mantissa = double.Parse(arg2);
                while(--digitCount >= 0)
                    mantissa *= 0.1;
                arg0 = mantissa;
            }
            finally
            {
                args[0] = arg0;
            }
        }

        // exponent: EXPONENT NUMBER

        public void Action_exponent_0(object[] args)
        {
            double arg0 = default(double);
            string arg2 = (string)args[2];
            try
            {
                arg0 = double.Parse(arg2);
            }
            finally
            {
                args[0] = arg0;
            }
        }

        // exponent: EXPONENT MINUS NUMBER

        public void Action_exponent_1(object[] args)
        {
            double arg0 = default(double);
            string arg3 = (string)args[3];
            try
            {
                arg0 = - double.Parse(arg3);
            }
            finally
            {
                args[0] = arg0;
            }
        }

        // exponent:

        public void Action_exponent_2(object[] args)
        {
            double arg0 = default(double);
            try
            {
                arg0 = 0.0;
            }
            finally
            {
                args[0] = arg0;
            }
        }
    }
}
